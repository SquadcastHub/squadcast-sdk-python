openapi: "3.1.0"
info:
  title: "Squadcast"
  version: "1.0.0"
tags:
  - name: "Schedule"
  - name: "Schedule/Export Schedule"
  - name: "Rotation"
  - name: "Overrides"
  - name: "Status Pages/Subscribers"
  - name: "Status Pages"
  - name: "Status Pages/Issues"
  - name: "Status Pages/Maintenances"
  - name: "Status Pages/Components"
  - name: "Status Pages/Component groups"
  - name: "Squads/V4"
  - name: "Runbooks"
  - name: "Users/Api Token"
  - name: "Users"
  - name: "Teams"
  - name: "Services"
  - name: "Services/Tagging Rules"
  - name: "Services/Maintenance Mode"
  - name: "Services/Dependencies"
  - name: "Services/Routing Rules"
  - name: "Services/Deduplication Rules"
  - name: "Services/Suppression Rules"
  - name: "Services/Extensions"
  - name: "Services/Overlay"
  - name: "Services/Overlay/Dedup Key Overlay"
  - name: "Services/Overlay/Custom Content Templates"
  - name: "Global Event Rules/Rulesets/Rules"
  - name: "Global Event Rules/Rulesets"
  - name: "Global Event Rules"
  - name: "Analytics"
  - name: "Export"
  - name: "Escalation Policies"
  - name: "Workflows"
  - name: "Extensions/Webhooks"
  - name: "Extensions/MSTeams"
  - name: "Global Oncall Reminder Rules"
  - name: "Incidents"
  - name: "Incidents/Postmortems"
  - name: "Incidents/Runbooks"
  - name: "Incidents/Notes"
  - name: "Incidents/Communication Card"
  - name: "Incidents/Tags"
  - name: "Incidents/Auto Pause Transient Alerts (APTA)"
  - name: "Incidents/Snooze Notifications"
  - name: "Incidents/Additional Responders"
  - name: "Incidents/Incident Actions"
  - name: "SLOs"
  - name: "Webforms"
  - name: "Squads/V3"
paths:
  "/v3/analyticsv2/organization":
    get:
      operationId: "Analytics_getOrgAnalytics"
      summary: "Get Org level analytics"
      description: "Get Org level analytics"
      parameters:
        - name: "from"
          in: "query"
          required: true
          schema:
            type: "string"
          explode: false
        - name: "to"
          in: "query"
          required: true
          schema:
            type: "string"
          explode: false
        - name: "team_id"
          in: "query"
          required: false
          schema:
            type: "string"
          explode: false
        - name: "user_id"
          in: "query"
          required: false
          schema:
            type: "string"
          explode: false
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Analytics.AnalyticsResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Analytics"
      x-speakeasy-name-override: "getOrgAnalytics"
  "/v3/analyticsv2/team":
    get:
      operationId: "Analytics_getTeamAnalytics"
      summary: "Get Team level analytics"
      description: "Get Team level analytics"
      parameters:
        - name: "owner_id"
          in: "query"
          required: true
          schema:
            type: "string"
          explode: false
        - name: "from"
          in: "query"
          required: true
          schema:
            type: "string"
          explode: false
        - name: "to"
          in: "query"
          required: true
          schema:
            type: "string"
          explode: false
        - name: "user_id"
          in: "query"
          required: false
          schema:
            type: "string"
          explode: false
        - name: "service_id"
          in: "query"
          required: false
          schema:
            type: "string"
          explode: false
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Analytics.AnalyticsResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Analytics"
      x-speakeasy-name-override: "getTeam"
  "/v3/escalation-policies":
    get:
      operationId: "EscalationPolicies_getEscalationPolicyByTeam"
      summary: "Get Escalation Policy By team"
      description: "Returns all escalation policy details of the given `ownerID` (teamId) in the request param.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `read` scope."
      parameters:
        - name: "owner_id"
          in: "query"
          required: false
          description: "here owner_id represents team_id, if  team_id is not provided, it will return escalation policies of all teams."
          schema:
            type: "string"
        - name: "page_number"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "page_size"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V3.EscalationPolicies.EscalationPolicyResponse"}
                  "meta":
                    type: "object"
                    properties:
                      "total_count":
                        type: "integer"
                        format: "int32"
                    required:
                      - "total_count"
                required:
                  - "data"
                  - "meta"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Escalation Policies"
      x-speakeasy-group: "escalationPolicies"
      x-speakeasy-name-override: "getByTeam"
    post:
      operationId: "EscalationPolicies_createEscalationPolicies"
      summary: "Create Escalation Policies"
      description: "Add escalation policy to the organization. Returns the escalation policy object in response.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.EscalationPolicies.EscalationPolicyResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Escalation Policies"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.EscalationPolicies.CreateEscalationPolicyRequest"}
      x-speakeasy-group: "escalationPolicies"
      x-speakeasy-name-override: "create"
  "/v3/escalation-policies/{escalationPolicyID}":
    delete:
      operationId: "EscalationPolicies_removeEscalationPolicy"
      summary: "Remove Escalation Policy"
      description: "Remove escalation policy from the organization. Upon success, the escalation policy will be removed from the organization.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      parameters:
        - name: "escalationPolicyID"
          in: "path"
          required: true
          description: "(Required) escalation policy ID"
          schema:
            type: "string"
        - name: "authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Escalation Policies"
      x-speakeasy-group: "escalationPolicies"
      x-speakeasy-name-override: "remove"
    get:
      operationId: "EscalationPolicies_getEscalationPolicyById"
      summary: "Get Escalation Policy By ID"
      description: "Returns an escalation policy details of the given `escalationPolicyID` in the request param.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `read` scope."
      parameters:
        - name: "escalationPolicyID"
          in: "path"
          required: true
          description: "(Required) escalation policy ID"
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.EscalationPolicies.EscalationPolicyResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Escalation Policies"
      x-speakeasy-group: "escalationPolicies"
      x-speakeasy-name-override: "getById"
    post:
      operationId: "EscalationPolicies_updateEscalationPolicy"
      summary: "Update Escalation Policy"
      description: "Update organization escalation policy details.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      parameters:
        - name: "escalationPolicyID"
          in: "path"
          required: true
          description: "(Required) escalation policy ID"
          schema:
            type: "string"
        - name: "authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.EscalationPolicies.EscalationPolicyResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Escalation Policies"
      requestBody:
        required: true
        content:
          "text/plain":
            schema: {"$ref": "#/components/schemas/V3.EscalationPolicies.UpdateEscalationPolicyRequest"}
      x-speakeasy-group: "escalationPolicies"
      x-speakeasy-name-override: "update"
  "/v3/exports/{export_id}":
    get:
      operationId: "Export_getExportDetails"
      summary: "Get Export Details"
      description: "Get Export Details"
      parameters:
        - name: "export_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Export.ExportResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Export"
      x-speakeasy-group: "exports"
      x-speakeasy-name-override: "getDetails"
  "/v3/extensions/event-webhooks":
    get:
      operationId: "Webhooks_getAllWebhooks"
      summary: "Get All Webhooks"
      description: "Returns all the webhooks of the organization.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `read` scope."
      parameters:
        - name: "page-limit"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/V3.Extensions.Webhooks.GetAllWebhooksResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Extensions/Webhooks"
      x-speakeasy-group: "extensions.webhooks"
      x-speakeasy-name-override: "getAll"
    post:
      operationId: "Webhooks_createWebhook"
      summary: "Create Webhook"
      description: "Add webhook to the organization. Returns the webhook object in response.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "body"
                properties:
                  "body":
                    type: "object"
                    required:
                      - "data"
                    properties:
                      "data": {"$ref": "#/components/schemas/V3.Extensions.Webhooks.WebhookResponse"}
                    description: "The body type of the operation request or response."
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Extensions/Webhooks"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Extensions.Webhooks.Webhook"}
      x-speakeasy-group: "webhooks"
      x-speakeasy-name-override: "create"
  "/v3/extensions/event-webhooks/{eventWebhookID}":
    delete:
      operationId: "Webhooks_deleteWebhook"
      summary: "Delete Webhook"
      description: "Remove webhook from the organization. Upon success, the webhook will be removed from the organization.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      parameters:
        - name: "eventWebhookID"
          in: "path"
          required: true
          description: "(Required) event webhook ID"
          schema:
            type: "string"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Extensions/Webhooks"
      x-speakeasy-group: "webhooks"
      x-speakeasy-name-override: "delete"
    get:
      operationId: "Webhooks_getWebhookById"
      summary: "Get Webhook By ID"
      description: "Returns a webhooks details of the given `eventWebhookID` in the request param.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `read` scope."
      parameters:
        - name: "eventWebhookID"
          in: "path"
          required: true
          description: "(Required) event webhook ID"
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Extensions.Webhooks.WebhookResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Extensions/Webhooks"
      x-speakeasy-group: "webhooks"
      x-speakeasy-name-override: "getById"
    put:
      operationId: "Webhooks_updateWebhook"
      summary: "Update Webhook"
      description: "Update organization webhook details.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      parameters:
        - name: "eventWebhookID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Extensions.Webhooks.WebhookResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Extensions/Webhooks"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Extensions.Webhooks.Webhook"}
      x-speakeasy-group: "webhooks"
      x-speakeasy-name-override: "update"
  "/v3/extensions/msteams/config":
    get:
      operationId: "MSTeams_getMsteamsConfig"
      summary: "Get MSTeams Config"
      description: "Returns MSTeams config of the organization.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `read` scope."
      parameters:
        - name: "authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Extensions.MSTeams.MSTeamsConfigResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Extensions/MSTeams"
      x-speakeasy-group: "extensions.msTeams"
      x-speakeasy-name-override: "getConfig"
    post:
      operationId: "MSTeams_createOrUpdateMsteamsConfiguration"
      summary: "Create Or Update MSTeams Configuration"
      description: "Requires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      parameters:
        - name: "authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Extensions.MSTeams.MSTeamsConfigResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Extensions/MSTeams"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Extensions.MSTeams.CreateOrUpdateMSTeamsConfigRequest"}
      x-speakeasy-group: "extensions.msteams"
      x-speakeasy-name-override: "createOrUpdateConfig"
  "/v3/extensions/slack_v2/channel":
    post:
      operationId: "CommunicationCards_createSlackChannelInCommunicationCard"
      summary: "Create Slack Channel in Communication Card"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Incidents.CommunicationCards.CommunicationCardResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Communication Card"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Incidents.CommunicationCards.CreateSlackChannelRequest"}
      x-speakeasy-group: "incidents.communicationCard"
      x-speakeasy-name-override: "createSlackChannel"
  "/v3/extensions/slack_v2/channel/archive":
    post:
      operationId: "CommunicationCards_archiveSlackChannel"
      summary: "Archive Slack Channel"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Incidents.CommunicationCards.CommunicationCardResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Communication Card"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Incidents.CommunicationCards.ArchiveSlackChannelRequest"}
      x-speakeasy-group: "incidents.communicationCard"
      x-speakeasy-name-override: "archiveSlackChannel"
  "/v3/global-event-rules":
    get:
      operationId: "GlobalEventRules_listGlobalEventRules"
      summary: "List Global Event Rules"
      description: "Get a list of all GERs"
      parameters:
        - name: "owner_id"
          in: "query"
          required: true
          schema:
            type: "string"
        - name: "page_size"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "page_number"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "filters.owner_id[]"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        - name: "filters.search"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V3.GlobalEventRules.GlobalEventRuleInList"}
                  "meta":
                    type: "object"
                    properties:
                      "total_count":
                        type: "integer"
                    required:
                      - "total_count"
                required:
                  - "data"
                  - "meta"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Global Event Rules"
      x-speakeasy-group: "globalEventRules"
      x-speakeasy-name-override: "list"
    post:
      operationId: "GlobalEventRules_createGlobalEventRule"
      summary: "Create Global Event Rule"
      description: "Create a GER"
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.GlobalEventRules.CreatedGlobalEventRuleResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Global Event Rules"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.GlobalEventRules.CreateGlobalEventRuleRequest"}
      x-speakeasy-group: "globalEventRules"
      x-speakeasy-name-override: "createRule"
  "/v3/global-event-rules/{ger_id}":
    delete:
      operationId: "GlobalEventRules_deleteGlobalEventRuleById"
      summary: "Delete Global Event Rule by ID"
      description: "Delete a GER by its ID"
      parameters:
        - name: "ger_id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Global Event Rules"
      x-speakeasy-group: "globalEventRules"
      x-speakeasy-name-override: "deleteById"
    get:
      operationId: "GlobalEventRules_getGlobalEventRuleById"
      summary: "Get Global Event Rule by ID"
      description: "Get a GER by its ID"
      parameters:
        - name: "ger_id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.GlobalEventRules.GlobalEventRuleResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Global Event Rules"
      x-speakeasy-group: "globalEventRules"
      x-speakeasy-name-override: "getById"
    patch:
      operationId: "GlobalEventRules_updateGlobalEventRuleById"
      summary: "Update Global Event Rule by ID"
      description: "Update a GER by its ID"
      parameters:
        - name: "ger_id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.GlobalEventRules.GlobalEventRuleResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Global Event Rules"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.GlobalEventRules.UpdateGlobalEventRuleRequest"}
      x-speakeasy-group: "globalEventRules"
      x-speakeasy-name-override: "updateById"
  "/v3/global-event-rules/{ger_id}/rulesets":
    post:
      operationId: "GlobalEventRules_createRuleset"
      summary: "Create Ruleset"
      description: "Create a GER Ruleset."
      parameters:
        - name: "ger_id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.GlobalEventRules.RulesetResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Global Event Rules/Rulesets"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.GlobalEventRules.CreateRulesetRequest"}
      x-speakeasy-group: "globalEventRules.rulesets"
      x-speakeasy-name-override: "create"
  "/v3/global-event-rules/{ger_id}/rulesets/{alert_source_version}/{alert_source_shortname}":
    delete:
      operationId: "GlobalEventRules_deleteGerRuleset"
      summary: "Delete GER Ruleset"
      description: "Delete a GER Ruleset"
      parameters:
        - name: "ger_id"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "alert_source_version"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "alert_source_shortname"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Global Event Rules/Rulesets"
      x-speakeasy-group: "globalEventRules.rulesets"
      x-speakeasy-name-override: "delete"
    get:
      operationId: "GlobalEventRules_getRuleset"
      summary: "Get Ruleset"
      description: "Get a GER Ruleset"
      parameters:
        - name: "ger_id"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "alert_source_version"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "alert_source_shortname"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.GlobalEventRules.RulesetResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Global Event Rules/Rulesets"
      x-speakeasy-group: "globalEventRules.rulesets"
      x-speakeasy-name-override: "get"
    patch:
      operationId: "GlobalEventRules_updateRuleset"
      summary: "Update Ruleset"
      description: "Update a GER Ruleset"
      parameters:
        - name: "ger_id"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "alert_source_version"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "alert_source_shortname"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.GlobalEventRules.RulesetResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Global Event Rules/Rulesets"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.GlobalEventRules.UpdateRulesetRequest"}
      x-speakeasy-group: "globalEventRules.rulesets"
      x-speakeasy-name-override: "update"
  "/v3/global-event-rules/{ger_id}/rulesets/{alert_source_version}/{alert_source_shortname}/priority":
    patch:
      operationId: "GlobalEventRules_reorderRuleset"
      summary: "Reorder Ruleset"
      description: "Reorder rules of a GER Ruleset"
      parameters:
        - name: "ger_id"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "alert_source_version"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "alert_source_shortname"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.GlobalEventRules.OrderingResponse"}
      tags:
        - "Global Event Rules/Rulesets"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.GlobalEventRules.ReorderRulesetRequest"}
      x-speakeasy-group: "rulesets"
      x-speakeasy-name-override: "reorder"
  "/v3/global-event-rules/{ger_id}/rulesets/{alert_source_version}/{alert_source_shortname}/rules":
    get:
      operationId: "GlobalEventRules_listRulesetRules"
      summary: "List Ruleset Rules"
      description: "Get all rules of a GER Ruleset."
      parameters:
        - name: "ger_id"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "alert_source_version"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "alert_source_shortname"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "page_size"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "page_number"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "filters.search"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V3.GlobalEventRules.RulesetRuleResponse"}
                  "meta":
                    type: "object"
                    properties:
                      "total_count":
                        type: "integer"
                    required:
                      - "total_count"
                required:
                  - "data"
                  - "meta"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Global Event Rules/Rulesets/Rules"
      x-speakeasy-group: "globalEventRules.rulesets.rules"
      x-speakeasy-name-override: "list"
    post:
      operationId: "GlobalEventRules_createRule"
      summary: "Create Rule"
      description: "Create a GER Ruleset Rule."
      parameters:
        - name: "ger_id"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "alert_source_version"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "alert_source_shortname"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.GlobalEventRules.RulesetRuleResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Global Event Rules/Rulesets/Rules"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.GlobalEventRules.CreateOrUpdateRuleRequest"}
      x-speakeasy-group: "globalEventRules.rulesets.rules"
      x-speakeasy-name-override: "create"
  "/v3/global-event-rules/{ger_id}/rulesets/{alert_source_version}/{alert_source_shortname}/rules/{rule_id}":
    get:
      operationId: "GlobalEventRules_getRuleById"
      summary: "Get Rule by ID"
      description: "Get a GER Ruleset Rule by its ID."
      parameters:
        - name: "ger_id"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "alert_source_version"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "alert_source_shortname"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "rule_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.GlobalEventRules.RulesetRuleResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Global Event Rules/Rulesets/Rules"
      x-speakeasy-group: "globalEventRules.rulesets.rules"
      x-speakeasy-name-override: "getById"
    delete:
      operationId: "GlobalEventRules_deleteRuleById"
      summary: "Delete Rule by ID"
      description: "Delete a GER Ruleset Rule by its ID."
      parameters:
        - name: "ger_id"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "alert_source_version"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "alert_source_shortname"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "rule_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Global Event Rules/Rulesets/Rules"
      x-speakeasy-group: "rules"
      x-speakeasy-name-override: "deleteById"
    patch:
      operationId: "GlobalEventRules_updateRuleById"
      summary: "Update Rule by ID"
      description: "Update a GER Ruleset Rule by its ID."
      parameters:
        - name: "ger_id"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "alert_source_version"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "alert_source_shortname"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "rule_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.GlobalEventRules.RulesetRuleResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Global Event Rules/Rulesets/Rules"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.GlobalEventRules.UpdateRuleRequest"}
      x-speakeasy-group: "globalEventRules.rulesets.rules"
      x-speakeasy-name-override: "updateById"
  "/v3/global-event-rules/{ger_id}/rulesets/{alert_source_version}/{alert_source_shortname}/rules/{rule_id}/priority":
    patch:
      operationId: "GlobalEventRules_reorderRulesetByIndex"
      summary: "Reorder Ruleset By Index"
      description: "Reorder a GER Ruleset Rule by its index in the ruleset."
      parameters:
        - name: "ger_id"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "alert_source_version"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "alert_source_shortname"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "rule_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.GlobalEventRules.OrderingResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Global Event Rules/Rulesets/Rules"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.GlobalEventRules.ReorderRuleRequest"}
      x-speakeasy-group: "globalEventRules.rulesets.rules"
      x-speakeasy-name-override: "reorder"
  "/v3/global-oncall-reminder-rules":
    delete:
      operationId: "GlobalOncallReminderRules_deleteGlobalOncallReminderRules"
      summary: "Delete Global Oncall Reminder Rules"
      description: "Delete Global Oncall Reminder Rules"
      parameters:
        - name: "owner_id"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Global Oncall Reminder Rules"
      x-speakeasy-group: "globalOncallReminderRules"
      x-speakeasy-name-override: "delete"
    get:
      operationId: "GlobalOncallReminderRules_getGlobalOncallReminderRules"
      summary: "Get Global Oncall Reminder Rules"
      description: "Get Global Oncall Reminder Rules"
      parameters:
        - name: "owner_id"
          in: "query"
          required: true
          description: "required *"
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.GlobalOncallReminderRules.GlobalOncallReminderRuleResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Global Oncall Reminder Rules"
      x-speakeasy-group: "globalOncallReminderRules"
      x-speakeasy-name-override: "get"
    post:
      operationId: "GlobalOncallReminderRules_createGlobalOncallReminderRules"
      summary: "Create Global Oncall Reminder Rules"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.GlobalOncallReminderRules.GlobalOncallReminderRuleResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Global Oncall Reminder Rules"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.GlobalOncallReminderRules.CreateGlobalOncallReminderRulesRequest"}
      x-speakeasy-group: "globalOncallReminderRules"
      x-speakeasy-name-override: "create"
    put:
      operationId: "GlobalOncallReminderRules_updateGlobalOncallReminderRules"
      summary: "Update Global Oncall Reminder Rules"
      description: "Update Global Oncall Reminder Rules"
      parameters:
        - name: "owner_id"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.GlobalOncallReminderRules.GlobalOncallReminderRuleResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Global Oncall Reminder Rules"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.GlobalOncallReminderRules.UpdateGlobalOncallReminderRulesRequest"}
      x-speakeasy-group: "globalOncallReminderRules"
      x-speakeasy-name-override: "update"
  "/v3/incidents/acknowledge":
    post:
      operationId: "Incidents_bulkAcknowledgeIncidents"
      summary: "Bulk Acknowledge Incidents"
      description: "- This endpoint is used to bulk acknowledge the incident by IDs.\n- Requires `access_token` as a `Bearer {{token}}` in the `Authorization` header."
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "string"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Incidents.BulkIncidentIDsRequest"}
      x-speakeasy-name-override: "bulkAcknowledge"
  "/v3/incidents/export":
    get:
      operationId: "Incidents_incidentExport"
      summary: "Incident Export"
      description: "- This endpoint is used to export the incident details into a `csv` or `json` file.\n- Requires `access_token` as a `Bearer {{token}}` in the `Authorization` header.\n- Header field/value: `Content-Type`: `text/csv`\n\n\nQuery Params:\n\n```\ntype: csv or json\nstart_time: filter by date range\nend_time: filter by date range\nservices: filter by services\nsources: filter by alert sources\nassigned_to: filter by assignee\nstatus: filter by incident status\nslo_affecting: filetr by slo affected\nslos: filter by slos\ntags: filter by tags key=value\n\n ```"
      parameters:
        - {"$ref": "#/components/parameters/V3.Incidents.IncidentExportRequest.start_time"}
        - {"$ref": "#/components/parameters/V3.Incidents.IncidentExportRequest.end_time"}
        - {"$ref": "#/components/parameters/V3.Incidents.IncidentExportRequest.type"}
        - {"$ref": "#/components/parameters/V3.Incidents.IncidentExportRequest.owner_id"}
        - {"$ref": "#/components/parameters/V3.Incidents.IncidentExportRequest.status"}
        - {"$ref": "#/components/parameters/V3.Incidents.IncidentExportRequest.services"}
        - {"$ref": "#/components/parameters/V3.Incidents.IncidentExportRequest.sources"}
        - {"$ref": "#/components/parameters/V3.Incidents.IncidentExportRequest.assigned_to"}
        - {"$ref": "#/components/parameters/V3.Incidents.IncidentExportRequest.assignedToUserIDsAndTheirSquads"}
        - {"$ref": "#/components/parameters/V3.Incidents.IncidentExportRequest.service_owner"}
        - {"$ref": "#/components/parameters/V3.Incidents.IncidentExportRequest.priority"}
        - {"$ref": "#/components/parameters/V3.Incidents.IncidentExportRequest.tags"}
        - {"$ref": "#/components/parameters/V3.Incidents.IncidentExportRequest.slo_affecting"}
        - {"$ref": "#/components/parameters/V3.Incidents.IncidentExportRequest.slos"}
        - {"$ref": "#/components/parameters/V3.Incidents.IncidentExportRequest.is_starred"}
        - {"$ref": "#/components/parameters/V3.Incidents.IncidentExportRequest.textFilter"}
        - {"$ref": "#/components/parameters/V3.Incidents.IncidentExportRequest.notes"}
        - {"$ref": "#/components/parameters/V3.Incidents.IncidentExportRequest.retrospectives"}
        - {"$ref": "#/components/parameters/V3.Incidents.IncidentExportRequest.sort_by"}
      responses:
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "*/*":
              schema:
                type: "object"
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "*/*":
              schema:
                type: "object"
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents"
      x-speakeasy-name-override: "export_incidents"
  "/v3/incidents/export/async":
    post:
      operationId: "Incidents_incidentExportAsync"
      summary: "Incident Export Async"
      description: "*   This is an async API, once the request is made the export will start in our workers. You will get a download link to your registered Email ID once the export is completed\n\n\n### Payload\n\n| Key | Value | Example |\n| --- | --- | --- |\n| type | csv / json | “csv” |\n| start_time | Date in ISO Format | “2020-01-01T00:00:00.000Z” |\n| end_time | Date in ISO Format | “2020-04-01T00:00:00.000Z” |\n| owner_id | Team ID | “611262a9d5b4ea846b534a3f” |\n\n### Incident Filters\n\n| Key | Value | Example |\n| --- | --- | --- |\n| statuses | Array of triggered / resolved / acknowledged / suppressed | \\[“triggered”, “acknowleged”\\] |\n| tags | Array of tags in format “KEY=VALUE” | \\[“severity=high”, “severity=low”\\] |\n| sources | Array of Alert Source IDs | \\[“6077f7225fdc7075e371685f”\\] |\n| services | Array of Service IDs | \\[\"62385fb309bc474014180828\"\\] |\n| assigned_to | Array of Assigned to user IDs | \\[\"625e40c9a9bd76370bf9f7fb\"\\] |"
      responses:
        "202":
          description: "The request has been accepted for processing, but processing has not yet completed."
          content:
            "*/*":
              schema:
                type: "object"
                required:
                  - "body"
                properties:
                  "body":
                    type: "object"
                    required:
                      - "data"
                    properties:
                      "data": {"$ref": "#/components/schemas/V3.Incidents.IncidentExportAsyncResponse"}
                    description: "The body type of the operation request or response."
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Incidents.IncidentExportAsyncRequest"}
      x-speakeasy-group: "incidents.export"
      x-speakeasy-name-override: "export_async"
  "/v3/incidents/postmortem":
    get:
      operationId: "Postmortems_getAllPostmortems"
      summary: "Get All Postmortems"
      description: "*   This endpoint is used to get all postmortems.\n*   Requires `access_token` as a `Bearer {{token}}` in the `Authorization` header."
      parameters:
        - name: "fromDate"
          in: "query"
          required: true
          description: "Provide date in RFC3339 format"
          schema:
            type: "string"
        - name: "toDate"
          in: "query"
          required: true
          description: "Provide date in RFC3339 format"
          schema:
            type: "string"
        - name: "owner_id"
          in: "query"
          required: true
          description: "Here owner_id represents team_id"
          schema:
            type: "string"
        - name: "limit"
          in: "query"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "data":
                    type: "array"
                    items:
                      type: "object"
                      properties:
                        "result":
                          type: "array"
                          items: {"$ref": "#/components/schemas/V3.Incidents.Postmortems.PostmortemListResult"}
                        "total_count":
                          type: "array"
                          items: {"$ref": "#/components/schemas/V3.Incidents.Postmortems.TotalPostmortemCount"}
                      required:
                        - "result"
                        - "total_count"
                required:
                  - "data"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Postmortems"
      x-speakeasy-group: "postmortems"
      x-speakeasy-name-override: "getAll"
  "/v3/incidents/priority":
    put:
      operationId: "Incidents_bulkIncidentsPriorityUpdate"
      summary: "Bulk Incidents Priority Update"
      description: "- This endpoint is used to bulk update incident priority.\n\n- Requires `access_token` as a `Bearer {{token}}` in the `Authorization` header."
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Incidents.BulkIncidentsPriorityUpdateRequest"}
      x-speakeasy-name-override: "bulkUpdatePriority"
  "/v3/incidents/resolve":
    post:
      operationId: "Incidents_bulkResolveIncidents"
      summary: "Bulk Resolve Incidents"
      description: "- This endpoint is used to bulk resolve the incident by IDs.\n- Requires `access_token` as a `Bearer {{token}}` in the `Authorization` header."
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "string"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Incidents.BulkIncidentIDsRequest"}
      x-speakeasy-name-override: "bulkResolve"
  "/v3/incidents/{IncidentId}/communication_cards":
    get:
      operationId: "CommunicationCards_getAllCommunicationCard"
      summary: "Get All Communication Card"
      description: "*   This endpoint is used to get all the communication card details for incidentId metioned in params.\n*   Requires `access_token` as a `Bearer {{token}}` in the `Authorization` header."
      parameters:
        - name: "IncidentId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V3.Incidents.CommunicationCards.CommunicationCardResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Communication Card"
      x-speakeasy-group: "communicationCards"
      x-speakeasy-name-override: "getAll"
    post:
      operationId: "CommunicationCards_createCommunicationCard"
      summary: "Create Communication Card"
      parameters:
        - name: "IncidentId"
          in: "path"
          required: true
          description: "Required"
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Incidents.CommunicationCards.CommunicationCardResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Communication Card"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Incidents.CommunicationCards.CreateCommunicationCardRequest"}
      x-speakeasy-group: "incidents.communicationCards"
      x-speakeasy-name-override: "create"
  "/v3/incidents/{IncidentId}/communication_cards/{communicationCardId}":
    delete:
      operationId: "CommunicationCards_deleteCommunicationCard"
      summary: "Delete Communication Card"
      description: "Delete communication card by providing communicationCardId for incidentId mentioned in params\n\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `service-write` scope."
      parameters:
        - name: "IncidentId"
          in: "path"
          required: true
          description: "Required"
          schema:
            type: "string"
        - name: "communicationCardId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "string"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Communication Card"
      x-speakeasy-group: "incidents.communicationCards"
      x-speakeasy-name-override: "delete"
    put:
      operationId: "CommunicationCards_updateCommunicationCard"
      summary: "Update Communication Card"
      parameters:
        - name: "IncidentId"
          in: "path"
          required: true
          description: "Required"
          schema:
            type: "string"
        - name: "communicationCardId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Incidents.CommunicationCards.CommunicationCardResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Communication Card"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Incidents.CommunicationCards.UpdateCommunicationCardRequest"}
      x-speakeasy-group: "incidents.communicationCards"
      x-speakeasy-name-override: "update"
  "/v3/incidents/{IncidentId}/runbooks":
    post:
      operationId: "Runbooks_attachRunbooks"
      summary: "Attach Runbooks"
      parameters:
        - name: "IncidentId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V3.Incidents.Runbooks.RunbookResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Runbooks"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Incidents.Runbooks.AttachRunbooksRequest"}
      x-speakeasy-group: "runbooks"
      x-speakeasy-name-override: "attach"
  "/v3/incidents/{IncidentId}/tags":
    put:
      operationId: "Tags_updateTag"
      summary: "Update Tag"
      parameters:
        - name: "IncidentId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Incidents.Tags.IncidentForTagsResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Tags"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Incidents.Tags.UpdateTagRequest"}
      x-speakeasy-group: "incidents.tags"
      x-speakeasy-name-override: "update"
    patch:
      operationId: "Tags_appendTag"
      summary: "Append Tag"
      parameters:
        - name: "IncidentId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Incidents.Tags.IncidentForTagsResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Tags"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Incidents.Tags.AppendTagRequest"}
      x-speakeasy-group: "incidents.tags"
      x-speakeasy-name-override: "append"
  "/v3/incidents/{IncidentId}/warroom":
    post:
      operationId: "Notes_createNotes"
      summary: "Create Notes"
      parameters:
        - name: "IncidentId"
          in: "path"
          required: true
          description: "Required"
          schema:
            type: "string"
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "body"
                properties:
                  "body":
                    type: "object"
                    required:
                      - "data"
                    properties:
                      "data": {"$ref": "#/components/schemas/V3.Incidents.Notes.NoteResponse"}
                    description: "The body type of the operation request or response."
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Notes"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Incidents.Notes.CreateNoteRequest"}
      x-speakeasy-group: "incidents.notes"
      x-speakeasy-name-override: "create"
    get:
      operationId: "Notes_getAllNotes"
      summary: "Get All Notes"
      description: "*   This endpoint is used to get all the note details of incidentID mentioned params.\n*   Requires `access_token` as a `Bearer {{token}}` in the `Authorization` header."
      parameters:
        - name: "IncidentId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V3.Incidents.Notes.NoteResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Notes"
      x-speakeasy-group: "incidents.notes"
      x-speakeasy-name-override: "list"
  "/v3/incidents/{IncidentId}/warroom/{NoteId}":
    delete:
      operationId: "Notes_deleteNote"
      summary: "Delete Note"
      description: "delete note from incidentId mentioned in params.\n\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `service-write` scope."
      parameters:
        - name: "IncidentId"
          in: "path"
          required: true
          description: "Required"
          schema:
            type: "string"
        - name: "NoteId"
          in: "path"
          required: true
          description: "Required"
          schema:
            type: "string"
        - name: "authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Notes"
      x-speakeasy-group: "incidents.notes"
      x-speakeasy-name-override: "delete"
    put:
      operationId: "Notes_updateNote"
      summary: "Update Note"
      description: "This API can be used to update a Note or a Resolution reason associated with an incident"
      parameters:
        - name: "IncidentId"
          in: "path"
          required: true
          description: "Required"
          schema:
            type: "string"
        - name: "NoteId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Incidents.Notes.NoteResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Notes"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Incidents.Notes.UpdateNoteRequest"}
      x-speakeasy-group: "incidents.notes"
      x-speakeasy-name-override: "update"
  "/v3/incidents/{incidentID}":
    get:
      operationId: "Incidents_getIncidentById"
      summary: "Get Incident by ID"
      description: "- This endpoint is used to get the incident details by ID.\n- Requires `access_token` as a `Bearer {{token}}` in the `Authorization` header."
      parameters:
        - name: "incidentID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Incidents.IncidentResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents"
      x-speakeasy-name-override: "getById"
  "/v3/incidents/{incidentID}/acknowledge":
    post:
      operationId: "Incidents_acknowledgeIncident"
      summary: "Acknowledge Incident"
      description: "- This endpoint is used to acknowledge the incident by ID.\n- Requires `access_token` as a `Bearer {{token}}` in the `Authorization` header."
      parameters:
        - name: "incidentID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "string"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents"
      x-speakeasy-name-override: "acknowledge"
  "/v3/incidents/{incidentID}/actions/circleci/rebuild/{buildNumber}":
    post:
      operationId: "IncidentActions_rebuildAProjectInCircleci"
      summary: "Rebuild a Project In CircleCI"
      parameters:
        - name: "incidentID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "buildNumber"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Incidents.IncidentActions.CircleCIRebuildResponse"}
                  "meta":
                    type: "object"
                    properties:
                      "status_code":
                        type: "integer"
                    required:
                      - "status_code"
                required:
                  - "data"
        "400":
          description: "Represents a CircleCI error response for a 400 status code."
          content:
            "application/json":
              schema:
                anyOf:
                  - type: "object"
                    properties:
                      "meta": {"$ref": "#/components/schemas/V3.Incidents.IncidentActions.CircleCIErrorMeta"}
                    required:
                      - "meta"
                  - type: "object"
                    properties:
                      "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                    required:
                      - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Incident Actions"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Incidents.IncidentActions.RebuildCircleCIProjectRequest"}
      x-speakeasy-group: "incidents.actions"
      x-speakeasy-name-override: "rebuildCircleciProject"
  "/v3/incidents/{incidentID}/actions/jira/new/jira-cloud":
    post:
      operationId: "IncidentActions_createATicketOnJiraCloud"
      summary: "Create a Ticket on Jira Cloud"
      parameters:
        - name: "incidentID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "string"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Incident Actions"
      x-speakeasy-group: "incidents.actions.jira"
      x-speakeasy-name-override: "createTicket"
  "/v3/incidents/{incidentID}/actions/jira/new/jira-server":
    post:
      operationId: "IncidentActions_createATicketOnJiraServer"
      summary: "Create a Ticket on Jira Server"
      parameters:
        - name: "incidentID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "string"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Incident Actions"
      x-speakeasy-group: "incidents.incidentActions"
      x-speakeasy-name-override: "createJiraTicket"
  "/v3/incidents/{incidentID}/actions/servicenow/new":
    post:
      operationId: "IncidentActions_createAnIncidentInServicenow"
      summary: "Create an Incident in ServiceNow"
      parameters:
        - name: "incidentID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Incident Actions"
      x-speakeasy-group: "incidents.actions.serviceNow"
      x-speakeasy-name-override: "createIncident"
  "/v3/incidents/{incidentID}/actions/webhook/{eventWebhookID}":
    post:
      operationId: "IncidentActions_triggerAWebhookManually"
      summary: "Trigger a Webhook Manually"
      parameters:
        - name: "incidentID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "eventWebhookID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Incidents.IncidentActions.WebhookActionResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Incident Actions"
      x-speakeasy-group: "incidents.actions.webhook"
      x-speakeasy-name-override: "trigger"
  "/v3/incidents/{incidentID}/additional-responders":
    get:
      operationId: "AdditionalResponders_getAdditionalResponders"
      summary: "Get Additional Responders"
      description: "- This endpoint is used to get the incident additional responders.\n\n- Requires `access_token` as a `Bearer {{token}}` in the `Authorization` header."
      parameters:
        - name: "incidentID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Incidents.AdditionalResponders.AdditionalResponderResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Additional Responders"
      x-speakeasy-group: "incidents.additionalResponders"
      x-speakeasy-name-override: "list"
    put:
      operationId: "AdditionalResponders_addAdditionalResponders"
      summary: "Add Additional Responders"
      description: "- This endpoint is used to add additional responders to an Incident.\n\n- Requires `access_token` as a `Bearer {{token}}` in the `Authorization` header."
      parameters:
        - name: "incidentID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Incidents.AdditionalResponders.AdditionalResponderResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Additional Responders"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Incidents.AdditionalResponders.AddAdditionalRespondersRequest"}
      x-speakeasy-group: "incidents.additionalResponders"
      x-speakeasy-name-override: "add"
  "/v3/incidents/{incidentID}/additional-responders/{responderID}":
    delete:
      operationId: "AdditionalResponders_removeAdditionalResponders"
      summary: "Remove Additional Responders"
      description: "- This endpoint is used to remove an additional responder from an Incident.\n\n- Requires `access_token` as a `Bearer {{token}}` in the `Authorization` header."
      parameters:
        - name: "incidentID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "responderID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Additional Responders"
      x-speakeasy-group: "additionalResponders"
      x-speakeasy-name-override: "remove"
  "/v3/incidents/{incidentID}/events":
    get:
      operationId: "Incidents_getIncidentEvents"
      summary: "Get Incident Events"
      description: "- This endpoint is used to get all the deduped incident events details by either ID or number.\n- Requires `access_token` as a `Bearer {{token}}` in the `Authorization` header.\n\nQuery Params:\n```\noffset - non zero value\nlimit - non zero value, maximum is 10\nsort - sort it by either asc or desc\ndeduped - if set to true, it will return only the deduplicated events. if set to false, it will return only the non-deduplicated event, otherwise it will return all the events\n```"
      parameters:
        - name: "incidentID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "offset"
          in: "query"
          required: true
          description: "non zero value"
          schema:
            type: "string"
        - name: "limit"
          in: "query"
          required: true
          description: "non zero value, maximum is 10"
          schema:
            type: "string"
        - name: "sort"
          in: "query"
          required: true
          description: "sort it by either asc or desc"
          schema:
            type: "string"
        - name: "deduped"
          in: "query"
          required: true
          description: "if set to true, it will return only the deduped events.\n\nif set to false, it will return only the non-deduped event.\n\notherwise it will return all the events"
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "data":
                    type: "object"
                    properties:
                      "events":
                        type: "array"
                        items: {"$ref": "#/components/schemas/V3.Incidents.IncidentEventResponse"}
                    required:
                      - "events"
                  "meta":
                    type: "object"
                    properties:
                      "total":
                        type: "integer"
                      "count":
                        type: "integer"
                      "current":
                        type: "string"
                      "next":
                        type: "string"
                    required:
                      - "total"
                      - "count"
                      - "current"
                required:
                  - "data"
                  - "meta"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents"
      x-speakeasy-group: "incidents.events"
      x-speakeasy-name-override: "get"
  "/v3/incidents/{incidentID}/mark-as-non-transient":
    put:
      operationId: "Apta_markAsNotTransient"
      summary: "Mark as Not Transient"
      parameters:
        - name: "incidentID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Incidents.Apta.MessageResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Auto Pause Transient Alerts (APTA)"
      x-speakeasy-group: "incidents.autoPauseTransientAlerts"
      x-speakeasy-name-override: "markAsNotTransient"
  "/v3/incidents/{incidentID}/mark-as-transient":
    put:
      operationId: "Apta_markAsTransient"
      summary: "Mark as Transient"
      parameters:
        - name: "incidentID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Incidents.Apta.MessageResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Auto Pause Transient Alerts (APTA)"
      x-speakeasy-group: "incidents.autoPauseTransientAlerts"
      x-speakeasy-name-override: "markAsTransient"
  "/v3/incidents/{incidentID}/mark-slo-incident-false-postive/{value}":
    patch:
      operationId: "Incidents_markIncidentSloFalsePositive"
      summary: "Mark Incident SLO False Positive"
      description: "- This endpoint is used to mark incident slo false positive.\n\n- Requires `access_token` as a `Bearer {{token}}` in the `Authorization` header."
      parameters:
        - name: "incidentID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "value"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents"
      x-speakeasy-name-override: "markSloFalsePositive"
  "/v3/incidents/{incidentID}/postmortem":
    delete:
      operationId: "Postmortems_deletePostmortemByIncident"
      summary: "Delete Postmortem By Incident"
      description: "*   This endpoint is used to delete a postmortem by incident.\n*   Requires `access_token` as a `Bearer {{token}}` in the `Authorization` header."
      parameters:
        - name: "incidentID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Incidents.Postmortems.PostmortemResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Postmortems"
      x-speakeasy-group: "incidents.postmortems"
      x-speakeasy-name-override: "remove"
    get:
      operationId: "Postmortems_getPostmortemByIncident"
      summary: "Get Postmortem By Incident"
      description: "*   This endpoint is used to get a postmortem by incident.\n*   Requires `access_token` as a `Bearer {{token}}` in the `Authorization` header."
      parameters:
        - name: "incidentID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Incidents.Postmortems.PostmortemResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Postmortems"
      x-speakeasy-group: "incidents.postmortems"
      x-speakeasy-name-override: "getByIncident"
    post:
      operationId: "Postmortems_createPostmortem"
      summary: "Create Postmortem"
      description: "*   This endpoint is used to create a postmortem.\n*   Requires `access_token` as a `Bearer {{token}}` in the `Authorization` header."
      parameters:
        - name: "incidentID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "body"
                properties:
                  "body":
                    type: "object"
                    required:
                      - "data"
                    properties:
                      "data": {"$ref": "#/components/schemas/V3.Incidents.Postmortems.PostmortemResponse"}
                    description: "The body type of the operation request or response."
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Postmortems"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Incidents.Postmortems.CreatePostmortemRequest"}
      x-speakeasy-group: "postmortems"
      x-speakeasy-name-override: "create"
    put:
      operationId: "Postmortems_updatePostmortemByIncident"
      summary: "Update Postmortem By Incident"
      description: "- This endpoint is used to update a postmortem by incident.\n- Requires `access_token` as a `Bearer {{token}}` in the `Authorization` header."
      parameters:
        - name: "incidentID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Incidents.Postmortems.PostmortemResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Postmortems"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Incidents.Postmortems.UpdatePostmortemRequest"}
      x-speakeasy-group: "incidents.postmortems"
      x-speakeasy-name-override: "updateByIncident"
  "/v3/incidents/{incidentID}/priority":
    patch:
      operationId: "Incidents_incidentPriorityUpdate"
      summary: "Incident Priority Update"
      description: "- This endpoint is used to update incident priority by ID.\n\n- Requires `access_token` as a `Bearer {{token}}` in the `Authorization` header."
      parameters:
        - name: "incidentID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Incidents.IncidentPriorityUpdateResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Incidents.IncidentPriorityUpdateRequest"}
      x-speakeasy-name-override: "updatePriority"
  "/v3/incidents/{incidentID}/reassign":
    post:
      operationId: "Incidents_reassignIncident"
      summary: "Reassign Incident"
      description: "- This endpoint is used to reassign the unresolved incident to any user or escalation policy or squads by ID.\n- Requires `access_token` as a `Bearer {{token}}` in the `Authorization` header.\n- `type` can be either `user` or `escalationpolicy` or `squad`"
      parameters:
        - name: "incidentID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "string"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Incidents.ReassignIncidentRequest"}
      x-speakeasy-name-override: "reassign"
  "/v3/incidents/{incidentID}/resolve":
    post:
      operationId: "Incidents_resolveIncident"
      summary: "Resolve Incident"
      description: "- This endpoint is used to resolve the incident by ID.\n\n- Requires `access_token` as a `Bearer {{token}}` in the `Authorization` header.\n\n- Resolution Reason is mandatory / optional based on the organization feature settings (Only for Premium and Enterprise Orgs) [Read more](https://support.squadcast.com/incidents-page/incidents-details#understanding-resolution-reason)"
      parameters:
        - name: "incidentID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "string"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Incidents.ResolveIncidentRequest"}
      x-speakeasy-name-override: "resolve"
  "/v3/incidents/{incidentID}/snooze":
    put:
      operationId: "SnoozeNotifications_snoozeIncidentNotifications"
      summary: "Snooze Incident Notifications"
      parameters:
        - name: "incidentID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Incidents.SnoozeNotifications.SnoozeIncidentResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Snooze Notifications"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Incidents.SnoozeNotifications.SnoozeIncidentRequest"}
      x-speakeasy-group: "snoozeNotifications"
      x-speakeasy-name-override: "snooze"
  "/v3/incidents/{incidentID}/unsnooze":
    put:
      operationId: "SnoozeNotifications_unsnoozeIncidentNotifications"
      summary: "Unsnooze Incident Notifications"
      parameters:
        - name: "incidentID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Incidents.SnoozeNotifications.UnsnoozeIncidentResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents/Snooze Notifications"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Incidents.SnoozeNotifications.UnsnoozeIncidentRequest"}
      x-speakeasy-group: "incidents.snoozeNotifications"
      x-speakeasy-name-override: "unsnooze"
  "/v3/refresh-token":
    get:
      operationId: "Users_getAllTokens"
      summary: "Get All Tokens"
      description: "Returns generated api tokens of all the users of the organization.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `read` scope."
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V3.Users.ApiTokenResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Users/Api Token"
      x-speakeasy-group: "users.apiTokens"
      x-speakeasy-name-override: "list"
    post:
      operationId: "Users_createToken"
      summary: "Create Token"
      description: "Generates refresh token for a user of the organization. Returns the refresh token object in response.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Users.ApiTokenResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Users/Api Token"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: "object"
              properties:
                "user_id":
                  type: "string"
              required:
                - "user_id"
      x-speakeasy-group: "users.apiTokens"
      x-speakeasy-name-override: "create"
  "/v3/refresh-token/{refreshTokenID}":
    delete:
      operationId: "Users_removeToken"
      summary: "Remove Token"
      description: "Removes refresh token of a user from organization. Upon success the refresh token of a user will be removed from the organization.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      parameters:
        - name: "refreshTokenID"
          in: "path"
          required: true
          description: "(Required) refresh token id"
          schema:
            type: "string"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Users/Api Token"
      x-speakeasy-group: "users.apiToken"
      x-speakeasy-name-override: "remove"
  "/v3/requests/status":
    post:
      operationId: "Incidents_getIncidentsStatusByRequestids"
      summary: "Get Incidents Status By RequestIDs"
      description: "- This endpoint is used to get the status of incidents given list of request_ids\n- Requires `access_token` as a `Bearer {{token}}` in the `Authorization` header.\n\n# Response\n- The response contains the mapping from `request_ids` to incident status.\n- `status` field can be one of - `suppressed`, `discarded`, `deduplicated`, `created`, `error`.\n-  status is `error` if the `request_id` is invalid. Both `incident_id` and `event_id` field won't be present if `status` is `error`\n-  status is `suppressed` if the incident was suppressed due to suppression rules.\n-  status is `deduplicated` if the incident was deduplicated due to deduplication rules.\n-  status is `discarded` if the incident was discarded due to some deduplication rule. `incident_id` field won't be present if `status` is `discarded`.\n-  otherwise, the status is `created`"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "requests_status":
                    type: "object"
                    unevaluatedProperties: {"$ref": "#/components/schemas/V3.Incidents.IndividualRequestStatusResponse"}
                  "meta":
                    type: "object"
                    properties:
                      "error_count":
                        type: "integer"
                      "success_count":
                        type: "integer"
                    required:
                      - "error_count"
                      - "success_count"
                required:
                  - "requests_status"
                  - "meta"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Incidents"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Incidents.IngestionStatusRequest"}
      x-speakeasy-name-override: "getStatusByRequestIds"
  "/v3/runbooks":
    get:
      operationId: "Runbooks_getAllRunbooksByTeam"
      summary: "Get All Runbooks By Team"
      description: "Returns all the runbooks of the team.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `read` scope."
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V3.Runbooks.RunbookResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Runbooks"
      x-speakeasy-name-override: "getAllByTeam"
    post:
      operationId: "Runbooks_createRunbook"
      summary: "Create Runbook"
      description: "Add runbook to the team. Returns the runbook object in response.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Runbooks.RunbookResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Runbooks"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Runbooks.CreateRunbookRequest"}
      x-speakeasy-name-override: "create"
  "/v3/runbooks/{runbookID}":
    delete:
      operationId: "Runbooks_removeRunbook"
      summary: "Remove Runbook"
      description: "Remove runbook from team.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      parameters:
        - name: "runbookID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Runbooks"
      x-speakeasy-name-override: "delete"
    get:
      operationId: "Runbooks_getRunbookById"
      summary: "Get Runbook By ID"
      description: "Returns a runbook details of the given `runbookID` in the request param.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `read` scope."
      parameters:
        - name: "runbookID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Runbooks.RunbookResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Runbooks"
      x-speakeasy-name-override: "getById"
    put:
      operationId: "Runbooks_updateRunbook"
      summary: "Update Runbook"
      description: "Update runbook details.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      parameters:
        - name: "runbookID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Runbooks.RunbookResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Runbooks"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Runbooks.UpdateRunbookRequest"}
      x-speakeasy-name-override: "update"
  "/v3/services":
    get:
      operationId: "Services_getServices"
      summary: "Get All Services"
      parameters:
        - name: "owner_id"
          in: "query"
          required: false
          schema:
            type: "string"
          explode: false
        - name: "entity_owner"
          in: "query"
          required: false
          schema:
            type: "string"
          explode: false
        - name: "name"
          in: "query"
          required: false
          schema:
            type: "string"
          explode: false
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V3.Services.ServiceResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services"
      x-speakeasy-name-override: "getAll"
    post:
      operationId: "Services_createService"
      summary: "Create Service"
      parameters:
        - name: "owner_id"
          in: "query"
          required: true
          schema:
            type: "string"
          explode: false
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "body"
                properties:
                  "body":
                    type: "object"
                    required:
                      - "data"
                    properties:
                      "data": {"$ref": "#/components/schemas/V3.Services.ServiceResponse"}
                    description: "The body type of the operation request or response."
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Services.CreateServiceRequest"}
      x-speakeasy-name-override: "create"
  "/v3/services/by-name":
    get:
      operationId: "Services_getServicesByName"
      summary: "Get Services By Name"
      parameters:
        - name: "name"
          in: "query"
          required: true
          schema:
            type: "string"
          explode: false
        - name: "owner_id"
          in: "query"
          required: true
          schema:
            type: "string"
          explode: false
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Services.ServiceResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services"
      x-speakeasy-name-override: "getByName"
  "/v3/services/{serviceID}":
    get:
      operationId: "Services_getServiceById"
      summary: "Get Service By ID"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Services.ServiceResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services"
      x-speakeasy-name-override: "getById"
    put:
      operationId: "Services_updateService"
      summary: "Update Service"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Services.ServiceResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Services.UpdateServiceRequest"}
      x-speakeasy-name-override: "update"
    delete:
      operationId: "Services_deleteService"
      summary: "Delete Service"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services"
      x-speakeasy-name-override: "delete"
  "/v3/services/{serviceID}/apta-config":
    put:
      operationId: "Services_createOrUpdateAPTAConfig"
      summary: "Auto Pause Transient Alerts (APTA)"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "data":
                    type: "object"
                    properties:
                      "msg":
                        type: "string"
                    required:
                      - "msg"
                required:
                  - "data"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Services.APTAConfigRequest"}
      x-speakeasy-name-override: "updateAptaConfig"
  "/v3/services/{serviceID}/config":
    get:
      operationId: "Overlay_getOptinForKeyBasedDeduplicationForAService"
      summary: "Get Opt-in for Key Based Deduplication for a service"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "object"
                    properties:
                      "dedup_key_enabled":
                        type: "boolean"
                    required:
                      - "dedup_key_enabled"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services/Overlay"
      x-speakeasy-group: "services.overlay"
      x-speakeasy-name-override: "getOptinForKeyBasedDeduplication"
    patch:
      operationId: "Overlay_optinForKeyBasedDeduplicationForAService"
      summary: "Opt-in for Key Based Deduplication for a service"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services/Overlay"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Services.Overlay.OptInForKeyBasedDeduplicationRequest"}
      x-speakeasy-group: "services.overlay"
      x-speakeasy-name-override: "optinForKeyBasedDeduplication"
  "/v3/services/{serviceID}/deduplication-rules":
    get:
      operationId: "DeduplicationRules_getDeduplicationRules"
      summary: "Get Deduplication Rules"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "data":
                    type: "object"
                    properties:
                      "rules":
                        type: "array"
                        items: {"$ref": "#/components/schemas/V3.Services.DeduplicationRules.DeduplicationRuleResponse"}
                    required:
                      - "rules"
                required:
                  - "data"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services/Deduplication Rules"
      x-speakeasy-group: "services.deduplicationRules"
      x-speakeasy-name-override: "get"
    post:
      operationId: "DeduplicationRules_createOrUpdateDeduplicationRules"
      summary: "Create or Update Deduplication Rules"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "data":
                    type: "object"
                    properties:
                      "rules":
                        type: "array"
                        items: {"$ref": "#/components/schemas/V3.Services.DeduplicationRules.DeduplicationRuleResponse"}
                    required:
                      - "rules"
                required:
                  - "data"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services/Deduplication Rules"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Services.DeduplicationRules.CreateDeduplicationRulesRequest"}
      x-speakeasy-group: "services.deduplicationRules"
      x-speakeasy-name-override: "createOrUpdate"
  "/v3/services/{serviceID}/dependencies":
    post:
      operationId: "Dependencies_createOrUpdateDependencies"
      summary: "Create or Update Dependencies"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "data":
                    type: "object"
                    properties:
                      "ok":
                        type: "boolean"
                    required:
                      - "ok"
                required:
                  - "data"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services/Dependencies"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Services.Dependencies.CreateOrUpdateDependenciesRequest"}
      x-speakeasy-group: "services.dependencies"
      x-speakeasy-name-override: "createOrUpdate"
  "/v3/services/{serviceID}/extensions":
    put:
      operationId: "Extensions_updateSlackExtension"
      summary: "Update Slack Extension"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Services.Extensions.SlackExtensionResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services/Extensions"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Services.Extensions.UpdateSlackExtensionRequest"}
      x-speakeasy-group: "services.extensions"
      x-speakeasy-name-override: "update"
  "/v3/services/{serviceID}/iag-config":
    put:
      operationId: "Services_createOrUpdateIAGConfig"
      summary: "Intelligent Alert Grouping (IAG)"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "data":
                    type: "object"
                    properties:
                      "msg":
                        type: "string"
                    required:
                      - "msg"
                required:
                  - "data"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Services.IAGConfigRequest"}
      x-speakeasy-name-override: "createOrUpdateIagConfig"
  "/v3/services/{serviceID}/maintenance":
    get:
      operationId: "MaintenanceMode_getMaintenanceMode"
      summary: "Get Maintenance Mode"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V3.Services.MaintenanceMode.MaintenanceModeResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services/Maintenance Mode"
      x-speakeasy-group: "services.maintenanceMode"
      x-speakeasy-name-override: "get"
    post:
      operationId: "MaintenanceMode_createOrUpdateMaintenanceMode"
      summary: "Create or Update Maintenance Mode"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "string"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services/Maintenance Mode"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Services.MaintenanceMode.CreateOrUpdateMaintenanceModeRequest"}
      x-speakeasy-group: "services.maintenance"
      x-speakeasy-name-override: "createOrUpdate"
  "/v3/services/{serviceID}/notification-delay-config":
    put:
      operationId: "Services_delayedNotificationConfig"
      summary: "Delayed Notification Config"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Services.ServiceResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Services.NotificationDelayConfigRequest"}
      x-speakeasy-name-override: "updateNotificationDelayConfig"
  "/v3/services/{serviceID}/overlays/custom-content":
    get:
      operationId: "Overlay_getAllCustomContentTemplateOverlayByService"
      summary: "Get All Custom Content Template Overlay by Service"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "authorization"
          in: "header"
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V3.Services.Overlay.CustomContentOverlayResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services/Overlay/Custom Content Templates"
      x-speakeasy-group: "services.overlay.customContentTemplates"
      x-speakeasy-name-override: "getAll"
  "/v3/services/{serviceID}/overlays/custom-content/render":
    post:
      operationId: "Overlay_renderCustomContentOverlay"
      summary: "Render Custom Content Overlay"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "string"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services/Overlay/Custom Content Templates"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Services.Overlay.RenderCustomContentOverlayRequest"}
      x-speakeasy-group: "services.overlays.customContentTemplates"
      x-speakeasy-name-override: "render"
  "/v3/services/{serviceID}/overlays/custom-content/{alertSource}":
    delete:
      operationId: "Overlay_deleteNotificationTemplateOverlay"
      summary: "Delete Notification Template Overlay"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "alertSource"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "authorization"
          in: "header"
          required: false
          schema:
            type: "string"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services/Overlay/Custom Content Templates"
      x-speakeasy-group: "services.overlays.customContentTemplates"
      x-speakeasy-name-override: "delete"
    get:
      operationId: "Overlay_getCustomContentTemplateOverlay"
      summary: "Get Custom Content Template Overlay"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "alertSource"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "authorization"
          in: "header"
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Services.Overlay.CustomContentOverlayResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services/Overlay/Custom Content Templates"
      x-speakeasy-group: "services.overlays.customContentTemplates"
      x-speakeasy-name-override: "get"
    put:
      operationId: "Overlay_createOrUpdateNotificationTemplateOverlay"
      summary: "Create or Update Notification Template Overlay"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "alertSource"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Services.Overlay.CustomContentOverlayResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services/Overlay/Custom Content Templates"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Services.Overlay.UpdateCustomContentTemplateOverlayRequest"}
      x-speakeasy-group: "services.overlay.customContentTemplates"
      x-speakeasy-name-override: "createOrUpdate"
  "/v3/services/{serviceID}/overlays/dedup-key":
    get:
      operationId: "Overlay_getAllDedupKeyOverlayByService"
      summary: "Get All Dedup Key Overlay by Service"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "authorization"
          in: "header"
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V3.Services.Overlay.OverlayResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services/Overlay/Dedup Key Overlay"
      x-speakeasy-group: "dedupKeys"
      x-speakeasy-name-override: "listByService"
  "/v3/services/{serviceID}/overlays/dedup-key/render":
    post:
      operationId: "Overlay_renderDedupKeyTemplate"
      summary: "Render Dedup Key template"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "string"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services/Overlay/Dedup Key Overlay"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Services.Overlay.RenderDedupKeyTemplateRequest"}
      x-speakeasy-group: "services.overlays"
      x-speakeasy-name-override: "renderDedupKey"
  "/v3/services/{serviceID}/overlays/dedup-key/{alertSource}":
    delete:
      operationId: "Overlay_deleteDedupKeyOverlay"
      summary: "Delete Dedup Key Overlay"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "alertSource"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "authorization"
          in: "header"
          required: false
          schema:
            type: "string"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services/Overlay/Dedup Key Overlay"
      x-speakeasy-group: "dedupKeys"
      x-speakeasy-name-override: "delete"
    get:
      operationId: "Overlay_getDedupKeyOverlayForAlertSource"
      summary: "Get Dedup Key Overlay for Alert Source"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "alertSource"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "authorization"
          in: "header"
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Services.Overlay.OverlayResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services/Overlay/Dedup Key Overlay"
      x-speakeasy-group: "overlays.dedupKey"
      x-speakeasy-name-override: "getForAlertSource"
    put:
      operationId: "Overlay_updateDedupKeyOverlay"
      summary: "Update Dedup Key Overlay"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "alertSource"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                anyOf:
                  - type: "object"
                    required:
                      - "data"
                    properties:
                      "data": {"$ref": "#/components/schemas/V3.Services.Overlay.OverlayResponse"}
                  - type: "object"
                    properties:
                      "data": {"$ref": "#/components/schemas/V3.Services.Overlay.OverlayResponse"}
                    required:
                      - "data"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services/Overlay/Dedup Key Overlay"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Services.Overlay.UpdateDedupKeyOverlayRequest"}
      x-speakeasy-group: "services.overlays.dedupKey"
      x-speakeasy-name-override: "update"
  "/v3/services/{serviceID}/routing-rules":
    get:
      operationId: "RoutingRules_getRoutingRules"
      summary: "Get Routing Rules"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "data":
                    type: "object"
                    properties:
                      "rules":
                        type: "array"
                        items: {"$ref": "#/components/schemas/V3.Services.RoutingRules.RoutingRuleResponse"}
                    required:
                      - "rules"
                required:
                  - "data"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services/Routing Rules"
      x-speakeasy-group: "services.routingRules"
      x-speakeasy-name-override: "get"
    post:
      operationId: "RoutingRules_createOrUpdateRoutingRules"
      summary: "Create or Update Routing Rules"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "data":
                    type: "object"
                    properties:
                      "rules":
                        type: "array"
                        items: {"$ref": "#/components/schemas/V3.Services.RoutingRules.RoutingRuleResponse"}
                    required:
                      - "rules"
                required:
                  - "data"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services/Routing Rules"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Services.RoutingRules.CreateOrUpdateRoutingRulesRequest"}
      x-speakeasy-group: "services.routingRules"
      x-speakeasy-name-override: "createOrUpdate"
  "/v3/services/{serviceID}/suppression-rules":
    get:
      operationId: "SuppressionRules_getSuppressionRules"
      summary: "Get Suppression Rules"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "data":
                    type: "object"
                    properties:
                      "rules":
                        type: "array"
                        items: {"$ref": "#/components/schemas/V3.Services.SuppressionRules.SuppressionRuleResponse"}
                    required:
                      - "rules"
                required:
                  - "data"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services/Suppression Rules"
      x-speakeasy-group: "services.suppressionRules"
      x-speakeasy-name-override: "get"
    post:
      operationId: "SuppressionRules_createOrUpdateSuppressionRules"
      summary: "Create or Update Suppression Rules"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Services.SuppressionRules.SuppressionRulesContainerResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services/Suppression Rules"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Services.SuppressionRules.CreateOrUpdateSuppressionRulesRequest"}
      x-speakeasy-group: "services.suppressionRules"
      x-speakeasy-name-override: "createOrUpdate"
  "/v3/services/{serviceID}/tagging-rules":
    get:
      operationId: "TaggingRules_getTaggingRules"
      summary: "Get Tagging Rules"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "data":
                    type: "object"
                    properties:
                      "rules":
                        type: "array"
                        items: {"$ref": "#/components/schemas/V3.Services.TaggingRules.TaggingRuleResponse"}
                    required:
                      - "rules"
                required:
                  - "data"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services/Tagging Rules"
      x-speakeasy-group: "services.taggingRules"
      x-speakeasy-name-override: "get"
    post:
      operationId: "TaggingRules_createOrUpdateTaggingRules"
      summary: "Create or Update Tagging Rules"
      parameters:
        - name: "serviceID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "data":
                    type: "object"
                    properties:
                      "rules":
                        type: "array"
                        items: {"$ref": "#/components/schemas/V3.Services.TaggingRules.TaggingRuleResponse"}
                    required:
                      - "rules"
                required:
                  - "data"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Services/Tagging Rules"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Services.TaggingRules.CreateOrUpdateTaggingRulesRequest"}
      x-speakeasy-group: "services.taggingRules"
      x-speakeasy-name-override: "createOrUpdate"
  "/v3/slo":
    get:
      operationId: "SLO_getAllSLOs"
      summary: "Get All SLOs"
      description: "Returns all the SLOs of the passed owner_id in the params.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `read` scope."
      parameters:
        - name: "owner_id"
          in: "query"
          required: true
          schema:
            type: "string"
        - name: "offset"
          in: "query"
          required: true
          schema:
            type: "string"
        - name: "limit"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "data":
                    type: "object"
                    properties:
                      "meta":
                        type: "object"
                        properties:
                          "total":
                            type: "integer"
                          "offset":
                            type: "integer"
                          "limit":
                            type: "integer"
                        required:
                          - "total"
                          - "offset"
                          - "limit"
                      "slos":
                        type: "array"
                        items: {"$ref": "#/components/schemas/V3.SLO.SLO"}
                    required:
                      - "meta"
                      - "slos"
                required:
                  - "data"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "SLOs"
      x-speakeasy-group: "slos"
      x-speakeasy-name-override: "listAll"
    post:
      operationId: "SLO_createSLO"
      summary: "Create SLO"
      description: "- This API will create SLO.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "data":
                    type: "object"
                    properties:
                      "slo": {"$ref": "#/components/schemas/V3.SLO.SLODetailedResponse"}
                    required:
                      - "slo"
                required:
                  - "data"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "SLOs"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.SLO.CreateSLORequest"}
      x-speakeasy-group: "slos"
      x-speakeasy-name-override: "create"
  "/v3/slo/{sloID}":
    put:
      operationId: "SLO_updateSLO"
      summary: "Update SLO"
      description: "- This API will update SLO.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      parameters:
        - name: "sloID"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "owner_id"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "data":
                    type: "object"
                    properties:
                      "slo": {"$ref": "#/components/schemas/V3.SLO.SLODetailedResponse"}
                    required:
                      - "slo"
                required:
                  - "data"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "SLOs"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.SLO.CreateSLORequest"}
      x-speakeasy-group: "slos"
      x-speakeasy-name-override: "update"
    delete:
      operationId: "SLO_removeSLO"
      summary: "Remove SLO"
      description: "Remove SLO from passed owner_id (team_id) in the params . Upon sccess the slo will be removed.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      parameters:
        - name: "sloID"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "owner_id"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.SLO.SLOResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "SLOs"
      x-speakeasy-group: "slos"
      x-speakeasy-name-override: "remove"
    get:
      operationId: "SLO_getSLOById"
      summary: "Get SLO By ID"
      description: "Returns a SLO details of the given `sloID` in the request param.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `read` scope."
      parameters:
        - name: "sloID"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "owner_id"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.SLO.SLOWithInsightsResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "SLOs"
      x-speakeasy-group: "slos"
      x-speakeasy-name-override: "get"
  "/v3/slo/{sloID}/incident":
    post:
      operationId: "SLO_markSLOAffected"
      summary: "Mark SLO Affected"
      description: "This endpoint is used for mark slo affected.\n\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      parameters:
        - name: "sloID"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "owner_id"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "data":
                    type: "object"
                    properties:
                      "slo_violating_incident": {"$ref": "#/components/schemas/V3.SLO.SLOViolatingIncidentResponse"}
                    required:
                      - "slo_violating_incident"
                required:
                  - "data"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "SLOs"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.SLO.MarkSLOAffectedRequest"}
      x-speakeasy-group: "slos"
      x-speakeasy-name-override: "markAffected"
  "/v3/slo/{sloID}/incident/{incidentID}/false-positive/{value}":
    patch:
      operationId: "SLO_markSLOFalsePositive"
      summary: "Mark SLO False Positive"
      description: "Value is a boolean (true or false)"
      parameters:
        - name: "sloID"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "incidentID"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "value"
          in: "path"
          required: true
          schema:
            type: "boolean"
        - name: "owner_id"
          in: "query"
          required: true
          schema:
            type: "string"
          explode: false
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "data":
                    type: "object"
                    properties:
                      "slo_violating_incident": {"$ref": "#/components/schemas/V3.SLO.SLOViolatingIncidentResponse"}
                    required:
                      - "slo_violating_incident"
                required:
                  - "data"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "SLOs"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: "object"
      x-speakeasy-group: "slos.falsePositive"
      x-speakeasy-name-override: "mark"
  "/v3/squads":
    get:
      operationId: "Squads_getSquadByTeam"
      summary: "Get Squad By team"
      description: "This endpoint is used to get the squads details by team.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `squad-read` scope."
      parameters:
        - name: "owner_id"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V3.Squads.SquadResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Squads/V3"
      x-speakeasy-group: "squads"
      x-speakeasy-name-override: "getByTeam"
    post:
      operationId: "Squads_createSquad"
      summary: "Create Squad"
      description: "This endpoint is used to create a new squad.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `squad-create` scope."
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Squads.SquadResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Squads/V3"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Squads.CreateSquadRequest"}
      x-speakeasy-group: "squadsV3"
      x-speakeasy-name-override: "create"
  "/v3/squads/{squadID}":
    delete:
      operationId: "Squads_deleteSquad"
      summary: "Delete Squad"
      description: "This endpoint is used to delete the squad. Squad should not be assigned to any incident or part of any escalation policy.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `squad-update` scope."
      parameters:
        - name: "squadID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Squads/V3"
      x-speakeasy-group: "squads"
      x-speakeasy-name-override: "delete"
    get:
      operationId: "Squads_getSquadById"
      summary: "Get Squad By ID"
      description: "This endpoint is used to get the squads details by id.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `squad-read` scope."
      parameters:
        - name: "squadID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Squads.SquadResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Squads/V3"
      x-speakeasy-group: "squads"
      x-speakeasy-name-override: "get"
    put:
      operationId: "Squads_updateSquad"
      summary: "Update Squad"
      description: "This endpoint is used to update the squads details.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `squad-update` scope."
      parameters:
        - name: "squadID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Squads.SquadResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Squads/V3"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Squads.UpdateSquadRequest"}
      x-speakeasy-group: "squads"
      x-speakeasy-name-override: "update"
  "/v3/teams":
    get:
      operationId: "Teams_getAllTeams"
      summary: "Get All Teams"
      description: "Returns all the teams of the organization.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `read` scope."
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V3.Teams.TeamResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Teams"
      x-speakeasy-name-override: "getAll"
    post:
      operationId: "Teams_createTeam"
      summary: "Create Team"
      description: "Add team to the organization. Returns the team object in response.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Teams.TeamResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Teams"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Teams.CreateTeamRequest"}
      x-speakeasy-name-override: "create"
  "/v3/teams/{teamId}":
    get:
      operationId: "Teams_getTeamById"
      summary: "Get Team By ID"
      description: "Returns a team details of the given `teamID` in the request param.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `read` scope."
      parameters:
        - name: "teamId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Teams.TeamResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Teams"
      x-speakeasy-name-override: "get"
    put:
      operationId: "Teams_updateTeam"
      summary: "Update Team"
      description: "Update organization team details.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      parameters:
        - name: "teamId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Teams.TeamResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Teams"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Teams.UpdateTeamRequest"}
      x-speakeasy-name-override: "update"
    delete:
      operationId: "Teams_removeTeam"
      summary: "Remove Team"
      description: "Remove team from the organization. Upon success, the team will be removed from the organization.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      parameters:
        - name: "teamId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Teams"
      x-speakeasy-name-override: "remove"
  "/v3/teams/{teamId}/members":
    get:
      operationId: "Teams_getAllTeamMembers"
      summary: "Get All Team Members"
      description: "Returns all the team members of the organization.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `read` scope."
      parameters:
        - name: "teamId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V3.Teams.TeamMemberResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Teams"
      x-speakeasy-group: "teams.members"
      x-speakeasy-name-override: "list"
    post:
      operationId: "Teams_addTeamMember"
      summary: "Add Team Member"
      description: "Add team member to the team.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      parameters:
        - name: "teamId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Teams.TeamMemberResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Teams"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Teams.AddTeamMemberRequest"}
      x-speakeasy-group: "teams.members"
      x-speakeasy-name-override: "add"
  "/v3/teams/{teamId}/members/bulk":
    post:
      operationId: "Teams_addBulkTeamMember"
      summary: "Add Bulk Team Member"
      description: "Add team member to the team.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      parameters:
        - name: "teamId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "data":
                    type: "object"
                    properties:
                      "team_id":
                        type: "string"
                      "members":
                        type: "array"
                        items:
                          type: "object"
                          properties:
                            "user_id":
                              type: "string"
                            "role_ids":
                              type: "array"
                              items:
                                type: "string"
                    required:
                      - "team_id"
                      - "members"
                required:
                  - "data"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Teams"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Teams.AddBulkTeamMemberRequest"}
      x-speakeasy-name-override: "addBulkMember"
  "/v3/teams/{teamId}/members/{memberId}":
    delete:
      operationId: "Teams_removeTeamMember"
      summary: "Remove Team Member"
      description: "Remove team member from the team. Upon success, the team member will be removed from the team.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      parameters:
        - name: "teamId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "memberId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Teams"
      x-speakeasy-name-override: "removeMember"
    patch:
      operationId: "Teams_updateTeamMember"
      summary: "Update Team Member"
      description: "Update team member.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      parameters:
        - name: "teamId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "memberId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Teams.TeamMemberResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Teams"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Teams.UpdateTeamMemberRequest"}
      x-speakeasy-name-override: "updateMember"
  "/v3/teams/{teamId}/roles":
    get:
      operationId: "Teams_getAllTeamRoles"
      summary: "Get All Team Roles"
      description: "Returns all the roles of the teamId mentioned in params.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `read` scope."
      parameters:
        - name: "teamId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V3.Teams.TeamRoleResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Teams"
      x-speakeasy-group: "teams.roles"
      x-speakeasy-name-override: "getAll"
    post:
      operationId: "Teams_createTeamRole"
      summary: "Create Team Role"
      description: "Add team's role to the team with given ability if not exists. Returns the role object in response.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      parameters:
        - name: "teamId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Teams.TeamBaseResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Teams"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Teams.CreateTeamRoleRequest"}
      x-speakeasy-group: "teams.roles"
      x-speakeasy-name-override: "create"
  "/v3/teams/{teamId}/roles/{roleId}":
    delete:
      operationId: "Teams_removeTeamRole"
      summary: "Remove Team Role"
      description: "Remove team's role from the team. Upon success, the team's role will be removed from the team.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      parameters:
        - name: "teamId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "roleId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Teams"
      x-speakeasy-name-override: "removeRole"
    put:
      operationId: "Teams_updateTeamRole"
      summary: "Update Team Role"
      description: "Update team's role abilities and name.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      parameters:
        - name: "teamId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "roleId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Teams.TeamBaseResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Teams"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Teams.UpdateTeamRoleRequest"}
      x-speakeasy-group: "teams.roles"
      x-speakeasy-name-override: "update"
  "/v3/users":
    get:
      operationId: "Users_getAllUsers"
      summary: "Get All Users"
      description: "Returns all the users of the organization.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `read` scope."
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V3.Users.UserResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Users"
      x-speakeasy-name-override: "getAll"
    post:
      operationId: "Users_addUser"
      summary: "Add User"
      description: "Add user to the organization with given role if not exists. Returns the user object in response.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Users.UserResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Users"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Users.AddUserRequest"}
      x-speakeasy-name-override: "add"
  "/v3/users/abilities":
    put:
      operationId: "Users_updateOrgLevelPermissions"
      summary: "Update Org Level Permissions"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "string"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Users"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Users.UpdateUserAbilitiesRequest"}
      x-speakeasy-name-override: "updateOrgLevelPermissions"
  "/v3/users/delete-user":
    put:
      operationId: "Users_deleteUser"
      summary: "Delete User"
      description: "This API replaces the swap_user for all the entities in Squadcast with user_id provided and deletes the user."
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Users"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: "object"
              properties:
                "user_id":
                  type: "string"
                "swap_user_id":
                  type: "string"
                "suppress_incidents":
                  type: "boolean"
                "reassign_incidents":
                  type: "boolean"
              required:
                - "user_id"
                - "swap_user_id"
                - "suppress_incidents"
                - "reassign_incidents"
      x-speakeasy-name-override: "delete"
  "/v3/users/roles":
    get:
      operationId: "Users_getUserRoles"
      summary: "Get User Roles"
      description: "Returns all available user roles.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `read` scope."
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V3.Users.UserRoleResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Users"
      x-speakeasy-name-override: "getRoles"
  "/v3/users/{userID}":
    delete:
      operationId: "Users_removeUserFromOrg"
      summary: "Remove User From Org"
      description: "Remove user from organization. Upon sccess the user will be removed from the organization.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      parameters:
        - name: "userID"
          in: "path"
          required: true
          description: "(Required) user id"
          schema:
            type: "string"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Users"
      x-speakeasy-name-override: "removeFromOrg"
    get:
      operationId: "Users_getUserById"
      summary: "Get User By ID"
      description: "Returns a users details of the given `userID` in the request param.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `read` scope."
      parameters:
        - name: "userID"
          in: "path"
          required: true
          description: "(Required) user id"
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Users.UserResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Users"
      x-speakeasy-name-override: "getById"
    put:
      operationId: "Users_updateUserByID"
      summary: "Update User by userID"
      description: "Update User by userID.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      parameters:
        - name: "userID"
          in: "path"
          required: true
          description: "(Required) user id"
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Users.UserResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Users"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Users.UpdateUserRequest"}
      x-speakeasy-name-override: "updateById"
  "/v3/webform":
    get:
      operationId: "Webforms_getAllWebforms"
      summary: "Get All Webforms"
      description: "Returns all webforms of the given `owner_id` (teamId) in the request param.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `read` scope."
      parameters:
        - name: "owner_id"
          in: "query"
          required: true
          schema:
            type: "string"
          explode: false
        - name: "page_number"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "page_size"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V3.Webforms.WebformResponse"}
                  "meta":
                    type: "object"
                    properties:
                      "total_count":
                        type: "integer"
                        format: "int32"
                    required:
                      - "total_count"
                required:
                  - "data"
                  - "meta"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Webforms"
      x-speakeasy-name-override: "list"
    post:
      operationId: "Webforms_createWebform"
      summary: "Create Webform"
      description: "Add a webform to the organization. Returns the webform object in response.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "data":
                    type: "object"
                    properties:
                      "webform": {"$ref": "#/components/schemas/V3.Webforms.WebformResponse"}
                    required:
                      - "webform"
                required:
                  - "data"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Webforms"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Webforms.CreateOrUpdateWebformRequest"}
      x-speakeasy-name-override: "create"
  "/v3/webform/{webformId}":
    put:
      operationId: "Webforms_updateWebform"
      summary: "Update Webform"
      description: "Update a webform to the organization. Returns the webform object in response.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      parameters:
        - name: "webformId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Webforms.WebformResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Webforms"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Webforms.CreateOrUpdateWebformRequest"}
      x-speakeasy-name-override: "update"
    delete:
      operationId: "Webforms_removeWebform"
      summary: "Remove Webform"
      description: "Remove a webform from the organization.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `user-write` scope."
      parameters:
        - name: "webformId"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "owner_id"
          in: "query"
          required: false
          schema:
            type: "string"
          explode: false
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "data":
                    type: "string"
                required:
                  - "data"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Webforms"
      x-speakeasy-name-override: "remove"
    get:
      operationId: "Webforms_getWebformById"
      summary: "Get Webform By ID"
      description: "Returns a webform details of the given `webformId` in the request param.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `read` scope."
      parameters:
        - name: "webformId"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "owner_id"
          in: "query"
          required: false
          schema:
            type: "string"
          explode: false
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Webforms.WebformResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Webforms"
      x-speakeasy-name-override: "getById"
  "/v3/workflows":
    get:
      operationId: "Workflows_listWorkflows"
      summary: "List Workflows"
      description: "Get a list of all Workflows"
      parameters:
        - name: "owner_id"
          in: "query"
          required: true
          schema:
            type: "string"
          explode: false
        - name: "page_size"
          in: "query"
          required: false
          schema:
            type: "string"
          explode: false
        - name: "page_number"
          in: "query"
          required: false
          schema:
            type: "string"
          explode: false
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          explode: false
        - name: "event"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
          explode: false
        - name: "actions"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
          explode: false
        - name: "tags"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
          explode: false
        - name: "owner"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
          explode: false
        - name: "created_by"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
          explode: false
        - name: "updated_by"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
          explode: false
        - name: "enabled"
          in: "query"
          required: false
          schema:
            type: "string"
          explode: false
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/V3.Workflows.ListWorkflowAPIResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Workflows"
      x-speakeasy-name-override: "list"
    post:
      operationId: "Workflows_createWorkflow"
      summary: "Create Workflow"
      description: "Create a Workflow"
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Workflows.WorkflowAPIResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Workflows"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Workflows.CreateWorkflowRequest"}
      x-speakeasy-name-override: "create"
  "/v3/workflows/enable":
    put:
      operationId: "Workflows_bulkEnabledisableWorkflows"
      summary: "Bulk Enable/Disable Workflows"
      description: "Bulk enable or disable workflows"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Workflows"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Workflows.BulkEnableDisableWorkflowsRequest"}
      x-speakeasy-name-override: "bulkEnableDisable"
  "/v3/workflows/{workflowID}":
    delete:
      operationId: "Workflows_deleteWorkflow"
      summary: "Delete Workflow"
      description: "Delete a workflow by ID"
      parameters:
        - name: "workflowID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Workflows"
      x-speakeasy-name-override: "delete"
    get:
      operationId: "Workflows_getWorkflowById"
      summary: "Get Workflow By ID"
      description: "Get a workflow by ID"
      parameters:
        - name: "workflowID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/V3.Workflows.GetWorkflowByIdResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Workflows"
      x-speakeasy-name-override: "getById"
    patch:
      operationId: "Workflows_updateWorkflow"
      summary: "Update Workflow"
      description: "Update a Workflow"
      parameters:
        - name: "workflowID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Workflows.UpdateWorkflowAPIResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Workflows"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Workflows.CreateWorkflowRequestUpdate"}
      x-speakeasy-name-override: "update"
  "/v3/workflows/{workflowID}/actions":
    post:
      operationId: "Workflows_createAction"
      summary: "Create Action"
      description: "Create an Action for a workflow"
      parameters:
        - name: "workflowID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Workflows.ActionResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Workflows"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Workflows.ActionRequest"}
      x-speakeasy-group: "workflows.actions"
      x-speakeasy-name-override: "create"
  "/v3/workflows/{workflowID}/actions/reorder":
    patch:
      operationId: "Workflows_updateActionsOrder"
      summary: "Update Actions Order"
      description: "Update action order in a workflow"
      parameters:
        - name: "workflowID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/V3.Workflows.UpdateActionsOrderResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Workflows"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Workflows.UpdateActionsOrderRequest"}
      x-speakeasy-name-override: "updateActionsOrder"
  "/v3/workflows/{workflowID}/actions/{actionID}":
    delete:
      operationId: "Workflows_deleteWorkflowAction"
      summary: "Delete Workflow Action"
      description: "Delete an action by action ID"
      parameters:
        - name: "workflowID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "actionID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Workflows"
      x-speakeasy-name-override: "deleteAction"
    get:
      operationId: "Workflows_getWorkflowActionById"
      summary: "Get Workflow Action By ID"
      description: "Get workflow action by ID"
      parameters:
        - name: "workflowID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "actionID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V3.Workflows.GetWorkflowActionByIdResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Workflows"
      x-speakeasy-group: "workflows.actions"
      x-speakeasy-name-override: "getById"
    patch:
      operationId: "Workflows_updateWorkflowAction"
      summary: "Update Workflow Action"
      description: "Update an action by action ID"
      parameters:
        - name: "workflowID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "actionID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/V3.Workflows.ActionResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Workflows"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Workflows.ActionRequestUpdate"}
      x-speakeasy-name-override: "updateAction"
  "/v3/workflows/{workflowID}/enable":
    patch:
      operationId: "Workflows_enabledisableWorkflow"
      summary: "Enable/Disable Workflow"
      description: "Enable or disable workflow by ID"
      parameters:
        - name: "workflowID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Workflows"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V3.Workflows.EnableDisableWorkflowRequest"}
      x-speakeasy-name-override: "enableDisable"
  "/v3/workflows/{workflowID}/logs":
    get:
      operationId: "Workflows_getWorkflowLogs"
      summary: "Get Workflow Logs"
      description: "Get workflow logs"
      parameters:
        - name: "workflowID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "page_size"
          in: "query"
          required: false
          schema:
            type: "string"
          explode: false
        - name: "page_number"
          in: "query"
          required: false
          schema:
            type: "string"
          explode: false
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/V3.Workflows.GetWorkflowLogsResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Workflows"
      x-speakeasy-group: "workflows.logs"
      x-speakeasy-name-override: "get"
  "/v4/schedules":
    get:
      operationId: "Schedules_listSchedules"
      summary: "List Schedules"
      parameters:
        - name: "scheduleIDs"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "integer"
          explode: false
        - name: "participants"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
          explode: false
        - name: "scheduleName"
          in: "query"
          required: false
          schema:
            type: "string"
          explode: false
        - name: "myOnCall"
          in: "query"
          required: false
          schema:
            type: "boolean"
          explode: false
        - name: "youAndYourSquads"
          in: "query"
          required: false
          schema:
            type: "boolean"
          explode: false
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          explode: false
        - name: "hidePaused"
          in: "query"
          required: false
          schema:
            type: "boolean"
          explode: false
        - name: "ownerID"
          in: "query"
          required: false
          schema:
            type: "string"
          explode: false
        - name: "escalationPolicies"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
          explode: false
        - name: "withoutEscalationPolicy"
          in: "query"
          required: false
          schema:
            type: "boolean"
          explode: false
        - name: "pageSize"
          in: "query"
          required: false
          schema:
            type: "integer"
          explode: false
        - name: "pageNumber"
          in: "query"
          required: false
          schema:
            type: "integer"
          explode: false
        - name: "teamID"
          in: "query"
          required: true
          schema:
            type: "string"
          explode: false
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                  - "pageInfo"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V4.ScheduleResponse"}
                  "pageInfo": {"$ref": "#/components/schemas/Common.V4.PageInfo"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Schedule"
      x-speakeasy-group: "schedules"
      x-speakeasy-name-override: "list"
    post:
      operationId: "Schedules_createSchedule"
      summary: "Create Schedule"
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.ScheduleResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Schedule"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V4.CreateScheduleRequest"}
      x-speakeasy-group: "schedules"
      x-speakeasy-name-override: "create"
  "/v4/schedules/{scheduleID}":
    delete:
      operationId: "Schedules_deleteSchedule"
      summary: "Delete Schedule"
      parameters:
        - name: "scheduleID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Schedule"
      x-speakeasy-group: "schedules"
      x-speakeasy-name-override: "delete"
    get:
      operationId: "Schedules_getScheduleById"
      summary: "Get Schedule by ID"
      parameters:
        - name: "scheduleID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.ScheduleResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Schedule"
      x-speakeasy-group: "schedules"
      x-speakeasy-name-override: "getById"
    put:
      operationId: "Schedules_updateSchedule"
      summary: "Update Schedule"
      parameters:
        - name: "scheduleID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.ScheduleResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Schedule"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V4.UpdateScheduleRequest"}
      x-speakeasy-group: "schedules"
      x-speakeasy-name-override: "update"
  "/v4/schedules/{scheduleID}/actions":
    patch:
      operationId: "Schedules_pauseresumeSchedule"
      summary: "Pause/Resume Schedule"
      parameters:
        - name: "scheduleID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.PauseResumeScheduleResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Schedule"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: "object"
              properties:
                "action":
                  type: "string"
                  enum:
                    - "pause"
                    - "resume"
      x-speakeasy-group: "schedules"
      x-speakeasy-name-override: "pauseResume"
  "/v4/schedules/{scheduleID}/change-timezone":
    patch:
      operationId: "Schedules_changeTimezone"
      summary: "Change Timezone"
      parameters:
        - name: "scheduleID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.ChangeTimezoneResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Schedule"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: "object"
              properties:
                "timeZone":
                  type: "string"
      x-speakeasy-group: "schedules"
      x-speakeasy-name-override: "changeTimezone"
  "/v4/schedules/{scheduleID}/clone":
    post:
      operationId: "Schedules_cloneSchedule"
      summary: "Clone Schedule"
      parameters:
        - name: "scheduleID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.ScheduleResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Schedule"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: "object"
      x-speakeasy-group: "schedules"
      x-speakeasy-name-override: "clone"
  "/v4/schedules/{scheduleID}/ical-link":
    delete:
      operationId: "Export_deleteIcalLink"
      summary: "Delete ICal Link"
      parameters:
        - name: "scheduleID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "myOnCall"
          in: "query"
          required: true
          schema:
            type: "boolean"
          explode: false
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Schedule/Export Schedule"
      x-speakeasy-group: "schedules.export"
      x-speakeasy-name-override: "deleteIcalLink"
    get:
      operationId: "Export_getScheduleIcalLink"
      summary: "Get Schedule ICal Link"
      parameters:
        - name: "scheduleID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "myOnCall"
          in: "query"
          required: true
          schema:
            type: "boolean"
          explode: false
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.ICalLinkResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Schedule/Export Schedule"
      x-speakeasy-group: "schedules"
      x-speakeasy-name-override: "getIcalLink"
    patch:
      operationId: "Export_refreshScheduleIcalLink"
      summary: "Refresh Schedule ICal Link"
      parameters:
        - name: "scheduleID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "myOnCall"
          in: "query"
          required: true
          schema:
            type: "boolean"
          explode: false
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.ICalLinkResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Schedule/Export Schedule"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: "object"
      x-speakeasy-group: "exportSchedule"
      x-speakeasy-name-override: "refreshIcalLink"
    post:
      operationId: "Export_createScheduleIcalLink"
      summary: "Create Schedule ICal Link"
      parameters:
        - name: "scheduleID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "myOnCall"
          in: "query"
          required: true
          schema:
            type: "boolean"
          explode: false
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.ICalLinkResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Schedule/Export Schedule"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: "object"
      x-speakeasy-group: "schedules"
      x-speakeasy-name-override: "createIcalLink"
  "/v4/schedules/{scheduleID}/overrides":
    get:
      operationId: "Overrides_listOverrides"
      summary: "List Overrides"
      parameters:
        - name: "scheduleID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "startTime"
          in: "query"
          required: true
          schema:
            type: "string"
          explode: false
        - name: "endTime"
          in: "query"
          required: true
          schema:
            type: "string"
          explode: false
        - name: "participantID"
          in: "query"
          required: false
          schema:
            type: "string"
          explode: false
        - name: "pageNumber"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
          explode: false
        - name: "pageSize"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
          explode: false
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                  - "pageInfo"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V4.OverrideResponse"}
                  "pageInfo": {"$ref": "#/components/schemas/Common.V4.PageInfo"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Overrides"
      x-speakeasy-group: "schedules.overrides"
      x-speakeasy-name-override: "list"
    post:
      operationId: "Overrides_createScheduleOverride"
      summary: "Create Schedule Override"
      parameters:
        - name: "scheduleID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.OverrideResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Overrides"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V4.CreateScheduleOverrideRequest"}
      x-speakeasy-group: "schedules.overrides"
      x-speakeasy-name-override: "create"
  "/v4/schedules/{scheduleID}/overrides/{overrideID}":
    delete:
      operationId: "Overrides_deleteScheduleOverride"
      summary: "Delete Schedule Override"
      parameters:
        - name: "scheduleID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "overrideID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Overrides"
      x-speakeasy-name-override: "remove"
    get:
      operationId: "Overrides_getOverrideById"
      summary: "Get Override by ID"
      parameters:
        - name: "scheduleID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "overrideID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.OverrideResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Overrides"
      x-speakeasy-name-override: "getById"
    put:
      operationId: "Overrides_updateScheduleOverride"
      summary: "Update Schedule Override"
      parameters:
        - name: "scheduleID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "overrideID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.OverrideResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Overrides"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V4.UpdateScheduleOverrideRequest"}
      x-speakeasy-group: "schedules.overrides"
      x-speakeasy-name-override: "update"
  "/v4/schedules/{scheduleID}/rotations":
    get:
      operationId: "Rotations_getScheduleRotations"
      summary: "List Schedule Rotations"
      parameters:
        - name: "scheduleID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                  - "pageInfo"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V4.RotationResponse"}
                  "pageInfo": {"$ref": "#/components/schemas/Common.V4.PageInfo"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Rotation"
      x-speakeasy-group: "rotations"
      x-speakeasy-name-override: "listBySchedule"
    post:
      operationId: "Rotations_createRotation"
      summary: "Create Rotation"
      parameters:
        - name: "scheduleID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.RotationResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Rotation"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V4.CreateRotationRequest"}
      x-speakeasy-group: "rotations"
      x-speakeasy-name-override: "create"
  "/v4/schedules/{scheduleID}/rotations/{rotationID}":
    delete:
      operationId: "Rotations_deleteRotation"
      summary: "Delete Rotation"
      parameters:
        - name: "scheduleID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "rotationID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
          content:
            "*/*":
              schema:
                type: "object"
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Rotation"
      x-speakeasy-group: "rotations"
      x-speakeasy-name-override: "delete"
    get:
      operationId: "Rotations_getScheduleRotationById"
      summary: "Get Schedule Rotation by ID"
      parameters:
        - name: "scheduleID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "rotationID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.RotationResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Rotation"
      x-speakeasy-group: "rotations"
      x-speakeasy-name-override: "getById"
    put:
      operationId: "Rotations_updateRotation"
      summary: "Update Rotation"
      parameters:
        - name: "scheduleID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "rotationID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.RotationResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Rotation"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V4.UpdateRotationRequest"}
      x-speakeasy-group: "rotations"
      x-speakeasy-name-override: "update"
  "/v4/schedules/{scheduleID}/rotations/{rotationID}/participants":
    get:
      operationId: "Rotations_getRotationParticipants"
      summary: "Get Rotation Participants"
      parameters:
        - name: "scheduleID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "rotationID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.GetRotationParticipantsResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Rotation"
      x-speakeasy-group: "rotations"
      x-speakeasy-name-override: "getParticipants"
    put:
      operationId: "Rotations_updateRotationParticipants"
      summary: "Update Rotation Participants"
      parameters:
        - name: "scheduleID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "rotationID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.RotationParticipantsResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Rotation"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V4.UpdateRotationParticipantsRequest"}
      x-speakeasy-group: "rotations"
      x-speakeasy-name-override: "updateParticipants"
  "/v4/squads":
    get:
      operationId: "Squads_getAllSquads"
      summary: "Get All Squads"
      description: "This endpoint is used to get all the squads details of your organization.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `squad-read` scope."
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                  - "pageInfo"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V4.Squads.SquadResponse"}
                  "pageInfo": {"$ref": "#/components/schemas/Common.V4.PageInfo"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Squads/V4"
      x-speakeasy-group: "squads"
      x-speakeasy-name-override: "list"
    post:
      operationId: "Squads_createSquadV4"
      summary: "Create Squad"
      description: "This endpoint is used to create a new squad.\nThe role will be considered only if your organization is on the OBAC permission model; otherwise, the role field will be ignored, and only the member will be added to the squad.\n\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `squad-create` scope."
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.Squads.CreateSquadResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Squads/V4"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V4.Squads.CreateSquadRequest"}
      x-speakeasy-group: "squadsV4"
      x-speakeasy-name-override: "create"
  "/v4/squads/{squadID}":
    get:
      operationId: "Squads_getSquadByIdV4"
      summary: "Get Squad By ID"
      description: "This endpoint is used to get the squads details by id.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `squad-read` scope."
      parameters:
        - name: "squadID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.Squads.SquadResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Squads/V4"
      x-speakeasy-group: "squads"
      x-speakeasy-name-override: "getById"
    put:
      operationId: "Squads_updateSquadV4"
      summary: "Update Squad"
      description: "This endpoint is used to update squad.\n\nThe role will be considered only if your organization is on the OBAC permission model; otherwise, the role field will be ignored, and only the member will be added to the squad.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `squad-create` scope."
      parameters:
        - name: "squadID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.Squads.SquadResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Squads/V4"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V4.Squads.UpdateSquadRequest"}
      x-speakeasy-group: "squads"
      x-speakeasy-name-override: "updateV4"
  "/v4/squads/{squadID}/members/{memberID}":
    delete:
      operationId: "Squads_removeSquadMember"
      summary: "Remove Squad Member"
      description: "This endpoint is used to update squad member's role.\n\nIf you're attempting to remove a member whose role is 'owner', and that 'owner' is the last squad owner, then the 'replaceWith' query parameter is required. Setting 'replaceWith' to 'member' will promote another member as the owner, and the specified member will be removed.\n\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `squad-create` scope."
      parameters:
        - name: "squadID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "memberID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "replaceWith"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/V4.Squads.RemoveSquadMemberResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Squads/V4"
      x-speakeasy-group: "squads"
      x-speakeasy-name-override: "removeMember"
    put:
      operationId: "Squads_updateSquadMember"
      summary: "Update Squad Member"
      description: "This endpoint is used to update a squad member's role and is only accessible if your organization is using the OBAC permission model.\n\nIf you're attempting to update a member's role from 'owner' to 'member', and that 'owner' is the last squad owner, then the 'replaceWith' query parameter is required. Setting 'replaceWith' to 'member' will promote the member to the role of owner.\n\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `squad-create` scope."
      parameters:
        - name: "squadID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "memberID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "replaceWith"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        "201":
          description: "The request has succeeded and a new resource has been created as a result."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/V4.Squads.UpdateSquadMemberResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Squads/V4"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V4.Squads.UpdateSquadMemberRequest"}
      x-speakeasy-group: "squads.members"
      x-speakeasy-name-override: "update"
  "/v4/squads/{squadID}/name":
    put:
      operationId: "Squads_updateSquadName"
      summary: "Update Squad Name"
      description: "This endpoint is used to update squad's name.\nRequires `access_token` as a `Bearer {{token}}` in the `Authorization` header with `squad-create` scope."
      parameters:
        - name: "squadID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.Squads.UpdateSquadNameResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "402":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "422":
          description: "Client error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "500":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "502":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
        "504":
          description: "Server error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Common.V4.Error"}
      tags:
        - "Squads/V4"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V4.Squads.UpdateSquadNameRequest"}
      x-speakeasy-group: "squadsV4"
      x-speakeasy-name-override: "updateName"
  "/v4/statuspages":
    get:
      operationId: "StatusPages_listStatusPages"
      summary: "List Status Pages"
      parameters:
        - name: "pageSize"
          in: "query"
          required: true
          schema:
            type: "string"
          explode: false
        - name: "pageNumber"
          in: "query"
          required: true
          schema:
            type: "string"
          explode: false
        - name: "filters.isPublic"
          in: "query"
          required: true
          schema:
            type: "string"
          explode: false
        - name: "teamID"
          in: "query"
          required: true
          schema:
            type: "string"
          explode: false
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/V4.StatusPages.ListStatusPagesResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages"
      x-speakeasy-group: "statusPages"
      x-speakeasy-name-override: "list"
    post:
      operationId: "StatusPages_createStatusPage"
      summary: "Create Status Page"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.StatusPages.CreateStatusPageResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V4.StatusPages.CreateStatusPageRequest"}
      x-speakeasy-group: "statusPages"
      x-speakeasy-name-override: "create"
  "/v4/statuspages/{statuspageID}":
    delete:
      operationId: "StatusPages_deleteStatusPageById"
      summary: "Delete Status Page By ID"
      parameters:
        - name: "statuspageID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.StatusPages.DeleteStatusPageByIdResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages"
      x-speakeasy-group: "statusPages"
      x-speakeasy-name-override: "deleteById"
    get:
      operationId: "StatusPages_getStatusPageById"
      summary: "Get Status Page By ID"
      parameters:
        - name: "statuspageID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.StatusPages.GetStatusPageByIdResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages"
      x-speakeasy-group: "statusPages"
      x-speakeasy-name-override: "getById"
    put:
      operationId: "StatusPages_updateStatusPageById"
      summary: "Update Status Page By ID"
      parameters:
        - name: "statuspageID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.StatusPages.UpdateStatusPageByIdResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V4.StatusPages.UpdateStatusPageByIdRequest"}
      x-speakeasy-group: "statusPages"
      x-speakeasy-name-override: "update"
  "/v4/statuspages/{statuspageID}/components":
    get:
      operationId: "Components_listComponents"
      summary: "List Components"
      parameters:
        - name: "statuspageID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V4.StatusPages.Components.ListComponentsResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages/Components"
      x-speakeasy-group: "components"
      x-speakeasy-name-override: "list"
    post:
      operationId: "Components_createComponent"
      summary: "Create Component"
      parameters:
        - name: "statuspageID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.StatusPages.Components.CreateComponentResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages/Components"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V4.StatusPages.Components.CreateComponentRequest"}
      x-speakeasy-group: "components"
      x-speakeasy-name-override: "create"
  "/v4/statuspages/{statuspageID}/components/{component_id}":
    delete:
      operationId: "Components_deleteComponentById"
      summary: "Delete Component By ID"
      parameters:
        - name: "statuspageID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "component_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.StatusPages.Components.DeleteComponentByIdResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages/Components"
      x-speakeasy-group: "statusPages.components"
      x-speakeasy-name-override: "deleteById"
    get:
      operationId: "Components_getComponentById"
      summary: "Get Component By ID"
      parameters:
        - name: "statuspageID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "component_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.StatusPages.Components.GetComponentByIdResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages/Components"
      x-speakeasy-group: "components"
      x-speakeasy-name-override: "getById"
    put:
      operationId: "Components_updateComponentById"
      summary: "Update Component By ID"
      parameters:
        - name: "statuspageID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "component_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.StatusPages.Components.UpdateComponentByIdResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages/Components"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V4.StatusPages.Components.UpdateComponentByIdRequest"}
      x-speakeasy-group: "components"
      x-speakeasy-name-override: "updateById"
  "/v4/statuspages/{statuspageID}/groups":
    get:
      operationId: "ComponentGroups_listComponentGroups"
      summary: "List Component Groups"
      parameters:
        - name: "statuspageID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V4.StatusPages.ComponentGroups.ComponentGroupResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages/Component groups"
      x-speakeasy-group: "statusPages.componentGroups"
      x-speakeasy-name-override: "list"
    post:
      operationId: "ComponentGroups_createComponentGroup"
      summary: "Create Component Group"
      parameters:
        - name: "statuspageID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.StatusPages.ComponentGroups.CreateComponentGroupResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages/Component groups"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V4.StatusPages.ComponentGroups.CreateComponentGroupRequest"}
      x-speakeasy-group: "componentGroups"
      x-speakeasy-name-override: "create"
  "/v4/statuspages/{statuspageID}/groups/{group_id}":
    delete:
      operationId: "ComponentGroups_deleteComponentGroupById"
      summary: "Delete Component Group By ID"
      parameters:
        - name: "statuspageID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "group_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.StatusPages.ComponentGroups.DeleteComponentGroupByIdResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages/Component groups"
      x-speakeasy-group: "statusPages.componentGroups"
      x-speakeasy-name-override: "removeById"
    get:
      operationId: "ComponentGroups_getComponentGroupById"
      summary: "Get Component Group By ID"
      parameters:
        - name: "statuspageID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "group_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.StatusPages.ComponentGroups.GetComponentGroupByIdResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages/Component groups"
      x-speakeasy-group: "statusPages.componentGroups"
      x-speakeasy-name-override: "getById"
  "/v4/statuspages/{statuspageID}/issues":
    get:
      operationId: "Issues_listIssues"
      summary: "List Issues"
      parameters:
        - name: "statuspageID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/V4.StatusPages.Issues.ListIssuesResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages/Issues"
      x-speakeasy-group: "statusPages.issues"
      x-speakeasy-name-override: "list"
    post:
      operationId: "Issues_createIssue"
      summary: "Create Issue"
      parameters:
        - name: "statuspageID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.StatusPages.Issues.CreateIssueResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages/Issues"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V4.StatusPages.Issues.CreateIssueRequest"}
      x-speakeasy-group: "statusPages.issues"
      x-speakeasy-name-override: "create"
  "/v4/statuspages/{statuspageID}/issues/{issue_id}":
    delete:
      operationId: "Issues_deleteIssueById"
      summary: "Delete Issue By ID"
      parameters:
        - name: "statuspageID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "issue_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.StatusPages.Issues.DeleteIssueByIdResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages/Issues"
      x-speakeasy-group: "issues"
      x-speakeasy-name-override: "deleteById"
    get:
      operationId: "Issues_getIssueById"
      summary: "Get Issue By ID"
      parameters:
        - name: "statuspageID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "issue_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.StatusPages.Issues.GetIssueByIdResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages/Issues"
      x-speakeasy-group: "statusPages.issues"
      x-speakeasy-name-override: "getById"
    put:
      operationId: "Issues_updateIssue"
      summary: "Update Issue"
      parameters:
        - name: "statuspageID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "issue_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.StatusPages.Issues.UpdateIssueResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages/Issues"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V4.StatusPages.Issues.UpdateIssueRequest"}
      x-speakeasy-group: "issues"
      x-speakeasy-name-override: "update"
  "/v4/statuspages/{statuspageID}/maintenance":
    get:
      operationId: "Maintenances_listMaintenances"
      summary: "List Maintenances"
      parameters:
        - name: "statuspageID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "startTime"
          in: "query"
          required: true
          schema:
            type: "string"
          explode: false
        - name: "endTime"
          in: "query"
          required: true
          schema:
            type: "string"
          explode: false
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/V4.StatusPages.Maintenances.ListMaintenancesResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages/Maintenances"
      x-speakeasy-group: "statusPages.maintenances"
      x-speakeasy-name-override: "list"
    post:
      operationId: "Maintenances_createMaintenance"
      summary: "Create Maintenance"
      parameters:
        - name: "statuspageID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.StatusPages.Maintenances.CreateMaintenanceResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages/Maintenances"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V4.StatusPages.Maintenances.CreateMaintenanceRequest"}
      x-speakeasy-group: "statusPages.maintenances"
      x-speakeasy-name-override: "create"
  "/v4/statuspages/{statuspageID}/maintenance/{maintenance_id}":
    delete:
      operationId: "Maintenances_deleteMaintenanceById"
      summary: "Delete Maintenance By ID"
      parameters:
        - name: "statuspageID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "maintenance_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.StatusPages.Maintenances.DeleteMaintenanceByIdResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages/Maintenances"
      x-speakeasy-group: "maintenances"
      x-speakeasy-name-override: "delete"
    get:
      operationId: "Maintenances_getMaintenanceById"
      summary: "Get Maintenance By ID"
      parameters:
        - name: "statuspageID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "maintenance_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.StatusPages.Maintenances.GetMaintenanceByIdResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages/Maintenances"
      x-speakeasy-group: "statuspages.maintenances"
      x-speakeasy-name-override: "getById"
    put:
      operationId: "Maintenances_updateMaintenanceById"
      summary: "Update Maintenance By ID"
      parameters:
        - name: "statuspageID"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "maintenance_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data": {"$ref": "#/components/schemas/V4.StatusPages.Maintenances.UpdateMaintenanceByIdResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages/Maintenances"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/V4.StatusPages.Maintenances.UpdateMaintenanceByIdRequest"}
      x-speakeasy-group: "maintenances"
      x-speakeasy-name-override: "updateById"
  "/v4/statuspages/{statuspageID}/states":
    get:
      operationId: "Issues_listStatusPageIssueStates"
      summary: "List Status Page Issue States"
      parameters:
        - name: "statuspageID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V4.StatusPages.Issues.ListStatusPageIssueStatesResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages/Issues"
      x-speakeasy-group: "issues"
      x-speakeasy-name-override: "list"
  "/v4/statuspages/{statuspageID}/status":
    get:
      operationId: "StatusPages_listStatusPageStatuses"
      summary: "List Status Page Statuses"
      parameters:
        - name: "statuspageID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema:
                type: "object"
                required:
                  - "data"
                properties:
                  "data":
                    type: "array"
                    items: {"$ref": "#/components/schemas/V4.StatusPages.StatusPageStatusesResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages"
      x-speakeasy-group: "statusPages"
      x-speakeasy-name-override: "listStatuses"
  "/v4/statuspages/{statuspageID}/subscribers":
    get:
      operationId: "StatusPages_listSubscribers"
      summary: "List Subscribers"
      parameters:
        - name: "statuspageID"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The request has succeeded."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/V4.StatusPages.ListSubscribersResponse"}
        "400":
          description: "The server could not understand the request due to invalid syntax."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "401":
          description: "Access is unauthorized."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "402":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "403":
          description: "Access is forbidden."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "404":
          description: "The server cannot find the requested resource."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "409":
          description: "The request conflicts with the current state of the server."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "422":
          description: "Client error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "502":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "503":
          description: "Service unavailable."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
        "504":
          description: "Server error"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "meta": {"$ref": "#/components/schemas/Common.V3.ErrorMeta"}
                required:
                  - "meta"
      tags:
        - "Status Pages/Subscribers"
      x-speakeasy-group: "subscribers"
      x-speakeasy-name-override: "list"
security:
  - BearerAuth: []
components:
  parameters:
    "V3.Incidents.IncidentExportRequest.assignedToUserIDsAndTheirSquads":
      name: "assignedToUserIDsAndTheirSquads"
      in: "query"
      required: false
      schema:
        type: "array"
        items:
          type: "string"
      explode: false
    "V3.Incidents.IncidentExportRequest.assigned_to":
      name: "assigned_to"
      in: "query"
      required: false
      schema:
        type: "array"
        items:
          type: "string"
      explode: false
    "V3.Incidents.IncidentExportRequest.end_time":
      name: "end_time"
      in: "query"
      required: true
      schema:
        type: "string"
        format: "date-time"
      explode: false
    "V3.Incidents.IncidentExportRequest.is_starred":
      name: "is_starred"
      in: "query"
      required: false
      schema:
        type: "string"
        enum:
          - "yes"
          - "no"
      explode: false
    "V3.Incidents.IncidentExportRequest.notes":
      name: "notes"
      in: "query"
      required: false
      schema:
        type: "string"
        enum:
          - "present"
          - "absent"
      explode: false
    "V3.Incidents.IncidentExportRequest.owner_id":
      name: "owner_id"
      in: "query"
      required: true
      schema:
        type: "string"
      explode: false
    "V3.Incidents.IncidentExportRequest.priority":
      name: "priority"
      in: "query"
      required: false
      schema:
        type: "array"
        items: {"$ref": "#/components/schemas/V3.Incidents.IncidentPriority"}
      explode: false
    "V3.Incidents.IncidentExportRequest.retrospectives":
      name: "retrospectives"
      in: "query"
      required: false
      schema:
        type: "string"
        enum:
          - "yes"
          - "no"
      explode: false
    "V3.Incidents.IncidentExportRequest.service_owner":
      name: "service_owner"
      in: "query"
      required: false
      schema:
        type: "string"
      explode: false
    "V3.Incidents.IncidentExportRequest.services":
      name: "services"
      in: "query"
      required: false
      schema:
        type: "array"
        items:
          type: "string"
      explode: false
    "V3.Incidents.IncidentExportRequest.slo_affecting":
      name: "slo_affecting"
      in: "query"
      required: false
      schema:
        type: "string"
        enum:
          - "yes"
          - "no"
          - ""
      explode: false
    "V3.Incidents.IncidentExportRequest.slos":
      name: "slos"
      in: "query"
      required: false
      schema:
        type: "array"
        items:
          type: "integer"
          format: "int32"
      explode: false
    "V3.Incidents.IncidentExportRequest.sort_by":
      name: "sort_by"
      in: "query"
      required: false
      schema:
        type: "string"
        enum:
          - "time"
          - "priority"
      explode: false
    "V3.Incidents.IncidentExportRequest.sources":
      name: "sources"
      in: "query"
      required: false
      schema:
        type: "array"
        items:
          type: "string"
      explode: false
    "V3.Incidents.IncidentExportRequest.start_time":
      name: "start_time"
      in: "query"
      required: true
      schema:
        type: "string"
        format: "date-time"
      explode: false
    "V3.Incidents.IncidentExportRequest.status":
      name: "status"
      in: "query"
      required: false
      schema:
        type: "array"
        items:
          type: "string"
      explode: false
    "V3.Incidents.IncidentExportRequest.tags":
      name: "tags"
      in: "query"
      required: false
      schema:
        type: "array"
        items:
          type: "string"
      explode: false
    "V3.Incidents.IncidentExportRequest.textFilter":
      name: "textFilter"
      in: "query"
      required: false
      schema:
        type: "string"
      explode: false
    "V3.Incidents.IncidentExportRequest.type":
      name: "type"
      in: "query"
      required: true
      schema: {"$ref": "#/components/schemas/V3.Incidents.ExportFormat"}
      explode: false
  schemas:
    "Common.V3.EntityOwner":
      type: "object"
      required:
        - "id"
        - "type"
      properties:
        "id":
          type: "string"
          description: "The ID of the owner."
        "type":
          type: "string"
          description: "The type of the owner ( \"user\", \"squad\")."
      description: "Represents the owner of an entity."
    "Common.V3.ErrorMeta":
      type: "object"
      required:
        - "status"
        - "error_message"
      properties:
        "status":
          anyOf:
            - type: "string"
            - type: "integer"
        "error_message":
          type: "string"
      description: "Represents a single response containing data of type T."
    "Common.V3.RBACEntityPermission":
      type: "object"
      required:
        - "user_id"
        - "abilities"
      properties:
        "user_id":
          type: "string"
          description: "The ID of the user receiving the permission."
        "abilities":
          type: "object"
          unevaluatedProperties:
            type: "boolean"
          description: "A map of abilities granted to the user."
      description: "Represents a permission granted to a user for a specific entity."
    "Common.V3.RBACOwner":
      type: "object"
      required:
        - "id"
        - "type"
      properties:
        "id":
          type: "string"
          description: "The ID of the owner."
        "type":
          type: "string"
          enum:
            - "team"
          description: "The type of the owner."
      description: "Represents the RBAC owner of an entity."
    "Common.V4.Error":
      type: "object"
      required:
        - "error"
      properties:
        "error":
          type: "object"
          properties:
            "code":
              type: "string"
            "message":
              type: "string"
            "details":
              type: "array"
              items:
                type: "object"
                properties:
                  "field":
                    type: "string"
                  "message":
                    type: "string"
                required:
                  - "field"
                  - "message"
          required:
            - "code"
            - "message"
    "Common.V4.PageInfo":
      type: "object"
      required:
        - "pageSize"
        - "hasNext"
        - "hasPrevious"
      properties:
        "pageSize":
          type: "integer"
          format: "int32"
        "hasNext":
          type: "boolean"
        "hasPrevious":
          type: "boolean"
        "nextCursor":
          type: "string"
        "previousCursor":
          type: "string"
    "SubExpressionsItem":
      type: "array"
      items: {"$ref": "#/components/schemas/V3.Services.TaggingRules.ExpressionBranch"}
    "V3.Analytics.AnalyticsResponse":
      type: "object"
      required:
        - "mtta"
        - "mttr"
      properties:
        "mtta":
          type: "number"
        "mttr":
          type: "number"
    "V3.EscalationPolicies.CreateEscalationPolicyRequest":
      type: "object"
      required:
        - "owner_id"
        - "name"
        - "description"
        - "repetition"
        - "repeat_after"
        - "rules"
        - "enable_incident_reminders"
        - "incident_reminder_rules"
        - "enable_incident_retrigger"
        - "retrigger_after"
      properties:
        "owner_id":
          type: "string"
          description: "The ID of the team that owns this escalation policy."
        "name":
          type: "string"
          description: "The name of the escalation policy."
        "description":
          type: "string"
          description: "A description of the escalation policy."
        "repetition":
          type: "integer"
          format: "int32"
          description: "The number of times the entire policy should be repeated."
        "repeat_after":
          type: "integer"
          format: "int32"
          description: "The time in minutes after which the policy should be repeated."
        "rules":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.EscalationPolicies.EscalationPolicyRule"}
          description: "The rules that define the escalation steps."
        "enable_incident_reminders":
          type: "boolean"
          description: "Enable or disable incident reminders."
        "incident_reminder_rules":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.EscalationPolicies.IncidentReminderRule"}
          description: "The rules for incident reminders."
        "enable_incident_retrigger":
          type: "boolean"
          description: "Enable or disable automatic incident re-triggering."
        "retrigger_after":
          type: "integer"
          format: "int32"
          description: "The time in hours after which an incident should be re-triggered."
        "entity_owner":
          allOf:
            - {"$ref": "#/components/schemas/Common.V3.EntityOwner"}
          description: "The owner of the entity."
    "V3.EscalationPolicies.EscalationEntity":
      type: "object"
      required:
        - "type"
      properties:
        "id":
          type: "string"
          description: "The unique identifier of the entity (user, squad, or schedule v1)."
        "pid":
          type: "integer"
          format: "int32"
          description: "The unique identifier of the entity (schedule v2)."
        "type":
          type: "string"
          enum:
            - "user"
            - "squad"
            - "schedule"
            - "schedulev2"
          description: "The type of the entity."
      description: "Represents an entity to be notified in an escalation rule."
    "V3.EscalationPolicies.EscalationPolicyResponse":
      type: "object"
      required:
        - "id"
        - "name"
        - "description"
        - "organization_id"
        - "repetition"
        - "repeat_after"
        - "rules"
        - "slug"
        - "enable_incident_reminders"
        - "incident_reminder_rules"
        - "enable_incident_retrigger"
        - "retrigger_after"
        - "entity_owner"
        - "owner"
        - "access_control"
      properties:
        "id":
          type: "string"
          description: "The unique identifier for the escalation policy."
        "name":
          type: "string"
          description: "The name of the escalation policy."
        "description":
          type: "string"
          description: "A description of the escalation policy."
        "organization_id":
          type: "string"
          description: "The ID of the organization this policy belongs to."
        "repetition":
          type: "integer"
          format: "int32"
          description: "The number of times the entire policy should be repeated."
        "repeat_after":
          type: "integer"
          format: "int32"
          description: "The time in minutes after which the policy should be repeated."
        "rules":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.EscalationPolicies.EscalationPolicyRule"}
          description: "The rules that define the escalation steps."
        "slug":
          type: "string"
          description: "The URL-friendly slug for the policy name."
        "enable_incident_reminders":
          type: "boolean"
          description: "Enable or disable incident reminders."
        "incident_reminder_rules":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.EscalationPolicies.IncidentReminderRule"}
          description: "The rules for incident reminders."
        "enable_incident_retrigger":
          type: "boolean"
          description: "Enable or disable automatic incident re-triggering."
        "retrigger_after":
          type: "integer"
          format: "int32"
          description: "The time in hours after which an incident should be re-triggered."
        "entity_owner":
          allOf:
            - {"$ref": "#/components/schemas/Common.V3.EntityOwner"}
          description: "The owner of the entity."
        "owner":
          allOf:
            - {"$ref": "#/components/schemas/Common.V3.RBACOwner"}
          description: "The RBAC owner of the policy (typically a team)."
        "access_control":
          type: "array"
          items: {"$ref": "#/components/schemas/Common.V3.RBACEntityPermission"}
          description: "Access control list for this policy."
      description: "Represents an Escalation Policy in the system."
    "V3.EscalationPolicies.EscalationPolicyRule":
      type: "object"
      required:
        - "escalationTime"
        - "via"
        - "roundrobin_enabled"
        - "roundrobin_next_index"
        - "entities"
        - "escalate_within_roundrobin"
        - "repetition"
        - "repeat_after"
      properties:
        "escalationTime":
          type: "integer"
          format: "int32"
          description: "The time in minutes to wait before this rule is triggered."
        "via":
          type: "array"
          items:
            type: "string"
          description: "The notification methods to use for this rule."
        "roundrobin_enabled":
          type: "boolean"
          description: "Indicates if round-robin is enabled for the entities in this rule."
        "roundrobin_next_index":
          type: "integer"
          format: "int32"
          description: "The index of the next entity to be notified in a round-robin setup."
        "entities":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.EscalationPolicies.EscalationEntity"}
          description: "The entities to be notified in this rule."
        "escalate_within_roundrobin":
          type: "boolean"
          description: "Indicates if escalation should happen within the round-robin rotation."
        "repetition":
          type: "integer"
          format: "int32"
          description: "The number of times this specific rule should be repeated."
        "repeat_after":
          type: "integer"
          format: "int32"
          description: "The time in minutes after which this rule should be repeated."
      description: "Represents a rule within an escalation policy."
    "V3.EscalationPolicies.IncidentReminderRule":
      type: "object"
      required:
        - "via"
        - "time_interval"
        - "till"
      properties:
        "via":
          type: "array"
          items:
            type: "string"
          description: "The notification methods to use for the reminder."
        "time_interval":
          type: "integer"
          format: "int32"
          description: "The interval in minutes at which to send the reminder."
        "till":
          type: "integer"
          format: "int32"
          description: "The duration in minutes for which to send reminders."
      description: "Represents a rule for sending incident reminders."
    "V3.EscalationPolicies.UpdateEscalationPolicyRequest":
      type: "object"
      properties:
        "owner_id":
          type: "string"
          description: "The ID of the team that owns this escalation policy."
        "name":
          type: "string"
          description: "The name of the escalation policy."
        "description":
          type: "string"
          description: "A description of the escalation policy."
        "repetition":
          type: "integer"
          format: "int32"
          description: "The number of times the entire policy should be repeated."
        "repeat_after":
          type: "integer"
          format: "int32"
          description: "The time in minutes after which the policy should be repeated."
        "rules":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.EscalationPolicies.EscalationPolicyRule"}
          description: "The rules that define the escalation steps."
        "enable_incident_reminders":
          type: "boolean"
          description: "Enable or disable incident reminders."
        "incident_reminder_rules":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.EscalationPolicies.IncidentReminderRule"}
          description: "The rules for incident reminders."
        "enable_incident_retrigger":
          type: "boolean"
          description: "Enable or disable automatic incident re-triggering."
        "retrigger_after":
          type: "integer"
          format: "int32"
          description: "The time in hours after which an incident should be re-triggered."
        "entity_owner":
          allOf:
            - {"$ref": "#/components/schemas/Common.V3.EntityOwner"}
          description: "The owner of the entity."
    "V3.Export.ExportResponse":
      type: "object"
      required:
        - "id"
        - "type"
        - "status"
        - "format"
      properties:
        "id":
          type: "string"
        "type":
          type: "string"
        "status":
          type: "string"
        "download_url":
          type: "string"
        "download_url_expires_at":
          type: "string"
        "format":
          type: "string"
        "error_message":
          type: "string"
    "V3.Extensions.MSTeams.ChannelConfiguration":
      type: "object"
      required:
        - "squadcast_team_id"
        - "squadcast_team_name"
        - "is_all_services"
        - "services"
        - "msteams_channel_id"
        - "msteams_channel_name"
      properties:
        "id":
          type: "string"
          description: "The MongoDB ObjectID for this specific channel configuration entry."
        "squadcast_team_id":
          type: "string"
          description: "The MongoDB ObjectID of the corresponding team in Squadcast."
        "squadcast_team_name":
          type: "string"
          description: "The name of the corresponding team in Squadcast."
        "is_all_services":
          type: "boolean"
          description: "If true, alerts for all services in the Squadcast Team are sent to this channel."
        "services":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Extensions.MSTeams.SquadCastServiceMapping"}
          description: "An array of specific services to route to this channel. Used when 'is_all_services' is false."
        "msteams_channel_id":
          type: "string"
          description: "The unique identifier of the target channel in MS Teams."
        "msteams_channel_name":
          type: "string"
          description: "The display name of the target channel in MS Teams."
      description: "Defines a mapping from a Squadcast Team/Service to a specific MS Teams channel."
    "V3.Extensions.MSTeams.ConnectedTeam":
      type: "object"
      required:
        - "id"
        - "team_id"
        - "team_name"
        - "channel_configurations"
      properties:
        "id":
          type: "string"
        "team_id":
          type: "string"
        "team_name":
          type: "string"
        "channel_configurations":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Extensions.MSTeams.ChannelConfiguration"}
    "V3.Extensions.MSTeams.ConnectedTeams":
      type: "object"
      required:
        - "team_id"
        - "team_name"
        - "channel_configurations"
      properties:
        "id":
          type: "string"
          description: "The MongoDB ObjectID for this connected team entry."
        "team_id":
          type: "string"
          description: "The unique identifier for the team in MS Teams."
        "team_name":
          type: "string"
          description: "The display name of the team in MS Teams."
        "channel_configurations":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Extensions.MSTeams.ChannelConfiguration"}
          description: "A list of channel routing configurations for this team."
      description: "Represents a connected MS Team and its channel configurations."
    "V3.Extensions.MSTeams.CreateOrUpdateMSTeamsConfigRequest":
      type: "object"
      required:
        - "default_conversation_name"
        - "default_conversation_id"
        - "is_active"
        - "is_default_active"
        - "is_custom_channels_active"
        - "triggers"
        - "tenant_id"
        - "from_id"
        - "connected_teams"
      properties:
        "custom_incident_alert_state":
          allOf:
            - {"$ref": "#/components/schemas/V3.Extensions.MSTeams.IncidentActionAlertState"}
          description: "A user-friendly way to configure which incident action alerts are active. This is translated by the backend into the 'triggers.custom' array."
        "id":
          type: "string"
          description: "The MongoDB ObjectID of the extension document. Should be included for updates."
        "organization_id":
          type: "string"
          description: "The MongoDB ObjectID of the organization this extension belongs to."
        "default_conversation_name":
          type: "string"
          description: "The display name for the default conversation/channel."
        "default_conversation_id":
          type: "string"
          description: "The unique identifier for the default MS Teams conversation/channel."
        "is_active":
          type: "boolean"
          description: "A master switch to enable or disable the entire integration."
        "is_default_active":
          type: "boolean"
          description: "Determines if notifications should be sent to the default channel."
        "is_custom_channels_active":
          type: "boolean"
          description: "Determines if notifications should be sent to custom-configured channels."
        "triggers":
          allOf:
            - {"$ref": "#/components/schemas/V3.Extensions.MSTeams.Triggers"}
          description: "Configuration for which alerts are sent to the MS Teams channel."
        "tenant_id":
          type: "string"
          description: "The Azure AD Tenant ID of the organization that owns this extension."
        "from_id":
          type: "string"
          description: "The Azure AD Object ID of the user who created this extension."
        "connected_teams":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Extensions.MSTeams.ConnectedTeams"}
          description: "A list of all MS Teams (teams) connected to this organization."
      description: "The request body for creating or updating an MS Teams extension configuration."
    "V3.Extensions.MSTeams.CustomIncidentAlertState":
      type: "object"
      required:
        - "is_trigger_active"
        - "is_retrigger_active"
        - "is_acknowledge_active"
        - "is_resolve_active"
        - "is_reassign_active"
        - "is_notes_added_active"
        - "is_postmortem_active"
        - "is_priority_updated_active"
      properties:
        "is_trigger_active":
          type: "boolean"
        "is_retrigger_active":
          type: "boolean"
        "is_acknowledge_active":
          type: "boolean"
        "is_resolve_active":
          type: "boolean"
        "is_reassign_active":
          type: "boolean"
        "is_notes_added_active":
          type: "boolean"
        "is_postmortem_active":
          type: "boolean"
        "is_priority_updated_active":
          type: "boolean"
    "V3.Extensions.MSTeams.EventClass":
      anyOf:
        - type: "string"
        - type: "string"
          enum:
            - "incident_triggered"
            - "incident_retriggered"
            - "incident_acknowledged"
            - "incident_resolved"
            - "incident_reassigned"
            - "incident_notes_added"
            - "incident_postmortem_started"
            - "incident_priority_updated"
            - "incident_snoozed"
            - "incident_unsnoozed"
            - "incident_delayed_notifications_resumed"
      description: "Represents the specific type of an incident-related event."
    "V3.Extensions.MSTeams.ExtensionMSTeams":
      type: "object"
      required:
        - "default_conversation_name"
        - "default_conversation_id"
        - "is_active"
        - "is_default_active"
        - "is_custom_channels_active"
        - "triggers"
        - "tenant_id"
        - "from_id"
        - "connected_teams"
      properties:
        "id":
          type: "string"
          description: "The MongoDB ObjectID of the extension document. Should be included for updates."
        "organization_id":
          type: "string"
          description: "The MongoDB ObjectID of the organization this extension belongs to."
        "default_conversation_name":
          type: "string"
          description: "The display name for the default conversation/channel."
        "default_conversation_id":
          type: "string"
          description: "The unique identifier for the default MS Teams conversation/channel."
        "is_active":
          type: "boolean"
          description: "A master switch to enable or disable the entire integration."
        "is_default_active":
          type: "boolean"
          description: "Determines if notifications should be sent to the default channel."
        "is_custom_channels_active":
          type: "boolean"
          description: "Determines if notifications should be sent to custom-configured channels."
        "triggers":
          allOf:
            - {"$ref": "#/components/schemas/V3.Extensions.MSTeams.Triggers"}
          description: "Configuration for which alerts are sent to the MS Teams channel."
        "tenant_id":
          type: "string"
          description: "The Azure AD Tenant ID of the organization that owns this extension."
        "from_id":
          type: "string"
          description: "The Azure AD Object ID of the user who created this extension."
        "connected_teams":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Extensions.MSTeams.ConnectedTeams"}
          description: "A list of all MS Teams (teams) connected to this organization."
      description: "The main configuration for the MS Teams extension."
    "V3.Extensions.MSTeams.IncidentActionAlertState":
      type: "object"
      required:
        - "is_trigger_active"
        - "is_retrigger_active"
        - "is_acknowledge_active"
        - "is_resolve_active"
        - "is_reassign_active"
        - "is_notes_added_active"
        - "is_postmortem_active"
        - "is_priority_updated_active"
      properties:
        "is_trigger_active":
          type: "boolean"
        "is_retrigger_active":
          type: "boolean"
        "is_acknowledge_active":
          type: "boolean"
        "is_resolve_active":
          type: "boolean"
        "is_reassign_active":
          type: "boolean"
        "is_notes_added_active":
          type: "boolean"
        "is_postmortem_active":
          type: "boolean"
        "is_priority_updated_active":
          type: "boolean"
      description: "A set of booleans to easily configure which incident-related alerts are sent to MS Teams."
    "V3.Extensions.MSTeams.MSTeamsConfig":
      type: "object"
      required:
        - "custom_incident_alert_state"
        - "id"
        - "organization_id"
        - "default_conversation_name"
        - "default_conversation_id"
        - "is_active"
        - "is_default_active"
        - "is_custom_channels_active"
        - "triggers"
        - "tenant_id"
        - "connected_teams"
      properties:
        "custom_incident_alert_state": {"$ref": "#/components/schemas/V3.Extensions.MSTeams.CustomIncidentAlertState"}
        "id":
          type: "string"
        "organization_id":
          type: "string"
        "default_conversation_name":
          type: "string"
        "default_conversation_id":
          type: "string"
        "is_active":
          type: "boolean"
        "is_default_active":
          type: "boolean"
        "is_custom_channels_active":
          type: "boolean"
        "triggers": {"$ref": "#/components/schemas/V3.Extensions.MSTeams.Triggers"}
        "tenant_id":
          type: "string"
        "connected_teams":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Extensions.MSTeams.ConnectedTeam"}
    "V3.Extensions.MSTeams.MSTeamsConfigResponse":
      type: "object"
      required:
        - "default_conversation_name"
        - "default_conversation_id"
        - "is_active"
        - "is_default_active"
        - "is_custom_channels_active"
        - "triggers"
        - "tenant_id"
        - "from_id"
        - "connected_teams"
      properties:
        "custom_incident_alert_state":
          allOf:
            - {"$ref": "#/components/schemas/V3.Extensions.MSTeams.IncidentActionAlertState"}
          description: "A user-friendly way to configure which incident action alerts are active. This is translated by the backend into the 'triggers.custom' array."
        "id":
          type: "string"
          description: "The MongoDB ObjectID of the extension document. Should be included for updates."
        "organization_id":
          type: "string"
          description: "The MongoDB ObjectID of the organization this extension belongs to."
        "default_conversation_name":
          type: "string"
          description: "The display name for the default conversation/channel."
        "default_conversation_id":
          type: "string"
          description: "The unique identifier for the default MS Teams conversation/channel."
        "is_active":
          type: "boolean"
          description: "A master switch to enable or disable the entire integration."
        "is_default_active":
          type: "boolean"
          description: "Determines if notifications should be sent to the default channel."
        "is_custom_channels_active":
          type: "boolean"
          description: "Determines if notifications should be sent to custom-configured channels."
        "triggers":
          allOf:
            - {"$ref": "#/components/schemas/V3.Extensions.MSTeams.Triggers"}
          description: "Configuration for which alerts are sent to the MS Teams channel."
        "tenant_id":
          type: "string"
          description: "The Azure AD Tenant ID of the organization that owns this extension."
        "from_id":
          type: "string"
          description: "The Azure AD Object ID of the user who created this extension."
        "connected_teams":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Extensions.MSTeams.ConnectedTeams"}
          description: "A list of all MS Teams (teams) connected to this organization."
      description: "The request body for creating or updating an MS Teams extension configuration."
    "V3.Extensions.MSTeams.MSTeamsErrorMeta":
      type: "object"
      required:
        - "status"
        - "error_message"
      properties:
        "status":
          anyOf:
            - type: "integer"
            - type: "string"
        "error_message":
          type: "string"
    "V3.Extensions.MSTeams.MSTeamsErrorResponse":
      type: "object"
      required:
        - "meta"
      properties:
        "meta": {"$ref": "#/components/schemas/V3.Extensions.MSTeams.MSTeamsErrorMeta"}
    "V3.Extensions.MSTeams.SquadCastServiceMapping":
      type: "object"
      required:
        - "squadcast_service_id"
        - "squadcast_service_name"
      properties:
        "squadcast_service_id":
          type: "string"
          description: "The MongoDB ObjectID of the Squadcast service."
        "squadcast_service_name":
          type: "string"
          description: "The name of the Squadcast service."
      description: "Maps a specific Squadcast service to a channel configuration."
    "V3.Extensions.MSTeams.Triggers":
      type: "object"
      required:
        - "all_active"
        - "custom"
      properties:
        "all_active":
          type: "boolean"
          description: "If true, all alerts are sent, and the 'custom' list is ignored."
        "custom":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Extensions.MSTeams.EventClass"}
          description: "A list of specific event classes to send alerts for. This is used when 'all_active' is false."
      description: "Defines the trigger conditions for sending alerts."
    "V3.Extensions.Webhooks.GetAllWebhooksResponse":
      type: "object"
      required:
        - "data"
      properties:
        "data":
          type: "object"
          properties:
            "result":
              type: "array"
              items: {"$ref": "#/components/schemas/V3.Extensions.Webhooks.WebhookListItem"}
            "meta":
              type: "object"
              properties:
                "total_count":
                  type: "integer"
              required:
                - "total_count"
          required:
            - "result"
            - "meta"
    "V3.Extensions.Webhooks.Webhook":
      type: "object"
      required:
        - "name"
        - "triggers"
        - "urls"
        - "trigger_type"
      properties:
        "name":
          type: "string"
          description: "Name of the webhook"
        "description":
          type: "string"
          description: "Description of the webhook"
        "triggers":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Extensions.Webhooks.WebhookTrigger"}
          description: "A list of triggers for this webhook"
        "urls":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Extensions.Webhooks.WebhookUrl"}
          description: "A list of URLs to which the webhook payload will be sent"
        "header":
          anyOf:
            - type: "object"
              unevaluatedProperties:
                type: "string"
            - type: "null"
          description: "Headers to be sent with the webhook"
        "filters":
          anyOf:
            - {"$ref": "#/components/schemas/V3.Extensions.Webhooks.WebhookFilter"}
            - type: "null"
          description: "Filters to apply to the webhook"
        "max_retry":
          type: "integer"
          format: "uint8"
          description: "Maximum number of retries for the webhook"
        "teams":
          anyOf:
            - type: "array"
              items:
                type: "string"
            - type: "null"
          description: "List of team IDs to which this webhook is applicable"
        "is_all_teams_configured":
          type: "boolean"
          description: "Set to true if the webhook is configured for all teams"
        "custom_payload_template_slug":
          type: "string"
          description: "Slug of the custom payload template"
        "language":
          type: "string"
          description: "Language for the webhook payload"
        "mail_ids":
          anyOf:
            - type: "array"
              items:
                type: "string"
            - type: "null"
          description: "List of email IDs for notification"
        "trigger_type":
          type: "string"
          description: "Type of trigger"
        "custom_payload":
          type: "string"
          description: "Custom payload for the webhook"
        "payload_type":
          type: "string"
          description: "Type of payload"
    "V3.Extensions.Webhooks.WebhookErrorMeta":
      type: "object"
      required:
        - "status"
        - "error_message"
      properties:
        "status":
          anyOf:
            - type: "integer"
            - type: "string"
        "error_message":
          type: "string"
    "V3.Extensions.Webhooks.WebhookErrorResponse":
      type: "object"
      required:
        - "meta"
      properties:
        "meta": {"$ref": "#/components/schemas/V3.Extensions.Webhooks.WebhookErrorMeta"}
    "V3.Extensions.Webhooks.WebhookFilter":
      type: "object"
      required:
        - "op"
        - "conditions"
      properties:
        "op":
          type: "string"
        "conditions":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Extensions.Webhooks.WebhookFilterCondition"}
    "V3.Extensions.Webhooks.WebhookFilterCondition":
      type: "object"
      properties:
        "op":
          type: "string"
        "lhs":
          type: "string"
        "rhs":
          type: "string"
    "V3.Extensions.Webhooks.WebhookListItem":
      type: "object"
      required:
        - "id"
        - "name"
        - "description"
        - "trigger_type"
        - "payload_type"
        - "custom_payload_template_name"
      properties:
        "id":
          type: "string"
        "name":
          type: "string"
        "description":
          type: "string"
        "trigger_type":
          type: "string"
        "payload_type":
          type: "string"
        "custom_payload_template_name":
          type: "string"
    "V3.Extensions.Webhooks.WebhookResponse":
      type: "object"
      required:
        - "id"
        - "created_at"
        - "updated_at"
        - "author_id"
        - "slug"
      properties:
        "id":
          type: "string"
        "created_at":
          type: "string"
        "updated_at":
          type: "string"
        "organization_id":
          type: "string"
        "author_id":
          type: "string"
        "slug":
          type: "string"
        "version":
          type: "string"
      allOf:
        - {"$ref": "#/components/schemas/V3.Extensions.Webhooks.Webhook"}
    "V3.Extensions.Webhooks.WebhookTrigger":
      type: "object"
      required:
        - "event_class"
        - "event_type"
      properties:
        "event_class":
          type: "string"
        "event_type":
          type: "string"
    "V3.Extensions.Webhooks.WebhookUrl":
      type: "object"
      properties:
        "url":
          type: "string"
        "method":
          type: "string"
    "V3.GlobalEventRules.CreateGlobalEventRuleRequest":
      type: "object"
      required:
        - "name"
        - "description"
        - "owner_id"
        - "entity_owner"
      properties:
        "name":
          type: "string"
        "description":
          type: "string"
        "owner_id":
          type: "string"
        "entity_owner": {"$ref": "#/components/schemas/V3.GlobalEventRules.EntityOwner"}
    "V3.GlobalEventRules.CreateGlobalEventRuleResponse":
      type: "object"
      required:
        - "org_id"
      properties:
        "org_id":
          type: "string"
      allOf:
        - {"$ref": "#/components/schemas/V3.GlobalEventRules.CreatedGlobalEventRule"}
    "V3.GlobalEventRules.CreateOrUpdateRuleRequest":
      type: "object"
      required:
        - "description"
        - "expression"
        - "action"
      properties:
        "description":
          type: "string"
        "expression":
          type: "string"
        "action": {"$ref": "#/components/schemas/V3.GlobalEventRules.RuleAction"}
    "V3.GlobalEventRules.CreateRulesetRequest":
      type: "object"
      required:
        - "alert_source_shortname"
        - "alert_source_version"
      properties:
        "alert_source_shortname":
          type: "string"
        "alert_source_version":
          type: "string"
        "catch_all_action": {"$ref": "#/components/schemas/V3.GlobalEventRules.RuleAction"}
    "V3.GlobalEventRules.CreatedGlobalEventRule":
      type: "object"
      required:
        - "id"
        - "owner_id"
        - "name"
        - "description"
        - "routing_key"
        - "created_at"
        - "created_by"
        - "updated_at"
        - "updated_by"
      properties:
        "id":
          type: "integer"
        "owner_id":
          type: "string"
        "name":
          type: "string"
        "description":
          type: "string"
        "routing_key":
          type: "string"
        "entity_owner": {"$ref": "#/components/schemas/V3.GlobalEventRules.EntityOwner"}
        "rulesets":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.GlobalEventRules.Ruleset"}
        "created_at":
          type: "string"
          format: "date-time"
        "created_by":
          type: "string"
        "updated_at":
          type: "string"
          format: "date-time"
        "updated_by":
          type: "string"
    "V3.GlobalEventRules.CreatedGlobalEventRuleResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.GlobalEventRules.CreatedGlobalEventRule"}
    "V3.GlobalEventRules.EntityOwner":
      type: "object"
      required:
        - "id"
        - "type"
      properties:
        "id":
          type: "string"
        "type":
          type: "string"
          enum:
            - "team"
            - "user"
            - "squad"
    "V3.GlobalEventRules.EntityOwnerUpdate":
      type: "object"
      properties:
        "id":
          type: "string"
        "type":
          type: "string"
          enum:
            - "team"
            - "user"
            - "squad"
    "V3.GlobalEventRules.GlobalEventRule":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.GlobalEventRules.CreatedGlobalEventRule"}
    "V3.GlobalEventRules.GlobalEventRuleInList":
      type: "object"
      properties:
        "id":
          type: "integer"
        "org_id":
          type: "string"
        "team_id":
          type: "string"
        "name":
          type: "string"
        "description":
          type: "string"
        "routing_key":
          type: "string"
        "entity_owner": {"$ref": "#/components/schemas/V3.GlobalEventRules.EntityOwner"}
        "rulesets":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.GlobalEventRules.Ruleset"}
        "created_at":
          type: "string"
          format: "date-time"
        "created_by":
          type: "string"
        "updated_at":
          type: "string"
          format: "date-time"
        "updated_by":
          type: "string"
    "V3.GlobalEventRules.GlobalEventRuleResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.GlobalEventRules.GlobalEventRule"}
    "V3.GlobalEventRules.Ordering":
      type: "object"
      required:
        - "ordering"
      properties:
        "ordering":
          type: "array"
          items:
            type: "integer"
    "V3.GlobalEventRules.OrderingResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.GlobalEventRules.Ordering"}
    "V3.GlobalEventRules.ReorderRuleRequest":
      type: "object"
      properties:
        "shift_to":
          type: "string"
        "shift_index_by":
          type: "integer"
    "V3.GlobalEventRules.ReorderRulesetRequest":
      type: "object"
      properties:
        "ordering":
          type: "array"
          items:
            type: "integer"
    "V3.GlobalEventRules.RuleAction":
      type: "object"
      required:
        - "route_to"
      properties:
        "route_to":
          type: "string"
          description: "The service ID to which the alert should be routed."
    "V3.GlobalEventRules.RuleActionUpdate":
      type: "object"
      properties:
        "route_to":
          type: "string"
          description: "The service ID to which the alert should be routed."
    "V3.GlobalEventRules.Ruleset":
      type: "object"
      properties:
        "id":
          type: "integer"
        "global_event_rule_id":
          type: "integer"
        "alert_source_shortname":
          type: "string"
        "alert_source_version":
          type: "string"
        "ordering":
          type: "array"
          items:
            type: "integer"
        "catch_all_action": {"$ref": "#/components/schemas/V3.GlobalEventRules.RuleAction"}
        "created_at":
          type: "string"
          format: "date-time"
        "created_by":
          type: "string"
        "updated_at":
          type: "string"
          format: "date-time"
        "updated_by":
          type: "string"
    "V3.GlobalEventRules.RulesetResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.GlobalEventRules.Ruleset"}
    "V3.GlobalEventRules.RulesetRule":
      type: "object"
      properties:
        "id":
          type: "integer"
        "global_event_rule_id":
          type: "integer"
        "description":
          type: "string"
        "expression":
          type: "string"
        "action": {"$ref": "#/components/schemas/V3.GlobalEventRules.RuleAction"}
        "created_at":
          type: "string"
          format: "date-time"
        "created_by":
          type: "string"
        "updated_at":
          type: "string"
          format: "date-time"
        "updated_by":
          type: "string"
    "V3.GlobalEventRules.RulesetRuleResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.GlobalEventRules.RulesetRule"}
    "V3.GlobalEventRules.UpdateGlobalEventRuleRequest":
      type: "object"
      properties:
        "name":
          type: "string"
        "description":
          type: "string"
        "entity_owner": {"$ref": "#/components/schemas/V3.GlobalEventRules.EntityOwnerUpdate"}
    "V3.GlobalEventRules.UpdateRuleRequest":
      type: "object"
      properties:
        "description":
          type: "string"
        "expression":
          type: "string"
        "action": {"$ref": "#/components/schemas/V3.GlobalEventRules.RuleActionUpdate"}
    "V3.GlobalEventRules.UpdateRulesetRequest":
      type: "object"
      properties:
        "catch_all_action": {"$ref": "#/components/schemas/V3.GlobalEventRules.RuleActionUpdate"}
    "V3.GlobalOncallReminderRules.CreateGlobalOncallReminderRulesRequest":
      type: "object"
      required:
        - "is_enabled"
        - "owner_id"
        - "rules"
      properties:
        "is_enabled":
          type: "boolean"
        "owner_id":
          type: "string"
        "rules":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.GlobalOncallReminderRules.Rule"}
    "V3.GlobalOncallReminderRules.GlobalOncallReminderRule":
      type: "object"
      required:
        - "id"
        - "is_enabled"
        - "owner_id"
        - "rules"
      properties:
        "id":
          type: "integer"
        "is_enabled":
          type: "boolean"
        "owner_id":
          type: "string"
        "rules":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.GlobalOncallReminderRules.Rule"}
    "V3.GlobalOncallReminderRules.GlobalOncallReminderRuleResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.GlobalOncallReminderRules.GlobalOncallReminderRule"}
    "V3.GlobalOncallReminderRules.Rule":
      type: "object"
      required:
        - "type"
        - "time"
      properties:
        "type":
          type: "string"
        "time":
          type: "integer"
    "V3.GlobalOncallReminderRules.UpdateGlobalOncallReminderRulesRequest":
      type: "object"
      required:
        - "is_enabled"
        - "rules"
      properties:
        "is_enabled":
          type: "boolean"
        "rules":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.GlobalOncallReminderRules.Rule"}
    "V3.Incidents.AdditionalResponderDetails":
      type: "object"
      required:
        - "id"
        - "type"
        - "timeOfAssignment"
        - "reason"
        - "name"
        - "last_notified_at"
      properties:
        "id":
          type: "string"
        "type":
          type: "string"
        "timeOfAssignment":
          type: "string"
          format: "date-time"
        "reason":
          type: "string"
        "name":
          type: "string"
        "last_notified_at":
          type: "string"
          format: "date-time"
      description: "Details for an additional responder."
    "V3.Incidents.AdditionalResponders.AddAdditionalRespondersRequest":
      type: "object"
      required:
        - "additional_responders"
      properties:
        "additional_responders":
          type: "array"
          items:
            type: "object"
            properties:
              "id":
                type: "string"
              "type":
                type: "string"
            required:
              - "id"
              - "type"
      description: "Request body for adding additional responders to an incident."
    "V3.Incidents.AdditionalResponders.AdditionalResponder":
      type: "object"
      required:
        - "id"
        - "type"
      properties:
        "id":
          type: "string"
        "type":
          type: "string"
        "name":
          type: "string"
        "time_of_assignment":
          type: "string"
      description: "Represents an additional responder for an incident."
    "V3.Incidents.AdditionalResponders.AdditionalResponderResponse":
      type: "object"
      required:
        - "additional_responders"
      properties:
        "additional_responders":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Incidents.AdditionalResponders.AdditionalResponder"}
    "V3.Incidents.Analytics":
      type: "object"
      required:
        - "tta"
        - "ttr"
      properties:
        "tta": {"$ref": "#/components/schemas/V3.Incidents.AnalyticsMetrics"}
        "ttr": {"$ref": "#/components/schemas/V3.Incidents.AnalyticsMetrics"}
      description: "Incident analytics data."
    "V3.Incidents.AnalyticsMetrics":
      type: "object"
      required:
        - "time"
        - "userId"
        - "escalationPolicyId"
        - "squadId"
      properties:
        "time":
          type: "integer"
        "userId":
          type: "string"
        "escalationPolicyId":
          type: "string"
        "squadId":
          type: "string"
      description: "Analytics metrics for TTA (Time to Acknowledge) and TTR (Time to Resolve)."
    "V3.Incidents.Apta.Message":
      type: "object"
      required:
        - "message"
      properties:
        "message":
          type: "string"
    "V3.Incidents.Apta.MessageResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Incidents.Apta.Message"}
    "V3.Incidents.AssignTo":
      type: "object"
      required:
        - "id"
      properties:
        "id":
          type: "string"
        "type":
          type: "string"
      description: "Represents the assignment target for delayed notifications."
    "V3.Incidents.AssignedTo":
      type: "object"
      required:
        - "id"
        - "type"
        - "timeOfAssignment"
        - "reason"
      properties:
        "id":
          type: "string"
        "type":
          type: "string"
        "timeOfAssignment":
          type: "string"
          format: "date-time"
        "reason":
          type: "string"
      description: "Schema for an assigned entity in an incident."
    "V3.Incidents.AttachedRunbook":
      type: "object"
      required:
        - "runbook_id"
        - "name"
        - "steps"
      properties:
        "runbook_id":
          type: "string"
        "name":
          type: "string"
        "steps":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Incidents.Step"}
    "V3.Incidents.BulkIncidentIDsRequest":
      type: "object"
      required:
        - "incident_ids"
      properties:
        "incident_ids":
          type: "array"
          items:
            type: "string"
      description: "Request body for bulk incident operations (acknowledge, resolve)."
    "V3.Incidents.BulkIncidentsPriorityUpdateRequest":
      type: "object"
      required:
        - "incident_ids"
        - "priority"
      properties:
        "incident_ids":
          type: "array"
          items:
            type: "string"
        "priority":
          type: "string"
      description: "Request body for bulk updating incident priority."
    "V3.Incidents.CommunicationCards.ArchiveSlackChannelRequest":
      type: "object"
      required:
        - "slack_channel_id"
      properties:
        "slack_channel_id":
          type: "string"
      description: "Request body for archiving a Slack channel."
    "V3.Incidents.CommunicationCards.CommunicationCard":
      type: "object"
      required:
        - "created_at"
        - "updated_at"
        - "deleted_at"
        - "id"
        - "incident_id"
        - "url"
        - "type"
        - "title"
        - "channel_id"
        - "archived_at"
      properties:
        "created_at":
          type: "string"
        "updated_at":
          type: "string"
        "deleted_at": {}
        "id":
          type: "integer"
        "incident_id":
          type: "string"
        "url":
          type: "string"
        "type":
          type: "string"
        "title":
          type: "string"
        "channel_id":
          type: "string"
        "archived_at": {}
      description: "Represents a communication card."
    "V3.Incidents.CommunicationCards.CommunicationCardResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Incidents.CommunicationCards.CommunicationCard"}
    "V3.Incidents.CommunicationCards.CreateCommunicationCardRequest":
      type: "object"
      required:
        - "type"
        - "url"
        - "title"
      properties:
        "type":
          type: "string"
        "url":
          type: "string"
        "title":
          type: "string"
      description: "Request body for creating a communication card."
    "V3.Incidents.CommunicationCards.CreateSlackChannelRequest":
      type: "object"
      required:
        - "channel_name"
        - "incident_id"
      properties:
        "channel_name":
          type: "string"
        "incident_id":
          type: "string"
      description: "Request body for creating a Slack channel in a communication card."
    "V3.Incidents.CommunicationCards.UpdateCommunicationCardRequest":
      type: "object"
      required:
        - "title"
        - "type"
        - "url"
      properties:
        "title":
          type: "string"
        "type":
          type: "string"
        "url":
          type: "string"
      description: "Request body for updating a communication card."
    "V3.Incidents.DedupData":
      type: "object"
      properties:
        "key":
          type: "string"
        "hash":
          type: "string"
      description: "Deduplication data for an incident."
    "V3.Incidents.Export":
      type: "object"
      required:
        - "id"
        - "organization_id"
        - "team_id"
        - "created_at"
        - "updated_at"
        - "requested_by"
        - "type"
        - "status"
        - "download_url"
        - "format"
        - "start_time"
        - "end_time"
        - "incidents_filter"
        - "on_call_hours_filter"
        - "additionalInfo"
        - "error_message"
      properties:
        "id":
          type: "string"
        "organization_id":
          type: "string"
        "team_id":
          type: "string"
        "status_page_id":
          type: "integer"
        "created_at":
          type: "string"
          format: "date-time"
        "updated_at":
          type: "string"
          format: "date-time"
        "requested_by":
          type: "string"
        "type": {"$ref": "#/components/schemas/V3.Incidents.ExportType"}
        "status": {"$ref": "#/components/schemas/V3.Incidents.ExportStatus"}
        "download_url":
          type: "string"
        "format": {"$ref": "#/components/schemas/V3.Incidents.ExportFormat"}
        "start_time":
          type: "string"
          format: "date-time"
        "end_time":
          type: "string"
          format: "date-time"
        "incidents_filter": {"$ref": "#/components/schemas/V3.Incidents.ExportIncidentsFilter"}
        "on_call_hours_filter": {"$ref": "#/components/schemas/V3.Incidents.ExportOnCallHoursFilter"}
        "additionalInfo":
          type: "object"
          unevaluatedProperties: {}
        "error_message":
          type: "string"
      description: "Represents an export record."
    "V3.Incidents.ExportFormat":
      type: "string"
      enum:
        - "json"
        - "csv"
      description: "Defines the format of the export."
    "V3.Incidents.ExportIncidentsCSVFields":
      type: "object"
      required:
        - "id"
        - "title"
        - "description"
        - "status"
        - "service"
        - "alert_source"
        - "assignee"
        - "created_at"
        - "acknowledged_at"
        - "resolved_at"
        - "slo_name"
        - "slis"
        - "error_budget_spent"
        - "tags"
        - "event_count"
        - "tta"
        - "ttr"
        - "children"
        - "logs"
        - "url"
        - "priority"
        - "attached_runbooks"
        - "incident_tasks"
        - "incident_tasks_total_count"
        - "incident_tasks_open_count"
        - "incident_tasks_closed_count"
        - "incident_tasks_count"
      properties:
        "id":
          type: "string"
        "title":
          type: "string"
        "description":
          type: "string"
        "status":
          type: "string"
        "service":
          type: "string"
        "alert_source":
          type: "string"
        "assignee":
          type: "string"
        "created_at":
          type: "string"
          format: "date-time"
        "acknowledged_at":
          type: "string"
          format: "date-time"
        "resolved_at":
          type: "string"
          format: "date-time"
        "slo_name":
          type: "string"
        "slis":
          type: "array"
          items:
            type: "string"
        "error_budget_spent":
          type: "number"
          format: "float"
        "tags":
          type: "object"
          unevaluatedProperties: {"$ref": "#/components/schemas/V3.Incidents.TagConfigObject"}
        "event_count":
          type: "integer"
        "tta":
          type: "integer"
        "ttr":
          type: "integer"
        "children":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Incidents.MergeIncidentEntityReference"}
        "logs":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Incidents.Logs"}
        "url":
          type: "string"
        "priority":
          type: "string"
        "attached_runbooks":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Incidents.AttachedRunbook"}
        "incident_tasks":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Incidents.IncidentTasks"}
        "incident_tasks_total_count":
          type: "integer"
        "incident_tasks_open_count":
          type: "integer"
        "incident_tasks_closed_count":
          type: "integer"
        "incident_tasks_count": {"$ref": "#/components/schemas/V3.Incidents.IncidentTasksCount"}
      description: "Represents the fields for an incidents CSV export."
    "V3.Incidents.ExportIncidentsFilter":
      type: "object"
      required:
        - "services"
        - "sources"
        - "serviceOwner"
        - "assigned_to"
        - "assignedToUserIDsAndTheirSquads"
        - "statuses"
        - "priority"
        - "tags"
        - "notes"
      properties:
        "services":
          type: "array"
          items:
            type: "string"
        "sources":
          type: "array"
          items:
            type: "string"
        "serviceOwner": {"$ref": "#/components/schemas/V3.Incidents.ServiceOwnerFilter"}
        "assigned_to":
          type: "array"
          items:
            type: "string"
        "assignedToUserIDsAndTheirSquads":
          type: "array"
          items:
            type: "string"
        "statuses":
          type: "array"
          items:
            type: "string"
        "priority":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Incidents.IncidentPriority"}
        "tags":
          type: "array"
          items:
            type: "string"
        "notes":
          type: "string"
      description: "Filter criteria for incidents in an export."
    "V3.Incidents.ExportOnCallHoursFilter":
      type: "object"
      required:
        - "schedule_ids"
        - "schedule_owner"
      properties:
        "schedule_ids":
          type: "array"
          items:
            type: "string"
        "schedule_owner":
          type: "array"
          items:
            type: "string"
      description: "Filter criteria for on-call hours in an export."
    "V3.Incidents.ExportStatus":
      type: "string"
      enum:
        - "pending"
        - "running"
        - "completed"
        - "failed"
      description: "Defines the status of an export job."
    "V3.Incidents.ExportType":
      type: "string"
      enum:
        - "incidents"
        - "statuspage-subscribers"
        - "schedules-on-call-hours-per-user"
      description: "Defines the type of data being exported."
    "V3.Incidents.Incident":
      type: "object"
      required:
        - "id"
        - "service_id"
        - "alert_source_id"
        - "organization_id"
        - "incidentNumber"
        - "message"
        - "assignedTo"
        - "additional_responders"
        - "description"
        - "status"
        - "timeOfCreation"
        - "updated_at"
        - "tags"
        - "logs"
        - "analytics"
        - "pinned_messages"
        - "deleted"
        - "event_count"
        - "dedup_data"
        - "owner"
        - "access_control"
        - "relevantUsers"
        - "relevantEscalationPolicies"
        - "relevantSquads"
        - "relevantSchedules"
        - "relevantPeopleLogs"
        - "responseNotes"
        - "attachments"
        - "is_child"
        - "children"
        - "did_auto_pause"
        - "did_auto_pause_timeout"
        - "auto_pause_ends_at"
        - "manually_marked_transient_alert_feedback_type"
        - "classification_id"
        - "grouped_alert_count"
        - "has_priority"
        - "snooze_details"
        - "did_notification_delay"
        - "notification_delay_policy"
        - "digest_id"
      properties:
        "id":
          type: "string"
        "service_id":
          type: "string"
        "alert_source_id":
          type: "string"
        "organization_id":
          type: "string"
        "slo_id":
          type: "integer"
        "incidentNumber":
          type: "integer"
        "message":
          type: "string"
        "assignedTo":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Incidents.AssignedTo"}
        "additional_responders":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Incidents.AdditionalResponderDetails"}
        "description":
          type: "string"
        "status":
          type: "string"
        "timeOfCreation":
          type: "string"
          format: "date-time"
        "updated_at":
          type: "string"
          format: "date-time"
        "last_acknowledged_at":
          anyOf:
            - type: "string"
              format: "date-time"
            - type: "null"
        "tags":
          type: "object"
          unevaluatedProperties: {"$ref": "#/components/schemas/V3.Incidents.TagConfigObject"}
        "logs":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Incidents.Logs"}
        "analytics": {"$ref": "#/components/schemas/V3.Incidents.Analytics"}
        "pinned_messages":
          anyOf:
            - type: "array"
              items: {"$ref": "#/components/schemas/V3.Incidents.PinnedMessage"}
            - type: "null"
        "created_by":
          type: "string"
        "sender_email":
          type: "string"
        "deleted":
          type: "boolean"
        "event_count":
          type: "integer"
        "dedup_data": {"$ref": "#/components/schemas/V3.Incidents.DedupData"}
        "owner": {"$ref": "#/components/schemas/Common.V3.RBACOwner"}
        "access_control":
          anyOf:
            - type: "array"
              items: {"$ref": "#/components/schemas/Common.V3.RBACEntityPermission"}
            - type: "null"
        "relevantUsers":
          anyOf:
            - type: "array"
              items:
                type: "string"
            - type: "null"
        "relevantEscalationPolicies":
          anyOf:
            - type: "array"
              items:
                type: "string"
            - type: "null"
        "relevantSquads":
          anyOf:
            - type: "array"
              items:
                type: "string"
            - type: "null"
        "relevantSchedules":
          anyOf:
            - type: "array"
              items:
                type: "string"
            - type: "null"
        "relevantPeopleLogs":
          anyOf:
            - type: "array"
              items: {"$ref": "#/components/schemas/V3.Incidents.RelevantPeopleLog"}
            - type: "null"
        "responseNotes":
          anyOf:
            - type: "array"
              items: {"$ref": "#/components/schemas/V3.Incidents.ResponseNote"}
            - type: "null"
        "attachments":
          anyOf:
            - type: "array"
              items:
                type: "string"
            - type: "null"
        "retriggerPolicy":
          anyOf:
            - type: "object"
              properties:
                "escalationPolicyId":
                  type: "string"
                "retriggerAt":
                  type: "string"
                  format: "date-time"
                "retriggeredAt":
                  type: "string"
                  format: "date-time"
              required:
                - "escalationPolicyId"
            - type: "null"
        "webform_id":
          type: "integer"
        "webform_submission_id":
          type: "integer"
        "is_child":
          type: "boolean"
        "parent": {"$ref": "#/components/schemas/V3.Incidents.MergeIncidentEntityReference"}
        "children":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Incidents.MergeIncidentEntityReference"}
        "did_auto_pause":
          type: "boolean"
        "did_auto_pause_timeout":
          type: "boolean"
        "auto_pause_ends_at":
          type: "string"
          format: "date-time"
        "manually_marked_transient_alert_feedback_type":
          type: "string"
        "classification_id":
          type: "integer"
        "grouped_alert_count":
          type: "integer"
        "priority": {"$ref": "#/components/schemas/V3.Incidents.IncidentPriority"}
        "has_priority":
          type: "boolean"
        "snooze_details": {"$ref": "#/components/schemas/V3.Incidents.SnoozeDetails"}
        "did_notification_delay":
          type: "boolean"
        "notification_delay_policy": {"$ref": "#/components/schemas/V3.Incidents.NotificationDelayPolicy"}
        "digest_id":
          type: "string"
      description: "Represents an incident."
    "V3.Incidents.IncidentActions.CircleCIErrorMeta":
      type: "object"
      required:
        - "status_code"
        - "error_message"
      properties:
        "status_code":
          type: "integer"
        "error_message":
          type: "string"
      description: "Represents the metadata for a CircleCI error response."
    "V3.Incidents.IncidentActions.CircleCIRebuildResponse":
      type: "object"
      required:
        - "action_id"
        - "circleci_response"
      properties:
        "action_id":
          type: "string"
        "circleci_response":
          type: "object"
          properties:
            "username":
              type: "string"
            "reponame":
              type: "string"
            "build_num":
              type: "integer"
            "build_url":
              type: "string"
            "build_parameters":
              type: "object"
              properties:
                "CIRCLE_JOB":
                  type: "string"
              required:
                - "CIRCLE_JOB"
            "previous":
              type: "object"
              properties:
                "build_num":
                  type: "integer"
                "build_time_millis":
                  type: "integer"
                "status":
                  type: "string"
              required:
                - "build_num"
                - "build_time_millis"
                - "status"
            "previous_successful_build":
              type: "object"
              properties:
                "build_num":
                  type: "integer"
                "build_time_millis":
                  type: "integer"
                "status":
                  type: "string"
              required:
                - "build_num"
                - "build_time_millis"
                - "status"
            "retry_of":
              type: "integer"
            "body":
              type: "string"
            "subject":
              type: "string"
            "status":
              type: "string"
            "lifecycle":
              type: "string"
            "outcome":
              type: "string"
            "committer_date":
              type: "string"
            "committer_email":
              type: "string"
            "committer_name":
              type: "string"
            "author_date":
              type: "string"
            "author_email":
              type: "string"
            "author_name":
              type: "string"
            "branch":
              type: "string"
            "vcs_type":
              type: "string"
            "vcs_url":
              type: "string"
            "start_time":
              type: "string"
            "stop_time":
              type: "string"
          required:
            - "username"
            - "reponame"
            - "build_num"
            - "build_url"
            - "build_parameters"
            - "previous"
            - "previous_successful_build"
            - "retry_of"
            - "body"
            - "subject"
            - "status"
            - "lifecycle"
            - "outcome"
            - "committer_date"
            - "committer_email"
            - "committer_name"
            - "author_date"
            - "author_email"
            - "author_name"
            - "branch"
            - "vcs_type"
            - "vcs_url"
            - "start_time"
            - "stop_time"
      description: "Represents the response structure for rebuilding a project in CircleCI."
    "V3.Incidents.IncidentActions.IncidentActionErrorMeta":
      type: "object"
      required:
        - "status"
        - "error_message"
      properties:
        "status":
          type: "integer"
        "error_message":
          type: "string"
      description: "Represents the metadata for a generic incident action error response."
    "V3.Incidents.IncidentActions.IncidentActionErrorResponse":
      type: "object"
      required:
        - "body"
      properties:
        "body":
          type: "object"
          properties:
            "meta": {"$ref": "#/components/schemas/V3.Incidents.IncidentActions.IncidentActionErrorMeta"}
          required:
            - "meta"
      description: "Represents a generic incident action error response for a 400 status code."
    "V3.Incidents.IncidentActions.RebuildCircleCIProjectRequest":
      type: "object"
      required:
        - "vcs_type"
        - "username"
        - "reponame"
      properties:
        "vcs_type":
          type: "string"
        "username":
          type: "string"
        "reponame":
          type: "string"
      description: "Request body for rebuilding a project in CircleCI."
    "V3.Incidents.IncidentActions.WebhookActionResponse":
      type: "object"
      required:
        - "id"
        - "created_at"
        - "updated_at"
        - "version"
        - "organization_id"
        - "author_id"
        - "name"
        - "slug"
        - "description"
        - "triggers"
        - "urls"
        - "teams"
        - "is_all_teams_configured"
        - "custom_payload_template_slug"
        - "header"
        - "filters"
        - "trigger_type"
        - "language"
        - "max_retry"
        - "mail_ids"
        - "payload_type"
        - "custom_payload"
      properties:
        "id":
          type: "string"
        "created_at":
          type: "string"
        "updated_at":
          type: "string"
        "version":
          type: "string"
        "organization_id":
          type: "string"
        "author_id":
          type: "string"
        "name":
          type: "string"
        "slug":
          type: "string"
        "description":
          type: "string"
        "triggers":
          type: "array"
          items:
            type: "string"
        "urls":
          type: "array"
          items:
            type: "object"
            properties:
              "url":
                type: "string"
              "method":
                type: "string"
        "teams":
          type: "array"
          items:
            type: "string"
        "is_all_teams_configured":
          type: "boolean"
        "custom_payload_template_slug":
          type: "string"
        "header":
          type: "object"
          properties:
            "Content-Type":
              type: "string"
          required:
            - "Content-Type"
        "filters": {}
        "trigger_type":
          type: "string"
        "language":
          type: "string"
        "max_retry":
          type: "integer"
        "mail_ids":
          type: "array"
          items:
            type: "string"
        "payload_type":
          type: "string"
        "custom_payload":
          type: "string"
      description: "Represents the response structure for triggering a webhook manually."
    "V3.Incidents.IncidentEvent":
      type: "object"
      required:
        - "incident_id"
        - "alert_source_id"
        - "message"
        - "description"
        - "time_of_creation"
        - "tags"
        - "payload"
      properties:
        "incident_id":
          type: "string"
        "alert_source_id":
          type: "string"
        "message":
          type: "string"
        "description":
          type: "string"
        "time_of_creation":
          type: "string"
          format: "date-time"
        "tags":
          anyOf:
            - type: "object"
              unevaluatedProperties: {}
            - type: "null"
        "deduplication_reason":
          type: "object"
          properties:
            "matched_event_id":
              type: "string"
            "evaluated_expression":
              type: "string"
            "time_window":
              type: "integer"
          required:
            - "matched_event_id"
            - "evaluated_expression"
            - "time_window"
        "payload":
          type: "object"
          unevaluatedProperties: {}
      description: "Represents an incident event."
    "V3.Incidents.IncidentEventResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Incidents.IncidentEvent"}
    "V3.Incidents.IncidentExportAsyncRequest":
      type: "object"
      required:
        - "owner_id"
        - "type"
        - "start_time"
        - "end_time"
        - "incident_filters"
      properties:
        "owner_id":
          type: "string"
        "type":
          allOf:
            - {"$ref": "#/components/schemas/V3.Incidents.ExportFormat"}
          description: "Type of export, can be csv or json"
        "start_time":
          type: "string"
          format: "date-time"
        "end_time":
          type: "string"
          format: "date-time"
        "incident_filters": {"$ref": "#/components/schemas/V3.Incidents.ExportIncidentsFilter"}
      description: "Request body for async incident export."
    "V3.Incidents.IncidentExportAsyncResponse":
      type: "object"
      required:
        - "message"
        - "request_id"
      properties:
        "message":
          type: "string"
        "request_id":
          type: "string"
    "V3.Incidents.IncidentPriority":
      type: "string"
      enum:
        - "P1"
        - "P2"
        - "P3"
        - "P4"
        - "P5"
      description: "Represents the priority of an incident."
    "V3.Incidents.IncidentPriorityUpdateRequest":
      type: "object"
      properties:
        "priority":
          type: "string"
      description: "Request body for updating incident priority."
    "V3.Incidents.IncidentPriorityUpdateResponse":
      type: "object"
      required:
        - "incident_id"
        - "priority"
      properties:
        "incident_id":
          type: "string"
        "priority":
          type: "string"
    "V3.Incidents.IncidentResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Incidents.Incident"}
    "V3.Incidents.IncidentTasks":
      type: "object"
      required:
        - "id"
        - "incident_id"
        - "tasks"
        - "deleted"
        - "deleted_at"
      properties:
        "id":
          type: "string"
        "incident_id":
          type: "string"
        "tasks":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Incidents.Task"}
        "deleted":
          type: "boolean"
        "deleted_at":
          type: "string"
          format: "date-time"
      description: "Represents incident tasks."
    "V3.Incidents.IncidentTasksCount":
      type: "object"
      required:
        - "total"
        - "open"
        - "completed"
      properties:
        "total":
          type: "integer"
        "open":
          type: "integer"
        "completed":
          type: "integer"
      description: "Represents the count of incident tasks."
    "V3.Incidents.IndividualRequestStatusResponse":
      type: "object"
      required:
        - "status"
      properties:
        "status": {"$ref": "#/components/schemas/V3.Incidents.RequestStatus"}
        "incident_id":
          type: "string"
        "event_id":
          type: "string"
      description: "Represents the status of a single ingestion request."
    "V3.Incidents.IngestionStatusRequest":
      type: "object"
      required:
        - "request_ids"
      properties:
        "request_ids":
          type: "array"
          items:
            type: "string"
      description: "Request body for getting ingestion status."
    "V3.Incidents.Logs":
      type: "object"
      required:
        - "action"
        - "time"
        - "reason"
      properties:
        "action":
          type: "string"
        "is_manually_created":
          type: "boolean"
        "created_by":
          type: "string"
        "updated_by":
          type: "string"
        "assignedTo":
          type: "string"
        "assignedBy":
          type: "string"
        "id":
          type: "string"
        "workflow_id":
          type: "integer"
        "time":
          type: "string"
          format: "date-time"
        "reason":
          type: "string"
        "additionalInfo":
          anyOf:
            - type: "object"
              unevaluatedProperties: {}
            - type: "null"
        "type":
          type: "string"
        "should_show_in_postmortem":
          type: "boolean"
      description: "Represents a log entry for an incident action."
    "V3.Incidents.MergeIncidentEntityReference":
      type: "object"
      required:
        - "id"
      properties:
        "id":
          type: "string"
      description: "Reference to a merged incident entity."
    "V3.Incidents.Notes.CreateNoteRequest":
      type: "object"
      required:
        - "message"
        - "attachments"
      properties:
        "message":
          type: "string"
        "attachments":
          type: "array"
          items:
            type: "string"
      description: "Request body for creating a new note."
    "V3.Incidents.Notes.Note":
      type: "object"
      required:
        - "id"
        - "created_at"
        - "updated_at"
        - "organization_id"
        - "incident_id"
        - "user_id"
        - "message"
        - "type"
        - "attachments"
        - "user"
        - "replaced_message"
      properties:
        "id":
          type: "string"
        "created_at":
          type: "string"
        "updated_at":
          type: "string"
        "organization_id":
          type: "string"
        "incident_id":
          type: "string"
        "user_id":
          type: "string"
        "message":
          type: "string"
        "type":
          type: "string"
        "attachments":
          type: "array"
          items:
            type: "string"
        "user":
          type: "object"
          properties:
            "id":
              type: "string"
            "first_name":
              type: "string"
            "last_name":
              type: "string"
            "deleted":
              type: "boolean"
          required:
            - "id"
            - "first_name"
            - "last_name"
            - "deleted"
        "replaced_message":
          type: "string"
      description: "Represents a note associated with an incident."
    "V3.Incidents.Notes.NoteResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Incidents.Notes.Note"}
    "V3.Incidents.Notes.UpdateNoteRequest":
      type: "object"
      required:
        - "message"
        - "attachments"
      properties:
        "message":
          type: "string"
        "attachments":
          type: "array"
          items:
            type: "string"
      description: "Request body for updating an existing note."
    "V3.Incidents.NotificationDelayPolicy":
      type: "object"
      required:
        - "is_notification_delayed"
        - "delayed_until"
        - "assign_to"
      properties:
        "is_notification_delayed":
          type: "boolean"
        "delayed_until":
          type: "string"
          format: "date-time"
        "assign_to": {"$ref": "#/components/schemas/V3.Incidents.AssignTo"}
      description: "Policy for delaying notifications."
    "V3.Incidents.PinnedMessage":
      type: "object"
      required:
        - "message"
        - "message_sender_id"
        - "time"
        - "time_of_pinning"
        - "message_id"
        - "message_pinned_by"
        - "message_sender_name"
      properties:
        "message":
          type: "string"
        "message_sender_id":
          type: "string"
        "time":
          type: "string"
          format: "date-time"
        "time_of_pinning":
          type: "string"
          format: "date-time"
        "message_id":
          type: "string"
        "message_pinned_by":
          type: "string"
        "message_sender_name":
          type: "string"
      description: "Represents a pinned message in the warroom."
    "V3.Incidents.Postmortems.CreatePostmortemRequest":
      type: "object"
      required:
        - "owner_id"
        - "title"
        - "postmortem"
        - "status"
        - "follow_ups"
        - "attachments"
      properties:
        "owner_id":
          type: "string"
        "title":
          type: "string"
        "postmortem":
          type: "string"
        "status": {"$ref": "#/components/schemas/V3.Incidents.Postmortems.PostmortemStatus"}
        "follow_ups":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Incidents.Postmortems.PostmortemFollowUp"}
        "attachments":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Incidents.Postmortems.PostmortemAttachmentRequest"}
      description: "Request body for creating a new postmortem."
    "V3.Incidents.Postmortems.Postmortem":
      type: "object"
      required:
        - "id"
        - "organization_id"
        - "incident_id"
        - "postmortem"
        - "follow_ups"
        - "created_at"
        - "title"
        - "status"
        - "owner"
        - "access_control"
      properties:
        "id":
          type: "string"
        "organization_id":
          type: "string"
        "incident_id":
          type: "string"
        "postmortem":
          type: "string"
        "follow_ups":
          anyOf:
            - type: "array"
              items: {"$ref": "#/components/schemas/V3.Incidents.Postmortems.PostmortemFollowUp"}
            - type: "null"
        "created_at":
          type: "string"
        "title":
          type: "string"
        "status": {"$ref": "#/components/schemas/V3.Incidents.Postmortems.PostmortemStatus"}
        "owner": {"$ref": "#/components/schemas/Common.V3.RBACOwner"}
        "access_control":
          type: "array"
          items: {"$ref": "#/components/schemas/Common.V3.RBACEntityPermission"}
        "attachments":
          anyOf:
            - type: "array"
              items:
                type: "string"
            - type: "null"
        "incident":
          type: "object"
          properties:
            "message":
              type: "string"
            "time_of_creation":
              type: "string"
          required:
            - "message"
            - "time_of_creation"
      description: "Represents a Postmortem in the system."
    "V3.Incidents.Postmortems.PostmortemAttachmentRequest":
      type: "object"
      properties:
        "key":
          type: "string"
        "mime_type":
          type: "string"
        "file_size":
          type: "string"
      description: "Represents an attachment in a postmortem request."
    "V3.Incidents.Postmortems.PostmortemFollowUp":
      type: "object"
      required:
        - "task"
        - "is_done"
      properties:
        "task":
          type: "string"
        "is_done":
          type: "boolean"
      description: "Represents a single follow-up task in a postmortem."
    "V3.Incidents.Postmortems.PostmortemListResult":
      type: "object"
      required:
        - "id"
        - "organization_id"
        - "incident_id"
        - "postmortem"
        - "follow_ups"
        - "created_at"
        - "title"
        - "status"
        - "owner"
        - "access_control"
        - "incident_message"
        - "incident_time_of_creation"
        - "service_name"
        - "service_id"
        - "alert_source"
        - "active_follow_ups_count"
      properties:
        "id":
          type: "string"
        "organization_id":
          type: "string"
        "incident_id":
          type: "string"
        "postmortem":
          type: "string"
        "follow_ups":
          anyOf:
            - type: "array"
              items: {"$ref": "#/components/schemas/V3.Incidents.Postmortems.PostmortemFollowUp"}
            - type: "null"
        "created_at":
          type: "string"
        "title":
          type: "string"
        "status": {"$ref": "#/components/schemas/V3.Incidents.Postmortems.PostmortemStatus"}
        "owner": {"$ref": "#/components/schemas/Common.V3.RBACOwner"}
        "access_control":
          type: "array"
          items: {"$ref": "#/components/schemas/Common.V3.RBACEntityPermission"}
        "attachments":
          anyOf:
            - type: "array"
              items:
                type: "string"
            - type: "null"
        "incident":
          type: "object"
          properties:
            "message":
              type: "string"
            "time_of_creation":
              type: "string"
          required:
            - "message"
            - "time_of_creation"
        "incident_message":
          type: "string"
        "incident_time_of_creation":
          type: "string"
        "service_name":
          type: "string"
        "service_id":
          type: "string"
        "alert_source":
          type: "string"
        "active_follow_ups_count":
          type: "integer"
      description: "Represents a single result in the postmortem list response."
    "V3.Incidents.Postmortems.PostmortemResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Incidents.Postmortems.Postmortem"}
    "V3.Incidents.Postmortems.PostmortemStatus":
      type: "string"
      enum:
        - "in_progress"
        - "under_review"
        - "published"
      description: "Represents the status of a postmortem."
    "V3.Incidents.Postmortems.TotalPostmortemCount":
      type: "object"
      required:
        - "count"
      properties:
        "count":
          type: "integer"
      description: "Represents the total count of postmortems."
    "V3.Incidents.Postmortems.UpdatePostmortemRequest":
      type: "object"
      properties:
        "owner_id":
          type: "string"
        "postmortem":
          type: "string"
        "follow_ups":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Incidents.Postmortems.PostmortemFollowUp"}
        "new_attachments":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Incidents.Postmortems.PostmortemAttachmentRequest"}
        "title":
          type: "string"
        "status": {"$ref": "#/components/schemas/V3.Incidents.Postmortems.PostmortemStatus"}
      description: "Request body for updating an existing postmortem."
    "V3.Incidents.ReassignIncidentRequest":
      type: "object"
      required:
        - "reassignTo"
      properties:
        "reassignTo":
          type: "object"
          properties:
            "id":
              type: "string"
            "type":
              type: "string"
          required:
            - "id"
            - "type"
      description: "Request body for reassigning an incident."
    "V3.Incidents.RelevantPeopleLog":
      type: "object"
      required:
        - "userId"
        - "actionTaken"
        - "actionTakenBy"
        - "actionTime"
      properties:
        "userId":
          type: "string"
        "actionTaken":
          type: "string"
        "actionTakenBy":
          type: "string"
        "actionTime":
          type: "string"
          format: "date-time"
      description: "Represents a relevant people log entry."
    "V3.Incidents.RequestStatus":
      type: "string"
      enum:
        - "created"
        - "deduplicated"
        - "suppressed"
        - "discarded"
        - "error"
      description: "Defines the status of an ingestion request."
    "V3.Incidents.ResolveIncidentRequest":
      type: "object"
      required:
        - "resolution_reason"
      properties:
        "resolution_reason":
          type: "object"
          properties:
            "message":
              type: "string"
          required:
            - "message"
      description: "Request body for resolving an incident."
    "V3.Incidents.ResponseNote":
      type: "object"
      required:
        - "timeOfNote"
        - "note"
        - "userId"
      properties:
        "timeOfNote":
          type: "string"
          format: "date-time"
        "note":
          type: "string"
        "userId":
          type: "string"
      description: "Represents a response note in an incident."
    "V3.Incidents.Runbooks.AttachRunbooksRequest":
      type: "object"
      required:
        - "runbooks"
      properties:
        "runbooks":
          type: "array"
          items:
            type: "string"
    "V3.Incidents.Runbooks.RunbookResponse":
      type: "object"
      required:
        - "incident_id"
        - "runbook_id"
        - "name"
        - "steps"
      properties:
        "id":
          type: "string"
        "incident_id":
          type: "string"
        "runbook_id":
          type: "string"
        "name":
          type: "string"
        "steps":
          type: "array"
          items:
            type: "object"
            properties:
              "content":
                type: "string"
              "completed":
                type: "boolean"
              "completed_at":
                type: "string"
                format: "date-time"
            required:
              - "content"
              - "completed"
        "deleted":
          type: "boolean"
        "deleted_at":
          type: "string"
          format: "date-time"
    "V3.Incidents.ServiceOwnerFilter":
      type: "object"
      required:
        - "userIDs"
        - "squadIDs"
      properties:
        "userIDs":
          type: "array"
          items:
            type: "string"
        "squadIDs":
          type: "array"
          items:
            type: "string"
        "userIDsAndTheirSquads":
          type: "array"
          items:
            type: "string"
      description: "Filter criteria for service owner in an export."
    "V3.Incidents.SnoozeDetails":
      type: "object"
      required:
        - "is_snoozed"
        - "start_time"
        - "end_time"
        - "total_time_in_mins"
      properties:
        "is_snoozed":
          type: "boolean"
        "start_time":
          anyOf:
            - type: "string"
              format: "date-time"
            - type: "null"
        "end_time":
          anyOf:
            - type: "string"
              format: "date-time"
            - type: "null"
        "total_time_in_mins":
          type: "integer"
      description: "Details about incident snoozing."
    "V3.Incidents.SnoozeNotifications.ReassignTo":
      type: "object"
      required:
        - "id"
        - "type"
      properties:
        "id":
          type: "string"
        "type":
          type: "string"
    "V3.Incidents.SnoozeNotifications.SnoozeIncidentRequest":
      type: "object"
      required:
        - "snooze_duration_in_mins"
      properties:
        "snooze_duration_in_mins":
          type: "integer"
          format: "int32"
    "V3.Incidents.SnoozeNotifications.SnoozeIncidentResponse":
      type: "object"
      required:
        - "incident_id"
        - "is_snoozed"
        - "snooze_end_time"
      properties:
        "incident_id":
          type: "string"
        "is_snoozed":
          type: "boolean"
        "snooze_end_time":
          type: "string"
    "V3.Incidents.SnoozeNotifications.UnsnoozeIncidentRequest":
      type: "object"
      required:
        - "reassign_to"
      properties:
        "reassign_to": {"$ref": "#/components/schemas/V3.Incidents.SnoozeNotifications.ReassignTo"}
    "V3.Incidents.SnoozeNotifications.UnsnoozeIncidentResponse":
      type: "object"
      required:
        - "incident_id"
        - "is_snoozed"
        - "reassign_to"
      properties:
        "incident_id":
          type: "string"
        "is_snoozed":
          type: "boolean"
        "reassign_to": {"$ref": "#/components/schemas/V3.Incidents.SnoozeNotifications.ReassignTo"}
    "V3.Incidents.Step":
      type: "object"
      required:
        - "content"
      properties:
        "content":
          type: "string"
          description: "The content of the step, in Markdown format."
      description: "Represents an attached runbook for export.Represents a single step in a runbook."
    "V3.Incidents.TagConfigObject":
      type: "object"
      required:
        - "value"
        - "color"
      properties:
        "value":
          type: "string"
        "color":
          type: "string"
      description: "Defines the value and color of a tag."
    "V3.Incidents.Tags.AdditionalResponderDetails":
      type: "object"
      required:
        - "id"
        - "type"
        - "timeOfAssignment"
        - "reason"
        - "name"
        - "last_notified_at"
      properties:
        "id":
          type: "string"
        "type":
          type: "string"
        "timeOfAssignment":
          type: "string"
          format: "date-time"
        "reason":
          type: "string"
        "name":
          type: "string"
        "last_notified_at":
          type: "string"
          format: "date-time"
      description: "Details for an additional responder."
    "V3.Incidents.Tags.Analytics":
      type: "object"
      required:
        - "tta"
        - "ttr"
      properties:
        "tta": {"$ref": "#/components/schemas/V3.Incidents.Tags.AnalyticsMetrics"}
        "ttr": {"$ref": "#/components/schemas/V3.Incidents.Tags.AnalyticsMetrics"}
      description: "Incident analytics data."
    "V3.Incidents.Tags.AnalyticsMetrics":
      type: "object"
      required:
        - "time"
        - "userId"
        - "escalationPolicyId"
        - "squadId"
      properties:
        "time":
          type: "integer"
        "userId":
          type: "string"
        "escalationPolicyId":
          type: "string"
        "squadId":
          type: "string"
      description: "Analytics metrics for TTA (Time to Acknowledge) and TTR (Time to Resolve)."
    "V3.Incidents.Tags.AppendTagRequest":
      type: "object"
      properties:
        "tags":
          type: "object"
          unevaluatedProperties: {"$ref": "#/components/schemas/V3.Incidents.Tags.TagUpdate"}
    "V3.Incidents.Tags.AssignTo":
      type: "object"
      required:
        - "id"
      properties:
        "id":
          type: "string"
        "type":
          type: "string"
      description: "Represents the assignment target for delayed notifications."
    "V3.Incidents.Tags.AssignedTo":
      type: "object"
      required:
        - "id"
        - "type"
        - "timeOfAssignment"
        - "reason"
      properties:
        "id":
          type: "string"
        "type":
          type: "string"
        "timeOfAssignment":
          type: "string"
          format: "date-time"
        "reason":
          type: "string"
    "V3.Incidents.Tags.DedupData":
      type: "object"
      properties:
        "key":
          type: "string"
        "hash":
          type: "string"
    "V3.Incidents.Tags.IncidentForTags":
      type: "object"
      required:
        - "id"
        - "service_id"
        - "alert_source_id"
        - "organization_id"
        - "incidentNumber"
        - "message"
        - "assignedTo"
        - "additional_responders"
        - "description"
        - "status"
        - "timeOfCreation"
        - "updated_at"
        - "tags"
        - "logs"
        - "analytics"
        - "pinned_messages"
        - "deleted"
        - "event_count"
        - "dedup_data"
        - "owner"
        - "access_control"
        - "relevantUsers"
        - "relevantEscalationPolicies"
        - "relevantSquads"
        - "relevantSchedules"
        - "relevantPeopleLogs"
        - "responseNotes"
        - "attachments"
        - "is_child"
        - "children"
        - "did_auto_pause"
        - "did_auto_pause_timeout"
        - "auto_pause_ends_at"
        - "manually_marked_transient_alert_feedback_type"
        - "classification_id"
        - "grouped_alert_count"
        - "has_priority"
        - "snooze_details"
        - "did_notification_delay"
        - "notification_delay_policy"
        - "digest_id"
      properties:
        "id":
          type: "string"
        "service_id":
          type: "string"
        "alert_source_id":
          type: "string"
        "organization_id":
          type: "string"
        "slo_id":
          type: "integer"
        "incidentNumber":
          type: "integer"
        "message":
          type: "string"
        "assignedTo":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Incidents.Tags.AssignedTo"}
        "additional_responders":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Incidents.Tags.AdditionalResponderDetails"}
        "description":
          type: "string"
        "status":
          type: "string"
        "timeOfCreation":
          type: "string"
          format: "date-time"
        "updated_at":
          type: "string"
          format: "date-time"
        "last_acknowledged_at":
          anyOf:
            - type: "string"
              format: "date-time"
            - type: "null"
        "tags":
          type: "object"
          unevaluatedProperties: {"$ref": "#/components/schemas/V3.Incidents.Tags.TagConfigObject"}
        "logs":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Incidents.Tags.Logs"}
        "analytics": {"$ref": "#/components/schemas/V3.Incidents.Tags.Analytics"}
        "pinned_messages":
          anyOf:
            - type: "array"
              items: {"$ref": "#/components/schemas/V3.Incidents.Tags.PinnedMessage"}
            - type: "null"
        "created_by":
          type: "string"
        "sender_email":
          type: "string"
        "deleted":
          type: "boolean"
        "event_count":
          type: "integer"
        "dedup_data": {"$ref": "#/components/schemas/V3.Incidents.Tags.DedupData"}
        "owner": {"$ref": "#/components/schemas/Common.V3.RBACOwner"}
        "access_control":
          anyOf:
            - type: "array"
              items: {"$ref": "#/components/schemas/Common.V3.RBACEntityPermission"}
            - type: "null"
        "relevantUsers":
          anyOf:
            - type: "array"
              items:
                type: "string"
            - type: "null"
        "relevantEscalationPolicies":
          anyOf:
            - type: "array"
              items:
                type: "string"
            - type: "null"
        "relevantSquads":
          anyOf:
            - type: "array"
              items:
                type: "string"
            - type: "null"
        "relevantSchedules":
          anyOf:
            - type: "array"
              items:
                type: "string"
            - type: "null"
        "relevantPeopleLogs":
          anyOf:
            - type: "array"
              items: {"$ref": "#/components/schemas/V3.Incidents.Tags.RelevantPeopleLog"}
            - type: "null"
        "responseNotes":
          anyOf:
            - type: "array"
              items: {"$ref": "#/components/schemas/V3.Incidents.Tags.ResponseNote"}
            - type: "null"
        "attachments":
          anyOf:
            - type: "array"
              items:
                type: "string"
            - type: "null"
        "retriggerPolicy":
          anyOf:
            - type: "object"
              properties:
                "escalationPolicyId":
                  type: "string"
                "retriggerAt":
                  type: "string"
                  format: "date-time"
                "retriggeredAt":
                  type: "string"
                  format: "date-time"
              required:
                - "escalationPolicyId"
            - type: "null"
        "webform_id":
          type: "integer"
        "webform_submission_id":
          type: "integer"
        "is_child":
          type: "boolean"
        "parent":
          anyOf:
            - {"$ref": "#/components/schemas/V3.Incidents.Tags.MergeIncidentEntityReference"}
            - type: "null"
        "children":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Incidents.Tags.MergeIncidentEntityReference"}
        "did_auto_pause":
          type: "boolean"
        "did_auto_pause_timeout":
          type: "boolean"
        "auto_pause_ends_at":
          type: "string"
          format: "date-time"
        "manually_marked_transient_alert_feedback_type":
          type: "string"
        "classification_id":
          type: "integer"
        "grouped_alert_count":
          type: "integer"
        "priority": {"$ref": "#/components/schemas/V3.Incidents.Tags.IncidentPriority"}
        "has_priority":
          type: "boolean"
        "snooze_details": {"$ref": "#/components/schemas/V3.Incidents.Tags.SnoozeDetails"}
        "did_notification_delay":
          type: "boolean"
        "notification_delay_policy": {"$ref": "#/components/schemas/V3.Incidents.Tags.NotificationDelayPolicy"}
        "digest_id":
          type: "string"
    "V3.Incidents.Tags.IncidentForTagsResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Incidents.Tags.IncidentForTags"}
    "V3.Incidents.Tags.IncidentPriority":
      type: "string"
      enum:
        - "P1"
        - "P2"
        - "P3"
        - "P4"
        - "P5"
      description: "Represents the priority of an incident."
    "V3.Incidents.Tags.Logs":
      type: "object"
      required:
        - "action"
        - "time"
        - "reason"
      properties:
        "action":
          type: "string"
        "is_manually_created":
          type: "boolean"
        "created_by":
          type: "string"
        "updated_by":
          type: "string"
        "assignedTo":
          type: "string"
        "assignedBy":
          type: "string"
        "id":
          type: "string"
        "workflow_id":
          type: "integer"
        "time":
          type: "string"
          format: "date-time"
        "reason":
          type: "string"
        "additionalInfo":
          anyOf:
            - type: "object"
              unevaluatedProperties: {}
            - type: "null"
        "type":
          type: "string"
        "should_show_in_postmortem":
          type: "boolean"
      description: "Represents a log entry for an incident action."
    "V3.Incidents.Tags.MergeIncidentEntityReference":
      type: "object"
      required:
        - "id"
      properties:
        "id":
          type: "string"
      description: "Reference to a merged incident entity."
    "V3.Incidents.Tags.NotificationDelayPolicy":
      type: "object"
      required:
        - "is_notification_delayed"
        - "delayed_until"
        - "assign_to"
      properties:
        "is_notification_delayed":
          type: "boolean"
        "delayed_until":
          type: "string"
          format: "date-time"
        "assign_to": {"$ref": "#/components/schemas/V3.Incidents.Tags.AssignTo"}
      description: "Policy for delaying notifications."
    "V3.Incidents.Tags.PinnedMessage":
      type: "object"
      required:
        - "message"
        - "message_sender_id"
        - "time"
        - "time_of_pinning"
        - "message_id"
        - "message_pinned_by"
        - "message_sender_name"
      properties:
        "message":
          type: "string"
        "message_sender_id":
          type: "string"
        "time":
          type: "string"
          format: "date-time"
        "time_of_pinning":
          type: "string"
          format: "date-time"
        "message_id":
          type: "string"
        "message_pinned_by":
          type: "string"
        "message_sender_name":
          type: "string"
      description: "Represents a pinned message in the warroom."
    "V3.Incidents.Tags.RelevantPeopleLog":
      type: "object"
      required:
        - "userId"
        - "actionTaken"
        - "actionTakenBy"
        - "actionTime"
      properties:
        "userId":
          type: "string"
        "actionTaken":
          type: "string"
        "actionTakenBy":
          type: "string"
        "actionTime":
          type: "string"
          format: "date-time"
      description: "Represents a relevant people log entry."
    "V3.Incidents.Tags.ResponseNote":
      type: "object"
      required:
        - "timeOfNote"
        - "note"
        - "userId"
      properties:
        "timeOfNote":
          type: "string"
          format: "date-time"
        "note":
          type: "string"
        "userId":
          type: "string"
      description: "Represents a response note in an incident."
    "V3.Incidents.Tags.SnoozeDetails":
      type: "object"
      required:
        - "is_snoozed"
        - "start_time"
        - "end_time"
        - "total_time_in_mins"
      properties:
        "is_snoozed":
          type: "boolean"
        "start_time":
          anyOf:
            - type: "string"
              format: "date-time"
            - type: "null"
        "end_time":
          anyOf:
            - type: "string"
              format: "date-time"
            - type: "null"
        "total_time_in_mins":
          type: "integer"
    "V3.Incidents.Tags.Tag":
      type: "object"
      required:
        - "value"
        - "color"
      properties:
        "value":
          type: "string"
        "color":
          type: "string"
    "V3.Incidents.Tags.TagConfigObject":
      type: "object"
      required:
        - "value"
        - "color"
      properties:
        "value":
          type: "string"
        "color":
          type: "string"
      description: "Defines the value and color of a tag."
    "V3.Incidents.Tags.TagUpdate":
      type: "object"
      properties:
        "value":
          type: "string"
        "color":
          type: "string"
    "V3.Incidents.Tags.UpdateTagRequest":
      type: "object"
      required:
        - "tags"
      properties:
        "tags":
          type: "object"
          unevaluatedProperties: {"$ref": "#/components/schemas/V3.Incidents.Tags.Tag"}
    "V3.Incidents.Task":
      type: "object"
      required:
        - "content"
        - "id"
        - "completed"
        - "completed_at"
      properties:
        "content":
          type: "string"
          description: "The content of the step, in Markdown format."
        "id":
          type: "string"
        "completed":
          type: "boolean"
        "completed_at":
          type: "string"
          format: "date-time"
      description: "Represents a single task within an incident."
    "V3.Runbooks.CreateRunbookRequest":
      type: "object"
      required:
        - "name"
        - "steps"
        - "owner_id"
      properties:
        "name":
          type: "string"
          description: "The name of the runbook."
        "steps":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Runbooks.Step"}
          description: "The steps that make up the runbook."
        "owner_id":
          type: "string"
          description: "The ID of the team that owns this runbook."
        "entity_owner":
          allOf:
            - {"$ref": "#/components/schemas/Common.V3.EntityOwner"}
          description: "The owner of the entity."
      description: "Represents the request body for creating a new runbook."
    "V3.Runbooks.Runbook":
      type: "object"
      required:
        - "id"
        - "name"
        - "created"
        - "updated"
        - "used_count"
        - "steps"
        - "entity_owner"
        - "organization_id"
        - "owner"
      properties:
        "id":
          type: "string"
          description: "The unique identifier for the runbook."
        "name":
          type: "string"
          description: "The name of the runbook."
        "created":
          allOf:
            - {"$ref": "#/components/schemas/V3.Runbooks.UpdationInfo"}
          description: "Information about when the runbook was created."
        "updated":
          allOf:
            - {"$ref": "#/components/schemas/V3.Runbooks.UpdationInfo"}
          description: "Information about when the runbook was last updated."
        "used_count":
          type: "integer"
          format: "int32"
          description: "The number of times this runbook has been used."
        "steps":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Runbooks.Step"}
          description: "The steps that make up the runbook."
        "entity_owner":
          allOf:
            - {"$ref": "#/components/schemas/Common.V3.EntityOwner"}
          description: "The owner of the entity."
        "organization_id":
          type: "string"
          description: "The ID of the organization this runbook belongs to."
        "owner":
          allOf:
            - {"$ref": "#/components/schemas/Common.V3.RBACOwner"}
          description: "The RBAC owner of the runbook (typically a team)."
      description: "Represents a Runbook in the system."
    "V3.Runbooks.RunbookResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Runbooks.Runbook"}
    "V3.Runbooks.Step":
      type: "object"
      required:
        - "content"
      properties:
        "content":
          type: "string"
          description: "The content of the step, in Markdown format."
      description: "Represents a single step in a runbook."
    "V3.Runbooks.UpdateRunbookRequest":
      type: "object"
      required:
        - "name"
        - "steps"
      properties:
        "name":
          type: "string"
          description: "The name of the runbook."
        "steps":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Runbooks.Step"}
          description: "The steps that make up the runbook."
        "entity_owner":
          allOf:
            - {"$ref": "#/components/schemas/Common.V3.EntityOwner"}
          description: "The owner of the entity."
      description: "Represents the request body for updating a runbook."
    "V3.Runbooks.UpdationInfo":
      type: "object"
      required:
        - "user_name"
        - "username_for_display"
        - "user_id"
        - "at"
      properties:
        "user_name":
          type: "string"
          description: "The full name of the user who performed the action."
        "username_for_display":
          type: "string"
          description: "The display name of the user who performed the action."
        "user_id":
          type: "string"
          description: "The ID of the user who performed the action."
        "at":
          type: "string"
          format: "date-time"
          description: "The timestamp of the action."
        "entity_owner":
          allOf:
            - {"$ref": "#/components/schemas/Common.V3.EntityOwner"}
          description: "The owner of the entity at the time of the action."
      description: "Represents information about the creation or updation of an entity."
    "V3.SLO.CreateSLORequest":
      type: "object"
      required:
        - "name"
        - "time_interval_type"
        - "service_ids"
        - "slis"
        - "target_slo"
        - "start_time"
        - "end_time"
        - "duration_in_days"
        - "owner_type"
        - "owner_id"
        - "slo_owner_id"
        - "slo_owner_type"
      properties:
        "name":
          type: "string"
        "description":
          type: "string"
        "time_interval_type": {"$ref": "#/components/schemas/V3.SLO.TimeIntervalType"}
        "service_ids":
          type: "array"
          items:
            type: "string"
        "slis":
          type: "array"
          items:
            type: "string"
        "target_slo":
          type: "number"
          format: "float"
        "start_time":
          type: "string"
          format: "date-time"
        "end_time":
          type: "string"
          format: "date-time"
        "duration_in_days":
          type: "integer"
          format: "uint32"
        "tags":
          type: "object"
          unevaluatedProperties:
            anyOf:
              - type: "string"
              - type: "integer"
                format: "int32"
              - type: "boolean"
              - type: "null"
        "slo_monitoring_checks":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.SLO.SloMonitoringCheck"}
        "slo_actions":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.SLO.SloAction"}
        "owner_type":
          type: "string"
        "owner_id":
          type: "string"
        "slo_owner_id":
          type: "string"
        "slo_owner_type": {"$ref": "#/components/schemas/V3.SLO.SLOOwnerType"}
    "V3.SLO.MarkSLOAffectedRequest":
      type: "object"
      required:
        - "incident_id"
        - "slis"
        - "error_budget_spent"
        - "owner_type"
        - "owner_id"
        - "org_id"
      properties:
        "incident_id":
          type: "string"
        "slis":
          type: "array"
          items:
            type: "string"
        "error_budget_spent":
          type: "number"
          format: "float"
        "owner_type":
          type: "string"
        "owner_id":
          type: "string"
        "org_id":
          type: "string"
    "V3.SLO.SLO":
      type: "object"
      required:
        - "id"
        - "name"
        - "time_interval_type"
        - "service_ids"
        - "slis"
        - "target_slo"
        - "start_time"
        - "end_time"
        - "allocated_error_budget"
        - "is_active"
        - "owner_type"
        - "owner_id"
        - "org_id"
      properties:
        "id":
          type: "integer"
        "name":
          type: "string"
        "description":
          type: "string"
        "time_interval_type": {"$ref": "#/components/schemas/V3.SLO.TimeIntervalType"}
        "service_ids":
          type: "array"
          items:
            type: "string"
        "slis":
          type: "array"
          items:
            type: "string"
        "target_slo":
          type: "number"
          format: "float"
        "current_slo":
          type: "number"
          format: "float"
        "start_time":
          type: "string"
          format: "date-time"
        "end_time":
          type: "string"
          format: "date-time"
        "is_healthy":
          type: "boolean"
        "remaining_error_budget":
          type: "number"
          format: "float"
        "allocated_error_budget":
          type: "number"
          format: "float"
        "is_active":
          type: "boolean"
        "tags":
          anyOf:
            - type: "object"
              unevaluatedProperties:
                anyOf:
                  - type: "string"
                  - type: "integer"
                    format: "int32"
                  - type: "boolean"
                  - type: "null"
            - type: "null"
        "incident_count":
          type: "integer"
        "false_positive_count":
          type: "integer"
        "slo_monitoring_checks":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.SLO.SloMonitoringCheck"}
        "slo_actions":
          anyOf:
            - type: "array"
              items: {"$ref": "#/components/schemas/V3.SLO.SloAction"}
            - type: "null"
        "owner_type":
          type: "string"
        "owner_id":
          type: "string"
        "org_id":
          type: "string"
        "slo_owner_id":
          type: "string"
        "slo_owner_type": {"$ref": "#/components/schemas/V3.SLO.SLOOwnerType"}
        "created_at":
          type: "string"
          format: "date-time"
        "updated_at":
          type: "string"
          format: "date-time"
        "deleted_at":
          anyOf:
            - type: "string"
              format: "date-time"
            - type: "null"
        "duration_in_days":
          type: "integer"
          format: "uint32"
    "V3.SLO.SLODetailedResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.SLO.SLO"}
    "V3.SLO.SLOOwnerType":
      type: "string"
      enum:
        - "user"
        - "squad"
    "V3.SLO.SLOResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.SLO.SLO"}
    "V3.SLO.SLOViolatingIncident":
      type: "object"
      required:
        - "id"
        - "owner_type"
        - "owner_id"
        - "org_id"
        - "slo_id"
        - "incident_id"
        - "slis"
        - "error_budget_spent"
        - "is_false_positive"
        - "start_time"
        - "end_time"
        - "created_at"
        - "updated_at"
        - "deleted_at"
      properties:
        "id":
          type: "integer"
        "owner_type":
          type: "string"
        "owner_id":
          type: "string"
        "org_id":
          type: "string"
        "slo_id":
          type: "integer"
        "incident_id":
          type: "string"
        "slis":
          type: "array"
          items:
            type: "string"
        "error_budget_spent":
          type: "number"
          format: "float"
        "is_false_positive":
          type: "boolean"
        "start_time":
          type: "string"
          format: "date-time"
        "end_time":
          type: "string"
          format: "date-time"
        "created_at":
          type: "string"
          format: "date-time"
        "updated_at":
          type: "string"
          format: "date-time"
        "deleted_at":
          anyOf:
            - type: "string"
              format: "date-time"
            - type: "null"
    "V3.SLO.SLOViolatingIncidentResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.SLO.SLOViolatingIncident"}
    "V3.SLO.SLOWithInsights":
      type: "object"
      required:
        - "slo"
      properties:
        "insights":
          type: "object"
          properties:
            "error_budget_consumption_for_past_30days":
              type: "integer"
          required:
            - "error_budget_consumption_for_past_30days"
        "slo": {"$ref": "#/components/schemas/V3.SLO.SLO"}
    "V3.SLO.SLOWithInsightsResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.SLO.SLOWithInsights"}
    "V3.SLO.SloAction":
      type: "object"
      required:
        - "type"
      properties:
        "id":
          type: "integer"
        "slo_id":
          type: "integer"
        "type": {"$ref": "#/components/schemas/V3.SLO.SloActionType"}
        "user_id":
          type: "string"
        "squad_id":
          type: "string"
        "service_id":
          type: "string"
        "owner_type":
          type: "string"
        "owner_id":
          type: "string"
        "created_at":
          type: "string"
          format: "date-time"
        "updated_at":
          type: "string"
          format: "date-time"
        "deleted_at":
          anyOf:
            - type: "string"
              format: "date-time"
            - type: "null"
    "V3.SLO.SloActionType":
      type: "string"
      enum:
        - "SERVICE"
        - "USER"
        - "SQUAD"
    "V3.SLO.SloMonitoringCheck":
      type: "object"
      required:
        - "name"
        - "owner_type"
        - "owner_id"
      properties:
        "id":
          type: "integer"
        "slo_id":
          type: "integer"
        "name":
          type: "string"
        "threshold":
          type: "integer"
        "owner_type":
          type: "string"
        "owner_id":
          type: "string"
        "org_id":
          type: "string"
        "is_checked":
          anyOf:
            - type: "boolean"
            - type: "null"
        "created_at":
          type: "string"
          format: "date-time"
        "updated_at":
          type: "string"
          format: "date-time"
        "deleted_at":
          anyOf:
            - type: "string"
              format: "date-time"
            - type: "null"
    "V3.SLO.TimeIntervalType":
      type: "string"
      enum:
        - "fixed"
        - "rolling"
    "V3.Services.APTAConfig":
      type: "object"
      required:
        - "is_enabled"
        - "timeout_in_mins"
      properties:
        "is_enabled":
          type: "boolean"
        "timeout_in_mins":
          type: "number"
          enum:
            - 2
            - 3
            - 5
            - 10
            - 15
    "V3.Services.APTAConfigRequest":
      type: "object"
      required:
        - "is_enabled"
        - "timeout_in_mins"
      properties:
        "is_enabled":
          type: "boolean"
        "timeout_in_mins":
          type: "integer"
    "V3.Services.CreateServiceRequest":
      type: "object"
      required:
        - "name"
        - "escalation_policy_id"
      properties:
        "name":
          type: "string"
        "escalation_policy_id":
          type: "string"
        "description":
          type: "string"
        "email_prefix":
          type: "string"
        "maintainer": {"$ref": "#/components/schemas/V3.Services.ServiceMaintainer"}
        "tags":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Services.ServiceTag"}
        "auto_pause_transient_alerts_config": {"$ref": "#/components/schemas/V3.Services.APTAConfig"}
        "intelligent_alerts_grouping_config": {"$ref": "#/components/schemas/V3.Services.IAGConfig"}
        "delay_notification_config": {"$ref": "#/components/schemas/V3.Services.NotificationDelayConfigRequest"}
        "dedup_init_config": {"$ref": "#/components/schemas/V3.Services.DedupInitConfig"}
    "V3.Services.DedupInitConfig":
      type: "object"
      required:
        - "time_window"
        - "time_unit"
      properties:
        "time_window":
          type: "integer"
          format: "int64"
        "time_unit":
          type: "string"
          enum:
            - "minute"
            - "hour"
    "V3.Services.DeduplicationRules.CreateDeduplicationRulesRequest":
      type: "object"
      required:
        - "rules"
      properties:
        "rules":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Services.DeduplicationRules.DeduplicationRule"}
    "V3.Services.DeduplicationRules.DeduplicationRule":
      type: "object"
      required:
        - "expression"
        - "time_window"
        - "time_unit"
        - "is_basic"
      properties:
        "expression":
          type: "string"
        "time_window":
          type: "integer"
          format: "int64"
        "time_unit":
          type: "string"
          enum:
            - "minute"
            - "hour"
        "is_basic":
          type: "boolean"
        "basic_expression":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Services.DeduplicationRules.ExpressionBranch"}
        "dependency_deduplication":
          type: "boolean"
        "description":
          type: "string"
    "V3.Services.DeduplicationRules.DeduplicationRuleResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Services.DeduplicationRules.DeduplicationRule"}
    "V3.Services.DeduplicationRules.ExpressionBranch":
      type: "object"
      required:
        - "lhs"
        - "rhs"
      properties:
        "lhs":
          type: "string"
        "op":
          type: "string"
          enum:
            - "is"
            - "is_not"
            - "matches"
            - "not_contains"
            - "gt"
            - "lt"
            - "gt_eq"
            - "lt_eq"
            - "call"
            - "field_is"
            - "field_is_not"
            - "field_gt"
            - "field_lt"
            - "field_gt_eq"
            - "field_lt_eq"
        "rhs":
          anyOf:
            - type: "string"
            - type: "boolean"
            - type: "integer"
              format: "int32"
            - type: "number"
              format: "float"
    "V3.Services.Dependencies.CreateOrUpdateDependenciesRequest":
      type: "object"
      required:
        - "dependencies"
      properties:
        "dependencies":
          type: "array"
          items:
            type: "string"
    "V3.Services.EscalationPolicyBasic":
      type: "object"
      required:
        - "id"
        - "name"
        - "description"
        - "slug"
      properties:
        "id":
          type: "string"
          description: "The unique identifier for the escalation policy."
        "name":
          type: "string"
          description: "The name of the escalation policy."
        "description":
          type: "string"
          description: "A description of the escalation policy."
        "slug":
          type: "string"
          description: "The URL-friendly slug for the policy name."
      description: "Represents the basic details of an Escalation Policy for a service."
    "V3.Services.Extensions.SlackExtensionResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Services.Extensions.SlackExtensionServiceExtension"}
    "V3.Services.Extensions.SlackExtensionServiceExtension":
      type: "object"
      required:
        - "id"
        - "service_id"
        - "organization_id"
        - "channel_id"
        - "created_at"
        - "name"
      properties:
        "id":
          type: "integer"
          format: "int32"
        "service_id":
          type: "string"
        "organization_id":
          type: "string"
        "channel_id":
          type: "string"
        "created_at":
          type: "string"
        "name":
          type: "string"
    "V3.Services.Extensions.UpdateSlackExtensionRequest":
      type: "object"
      required:
        - "channel_id"
      properties:
        "channel_id":
          type: "string"
    "V3.Services.IAGConfig":
      type: "object"
      required:
        - "is_enabled"
        - "rolling_window_in_mins"
      properties:
        "is_enabled":
          type: "boolean"
        "rolling_window_in_mins":
          type: "number"
          enum:
            - 5
            - 10
            - 15
            - 20
            - 45
            - 60
            - 120
            - 240
            - 480
            - 720
            - 1440
    "V3.Services.IAGConfigRequest":
      type: "object"
      required:
        - "is_enabled"
        - "rolling_window_in_mins"
      properties:
        "is_enabled":
          type: "boolean"
        "rolling_window_in_mins":
          type: "integer"
    "V3.Services.JiraCloudExtension":
      type: "object"
      required:
        - "jira_client_key"
        - "project"
        - "issue_type"
        - "is_manual"
      properties:
        "jira_client_key":
          type: "string"
        "project": {"$ref": "#/components/schemas/V3.Services.JiraProject"}
        "issue_type": {"$ref": "#/components/schemas/V3.Services.JiraIssueType"}
        "statusmaps":
          anyOf:
            - type: "array"
              items: {"$ref": "#/components/schemas/V3.Services.JiraStatusMap"}
            - type: "null"
        "is_manual":
          type: "boolean"
    "V3.Services.JiraIssueType":
      type: "object"
      required:
        - "id"
        - "name"
      properties:
        "id":
          type: "string"
        "name":
          type: "string"
        "statuses":
          anyOf:
            - type: "array"
              items: {"$ref": "#/components/schemas/V3.Services.JiraStatus"}
            - type: "null"
    "V3.Services.JiraProject":
      type: "object"
      required:
        - "id"
        - "key"
        - "name"
      properties:
        "id":
          type: "string"
        "key":
          type: "string"
        "name":
          type: "string"
    "V3.Services.JiraStatus":
      type: "object"
      required:
        - "id"
        - "name"
      properties:
        "id":
          type: "string"
        "name":
          type: "string"
    "V3.Services.JiraStatusMap":
      type: "object"
      required:
        - "jira_status"
        - "system_status"
      properties:
        "jira_status":
          type: "string"
        "system_status":
          type: "string"
    "V3.Services.MaintenanceMode.CreateOrUpdateMaintenanceModeRequest":
      type: "object"
      required:
        - "onMaintenance"
        - "serviceMaintenance"
      properties:
        "onMaintenance":
          type: "boolean"
        "serviceMaintenance":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Services.MaintenanceMode.ServiceMaintenance"}
    "V3.Services.MaintenanceMode.MaintenanceMode":
      type: "object"
      required:
        - "service_id"
        - "maintenance_from"
        - "maintenance_till"
        - "repetition_daily"
        - "repetition_weekly"
        - "repetition_two_weekly"
        - "repetition_three_weekly"
        - "repetition_monthly"
        - "deleted"
        - "repeat_till"
      properties:
        "service_id":
          type: "string"
        "maintenance_from":
          type: "string"
          format: "date-time"
        "maintenance_till":
          type: "string"
          format: "date-time"
        "repetition_daily":
          type: "boolean"
        "repetition_weekly":
          type: "boolean"
        "repetition_two_weekly":
          type: "boolean"
        "repetition_three_weekly":
          type: "boolean"
        "repetition_monthly":
          type: "boolean"
        "deleted":
          type: "boolean"
        "repeat_till":
          type: "string"
          format: "date-time"
    "V3.Services.MaintenanceMode.MaintenanceModeResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Services.MaintenanceMode.MaintenanceMode"}
    "V3.Services.MaintenanceMode.ServiceMaintenance":
      type: "object"
      required:
        - "maintenanceStartDate"
        - "daily"
        - "weekly"
        - "twoWeekly"
        - "threeWeekly"
        - "monthly"
        - "deleted"
        - "repeatTill"
      properties:
        "maintenanceStartDate":
          type: "string"
        "maintenanceEndDate":
          type: "string"
        "daily":
          type: "boolean"
        "weekly":
          type: "boolean"
        "twoWeekly":
          type: "boolean"
        "threeWeekly":
          type: "boolean"
        "monthly":
          type: "boolean"
        "deleted":
          type: "boolean"
        "repeatTill":
          type: "string"
    "V3.Services.NotificationDelayConfig":
      type: "object"
      required:
        - "is_enabled"
      properties:
        "is_enabled":
          type: "boolean"
        "timezone":
          type: "string"
        "fixed_timeslot_config":
          type: "object"
          properties:
            "start_time":
              type: "string"
            "end_time":
              type: "string"
            "repeat_days":
              type: "array"
              items:
                type: "integer"
                format: "int32"
        "custom_timeslots_enabled":
          type: "boolean"
        "custom_timeslots":
          type: "object"
          unevaluatedProperties:
            type: "array"
            items:
              type: "object"
              properties:
                "start_time":
                  type: "string"
                "end_time":
                  type: "string"
        "assigned_to":
          type: "object"
          properties:
            "id":
              type: "string"
            "type":
              type: "string"
    "V3.Services.NotificationDelayConfigRequest":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Services.NotificationDelayConfig"}
    "V3.Services.Overlay.CustomContent":
      type: "object"
      required:
        - "message"
        - "description"
      properties:
        "message":
          type: "string"
        "description":
          type: "string"
    "V3.Services.Overlay.CustomContentOverlay":
      type: "object"
      required:
        - "created_at"
        - "updated_at"
        - "deleted_at"
        - "org_id"
        - "service_id"
        - "alert_source_version"
        - "alert_source_shortname"
        - "overlay_template_type"
        - "overlay"
        - "created_by"
        - "updated_by"
        - "alert_source_type"
      properties:
        "created_at":
          type: "string"
          format: "date-time"
        "updated_at":
          type: "string"
          format: "date-time"
        "deleted_at":
          anyOf:
            - type: "string"
              format: "date-time"
            - type: "null"
        "org_id":
          type: "string"
        "service_id":
          type: "string"
        "alert_source_version":
          type: "string"
        "alert_source_shortname":
          type: "string"
        "overlay_template_type":
          type: "string"
          enum:
            - "message"
            - "description"
        "overlay": {"$ref": "#/components/schemas/V3.Services.Overlay.CustomContent"}
        "created_by":
          type: "string"
        "updated_by":
          type: "string"
        "alert_source_type":
          type: "string"
    "V3.Services.Overlay.CustomContentOverlayResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Services.Overlay.CustomContentOverlay"}
    "V3.Services.Overlay.DedupKeyOverlay":
      type: "object"
      required:
        - "template"
        - "duration"
      properties:
        "template":
          type: "string"
        "duration":
          type: "integer"
          format: "int32"
    "V3.Services.Overlay.OptInForKeyBasedDeduplicationRequest":
      type: "object"
      properties:
        "dedup_key_enabled":
          type: "boolean"
    "V3.Services.Overlay.Overlay":
      type: "object"
      required:
        - "created_at"
        - "updated_at"
        - "deleted_at"
        - "org_id"
        - "service_id"
        - "alert_source_version"
        - "alert_source_shortname"
        - "overlay_template_type"
        - "overlay"
        - "created_by"
        - "updated_by"
        - "alert_source_type"
      properties:
        "created_at":
          type: "string"
          format: "date-time"
        "updated_at":
          type: "string"
          format: "date-time"
        "deleted_at":
          anyOf:
            - type: "string"
              format: "date-time"
            - type: "null"
        "org_id":
          type: "string"
        "service_id":
          type: "string"
        "alert_source_version":
          type: "string"
        "alert_source_shortname":
          type: "string"
        "overlay_template_type":
          type: "string"
          enum:
            - "dedup_key"
        "overlay": {"$ref": "#/components/schemas/V3.Services.Overlay.DedupKeyOverlay"}
        "created_by":
          type: "string"
        "updated_by":
          type: "string"
        "alert_source_type":
          type: "string"
    "V3.Services.Overlay.OverlayResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Services.Overlay.Overlay"}
    "V3.Services.Overlay.RenderCustomContentOverlayRequest":
      type: "object"
      required:
        - "overlay_template_type"
        - "template"
        - "payload"
      properties:
        "overlay_template_type":
          type: "string"
        "template":
          type: "string"
        "payload":
          type: "string"
    "V3.Services.Overlay.RenderDedupKeyTemplateRequest":
      type: "object"
      required:
        - "overlay_template_type"
        - "template"
        - "payload"
      properties:
        "overlay_template_type":
          type: "string"
        "template":
          type: "string"
        "payload":
          type: "string"
    "V3.Services.Overlay.UpdateCustomContentTemplateOverlayRequest":
      type: "object"
      required:
        - "overlay_template_type"
        - "message_overlay"
        - "description_overlay"
      properties:
        "overlay_template_type":
          type: "string"
        "message_overlay":
          type: "object"
          properties:
            "template":
              type: "string"
          required:
            - "template"
        "description_overlay":
          type: "object"
          properties:
            "template":
              type: "string"
          required:
            - "template"
    "V3.Services.Overlay.UpdateDedupKeyOverlayRequest":
      type: "object"
      required:
        - "overlay_template_type"
        - "dedup_key_overlay"
      properties:
        "overlay_template_type":
          type: "string"
        "dedup_key_overlay":
          type: "object"
          properties:
            "template":
              type: "string"
            "duration":
              type: "integer"
          required:
            - "template"
            - "duration"
    "V3.Services.RoutingRules.CreateOrUpdateRoutingRulesRequest":
      type: "object"
      required:
        - "rules"
      properties:
        "rules":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Services.RoutingRules.RoutingRule"}
    "V3.Services.RoutingRules.ExpressionBranch":
      type: "object"
      required:
        - "lhs"
        - "rhs"
      properties:
        "lhs":
          type: "string"
        "op":
          type: "string"
          enum:
            - "is"
            - "is_not"
            - "matches"
            - "not_contains"
            - "gt"
            - "lt"
            - "gt_eq"
            - "lt_eq"
            - "call"
            - "field_is"
            - "field_is_not"
            - "field_gt"
            - "field_lt"
            - "field_gt_eq"
            - "field_lt_eq"
        "rhs":
          anyOf:
            - type: "string"
            - type: "boolean"
            - type: "integer"
              format: "int32"
            - type: "number"
              format: "float"
    "V3.Services.RoutingRules.RoutingRule":
      type: "object"
      required:
        - "expression"
        - "route_to"
        - "is_basic"
      properties:
        "expression":
          type: "string"
        "route_to":
          type: "object"
          properties:
            "entity_type":
              type: "string"
              enum:
                - "user"
                - "squad"
                - "escalation_policy"
            "entity_id":
              type: "string"
          required:
            - "entity_type"
            - "entity_id"
        "is_basic":
          type: "boolean"
        "basic_expression":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Services.RoutingRules.ExpressionBranch"}
    "V3.Services.RoutingRules.RoutingRuleResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Services.RoutingRules.RoutingRule"}
    "V3.Services.Service":
      type: "object"
      required:
        - "id"
        - "name"
        - "slug"
        - "email"
        - "escalation_policy_id"
        - "organization_id"
        - "api_key"
        - "description"
        - "owner"
        - "maintainer"
        - "tags"
        - "auto_pause_transient_alerts_config"
        - "intelligent_alerts_grouping_config"
        - "delay_notification_config"
        - "config"
        - "created_at"
        - "updated_at"
      properties:
        "id":
          type: "string"
        "name":
          type: "string"
        "slug":
          type: "string"
        "email":
          type: "string"
        "escalation_policy_id":
          type: "string"
        "organization_id":
          type: "string"
        "api_key":
          type: "string"
        "description":
          type: "string"
        "depends":
          anyOf:
            - type: "array"
              items:
                type: "string"
            - type: "null"
        "owner": {"$ref": "#/components/schemas/Common.V3.RBACOwner"}
        "on_maintenance":
          type: "boolean"
        "slack": {"$ref": "#/components/schemas/V3.Services.ServiceSlack"}
        "escalation_policy": {"$ref": "#/components/schemas/V3.Services.EscalationPolicyBasic"}
        "jira_cloud": {"$ref": "#/components/schemas/V3.Services.JiraCloudExtension"}
        "maintainer": {"$ref": "#/components/schemas/V3.Services.ServiceMaintainer"}
        "tags":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Services.ServiceTag"}
        "auto_pause_transient_alerts_config": {"$ref": "#/components/schemas/V3.Services.APTAConfig"}
        "intelligent_alerts_grouping_config": {"$ref": "#/components/schemas/V3.Services.IAGConfig"}
        "delay_notification_config": {"$ref": "#/components/schemas/V3.Services.NotificationDelayConfig"}
        "config":
          type: "object"
          properties:
            "dedup_key_enabled":
              type: "boolean"
          required:
            - "dedup_key_enabled"
        "created_at":
          type: "string"
          format: "date-time"
        "updated_at":
          type: "string"
          format: "date-time"
    "V3.Services.ServiceMaintainer":
      type: "object"
      required:
        - "id"
        - "type"
      properties:
        "id":
          type: "string"
        "type":
          type: "string"
          enum:
            - "user"
            - "squad"
    "V3.Services.ServiceResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Services.Service"}
    "V3.Services.ServiceSlack":
      type: "object"
      required:
        - "channel_id"
        - "name"
        - "time"
      properties:
        "channel_id":
          type: "string"
        "name":
          type: "string"
        "time":
          type: "integer"
    "V3.Services.ServiceTag":
      type: "object"
      required:
        - "key"
        - "value"
      properties:
        "key":
          type: "string"
        "value":
          type: "string"
    "V3.Services.SlackExtension":
      type: "object"
      required:
        - "id"
        - "token"
        - "slack_bot_token"
        - "slack_channel_id"
        - "slack_channel_name"
        - "slack_team_id"
      properties:
        "id":
          type: "string"
        "token":
          type: "string"
        "slack_bot_token":
          type: "string"
        "slack_channel_id":
          type: "string"
        "slack_channel_name":
          type: "string"
        "slack_team_id":
          type: "string"
    "V3.Services.SlackExtensionServiceExtension":
      type: "object"
      required:
        - "id"
        - "service_id"
        - "organization_id"
        - "channel_id"
        - "created_at"
        - "name"
      properties:
        "id":
          type: "integer"
          format: "int32"
        "service_id":
          type: "string"
        "organization_id":
          type: "string"
        "channel_id":
          type: "string"
        "created_at":
          type: "string"
        "name":
          type: "string"
    "V3.Services.SlackExtensionServiceExtensionRes":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Services.SlackExtensionServiceExtension"}
    "V3.Services.SlackExtensionUpdatePayload":
      type: "object"
      required:
        - "channel_id"
      properties:
        "channel_id":
          type: "string"
    "V3.Services.SuppressionRules.BasicExpression":
      type: "object"
      required:
        - "lhs"
        - "op"
        - "rhs"
      properties:
        "lhs":
          type: "string"
        "op":
          type: "string"
        "rhs":
          type: "string"
    "V3.Services.SuppressionRules.CreateOrUpdateSuppressionRulesRequest":
      type: "object"
      required:
        - "rules"
      properties:
        "rules":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Services.SuppressionRules.SuppressionRule"}
    "V3.Services.SuppressionRules.CustomRepetition":
      type: "object"
      required:
        - "repeats_count"
        - "repeats"
        - "repeats_on_weekdays"
        - "repeats_on_month"
      properties:
        "repeats_count":
          type: "integer"
        "repeats":
          type: "string"
        "repeats_on_weekdays":
          type: "array"
          items:
            type: "integer"
        "repeats_on_month":
          type: "string"
    "V3.Services.SuppressionRules.SuppressionRule":
      type: "object"
      required:
        - "rule_id"
        - "created_at"
        - "updated_at"
        - "created_by"
        - "updated_by"
        - "description"
        - "expression"
        - "is_basic"
        - "is_timebased"
        - "timeslots"
        - "basic_expression"
      properties:
        "rule_id":
          type: "string"
        "created_at":
          type: "string"
          format: "date-time"
        "updated_at":
          type: "string"
          format: "date-time"
        "created_by":
          type: "string"
        "updated_by":
          type: "string"
        "description":
          type: "string"
        "expression":
          type: "string"
        "is_basic":
          type: "boolean"
        "is_timebased":
          type: "boolean"
        "timeslots":
          anyOf:
            - type: "array"
              items: {"$ref": "#/components/schemas/V3.Services.SuppressionRules.Timeslot"}
            - type: "null"
        "basic_expression":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Services.SuppressionRules.BasicExpression"}
    "V3.Services.SuppressionRules.SuppressionRuleResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Services.SuppressionRules.SuppressionRule"}
    "V3.Services.SuppressionRules.SuppressionRulesContainer":
      type: "object"
      required:
        - "id"
        - "created_at"
        - "updated_at"
        - "service_id"
        - "organization_id"
        - "rules"
      properties:
        "id":
          type: "string"
        "created_at":
          type: "string"
          format: "date-time"
        "updated_at":
          type: "string"
          format: "date-time"
        "service_id":
          type: "string"
        "organization_id":
          type: "string"
        "rules":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Services.SuppressionRules.SuppressionRule"}
    "V3.Services.SuppressionRules.SuppressionRulesContainerResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Services.SuppressionRules.SuppressionRulesContainer"}
    "V3.Services.SuppressionRules.Timeslot":
      type: "object"
      required:
        - "time_zone"
        - "start_time"
        - "end_time"
        - "is_allday"
        - "repetition"
        - "is_custom"
        - "custom"
        - "ends_never"
        - "ends_on"
      properties:
        "time_zone":
          type: "string"
        "start_time":
          type: "string"
        "end_time":
          type: "string"
        "is_allday":
          type: "boolean"
        "repetition":
          type: "string"
        "is_custom":
          type: "boolean"
        "custom": {"$ref": "#/components/schemas/V3.Services.SuppressionRules.CustomRepetition"}
        "ends_never":
          type: "boolean"
        "ends_on":
          type: "string"
    "V3.Services.TaggingRules.CreateOrUpdateTaggingRulesRequest":
      type: "object"
      required:
        - "rules"
      properties:
        "rules":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Services.TaggingRules.TagRule"}
    "V3.Services.TaggingRules.ExpressionBranch":
      type: "object"
      required:
        - "lhs"
        - "rhs"
      properties:
        "lhs":
          type: "string"
        "op":
          type: "string"
          enum:
            - "is"
            - "is_not"
            - "matches"
            - "not_contains"
            - "gt"
            - "lt"
            - "gt_eq"
            - "lt_eq"
            - "call"
            - "field_is"
            - "field_is_not"
            - "field_gt"
            - "field_lt"
            - "field_gt_eq"
            - "field_lt_eq"
        "rhs":
          anyOf:
            - type: "string"
            - type: "boolean"
            - type: "integer"
              format: "int32"
            - type: "number"
              format: "float"
    "V3.Services.TaggingRules.TagConfigObject":
      type: "object"
      required:
        - "value"
        - "color"
      properties:
        "value":
          type: "string"
        "color":
          type: "string"
    "V3.Services.TaggingRules.TagRule":
      type: "object"
      properties:
        "expression":
          type: "string"
        "tags":
          allOf:
            - {"$ref": "#/components/schemas/V3.Services.TaggingRules.TagsObject"}
          description: "The 'tags' field cannot be empty unless the 'expression' or 'basic_expression' explicitly uses 'addTag' or 'addTags' functions."
        "is_basic":
          type: "boolean"
        "basic_expression": {"$ref": "#/components/schemas/SubExpressionsItem"}
    "V3.Services.TaggingRules.TaggingRuleResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Services.TaggingRules.TagRule"}
    "V3.Services.TaggingRules.TagsObject":
      type: "object"
      properties:
        "severity": {"$ref": "#/components/schemas/V3.Services.TaggingRules.TagConfigObject"}
      unevaluatedProperties: {"$ref": "#/components/schemas/V3.Services.TaggingRules.TagConfigObject"}
    "V3.Services.UpdateServiceRequest":
      type: "object"
      properties:
        "name":
          type: "string"
        "escalation_policy_id":
          type: "string"
        "description":
          type: "string"
        "email_prefix":
          type: "string"
        "maintainer": {"$ref": "#/components/schemas/V3.Services.ServiceMaintainer"}
        "tags":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Services.ServiceTag"}
        "auto_pause_transient_alerts_config": {"$ref": "#/components/schemas/V3.Services.APTAConfig"}
        "intelligent_alerts_grouping_config": {"$ref": "#/components/schemas/V3.Services.IAGConfig"}
        "delay_notification_config": {"$ref": "#/components/schemas/V3.Services.NotificationDelayConfigRequest"}
    "V3.Squads.CreateSquadRequest":
      type: "object"
      required:
        - "name"
        - "members"
        - "owner_id"
      properties:
        "name":
          type: "string"
        "members":
          type: "array"
          items:
            type: "string"
        "owner_id":
          type: "string"
    "V3.Squads.Squad":
      type: "object"
      required:
        - "id"
        - "name"
        - "slug"
        - "members"
        - "organization_id"
        - "owner"
        - "organization"
      properties:
        "id":
          type: "string"
        "name":
          type: "string"
        "slug":
          type: "string"
        "members":
          type: "array"
          items:
            type: "string"
        "organization_id":
          type: "string"
        "owner":
          type: "object"
          properties:
            "id":
              type: "string"
            "type":
              type: "string"
          required:
            - "id"
            - "type"
        "organization":
          type: "object"
          properties:
            "id":
              type: "string"
            "name":
              type: "string"
            "slug":
              type: "string"
          required:
            - "id"
            - "name"
            - "slug"
    "V3.Squads.SquadResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Squads.Squad"}
    "V3.Squads.UpdateSquadRequest":
      type: "object"
      properties:
        "name":
          type: "string"
        "members":
          type: "array"
          items:
            type: "string"
    "V3.Teams.Abilities":
      type: "object"
      properties:
        "escalation_policies":
          type: "object"
          properties:
            "create-escalation-policies":
              type: "boolean"
            "read-escalation-policies":
              type: "boolean"
            "update-escalation-policies":
              type: "boolean"
            "delete-escalation-policies":
              type: "boolean"
        "schedules":
          type: "object"
          properties:
            "create-schedules":
              type: "boolean"
            "read-schedules":
              type: "boolean"
            "update-schedules":
              type: "boolean"
            "delete-schedules":
              type: "boolean"
        "services":
          type: "object"
          properties:
            "create-services":
              type: "boolean"
            "read-services":
              type: "boolean"
            "update-services":
              type: "boolean"
            "delete-services":
              type: "boolean"
        "squads":
          type: "object"
          properties:
            "create-squads":
              type: "boolean"
            "read-squads":
              type: "boolean"
            "update-squads":
              type: "boolean"
            "delete-squads":
              type: "boolean"
        "stakeholder_groups":
          type: "object"
          properties:
            "create-stakeholder-groups":
              type: "boolean"
            "read-stakeholder-groups":
              type: "boolean"
            "update-stakeholder-groups":
              type: "boolean"
            "delete-stakeholder-groups":
              type: "boolean"
        "runbooks":
          type: "object"
          properties:
            "create-runbooks":
              type: "boolean"
            "read-runbooks":
              type: "boolean"
            "update-runbooks":
              type: "boolean"
            "delete-runbooks":
              type: "boolean"
        "postmortems":
          type: "object"
          properties:
            "create-postmortems":
              type: "boolean"
            "read-postmortems":
              type: "boolean"
            "update-postmortems":
              type: "boolean"
            "delete-postmortems":
              type: "boolean"
        "status_pages":
          type: "object"
          properties:
            "create-status-pages":
              type: "boolean"
            "read-status-pages":
              type: "boolean"
            "update-status-pages":
              type: "boolean"
            "delete-status-pages":
              type: "boolean"
        "team_analytics":
          type: "object"
          properties:
            "read-team-analytics":
              type: "boolean"
        "slos":
          type: "object"
          properties:
            "create-slos":
              type: "boolean"
            "read-slos":
              type: "boolean"
            "update-slos":
              type: "boolean"
            "delete-slos":
              type: "boolean"
        "webforms":
          type: "object"
          properties:
            "create-webforms":
              type: "boolean"
            "read-webforms":
              type: "boolean"
            "update-webforms":
              type: "boolean"
            "delete-webforms":
              type: "boolean"
        "workflows":
          type: "object"
          properties:
            "create-workflows":
              type: "boolean"
            "read-workflows":
              type: "boolean"
            "update-workflows":
              type: "boolean"
            "delete-workflows":
              type: "boolean"
        "ger":
          type: "object"
          properties:
            "create-ger":
              type: "boolean"
            "read-ger":
              type: "boolean"
            "update-ger":
              type: "boolean"
            "delete-ger":
              type: "boolean"
        "routing_numbers":
          type: "object"
          properties:
            "create-routing-numbers":
              type: "boolean"
            "read-routing-numbers":
              type: "boolean"
            "update-routing-numbers":
              type: "boolean"
            "delete-routing-numbers":
              type: "boolean"
        "global_oncall_reminder_rules":
          type: "object"
          properties:
            "create-global-oncall-reminder-rules":
              type: "boolean"
            "read-global-oncall-reminder-rules":
              type: "boolean"
            "update-global-oncall-reminder-rules":
              type: "boolean"
            "delete-global-oncall-reminder-rules":
              type: "boolean"
    "V3.Teams.AddBulkTeamMemberRequest":
      type: "object"
      required:
        - "members"
      properties:
        "members":
          type: "array"
          items:
            type: "object"
            properties:
              "user_id":
                type: "string"
              "role":
                type: "string"
                description: "this field is required if you are using OBAC permission model"
              "role_ids":
                type: "array"
                items:
                  type: "string"
                description: "this field is required if you are using RBAC permission model"
            required:
              - "user_id"
              - "role_ids"
    "V3.Teams.AddTeamMemberRequest":
      type: "object"
      required:
        - "user_id"
        - "role_ids"
      properties:
        "user_id":
          type: "string"
        "role_ids":
          type: "array"
          items:
            type: "string"
          description: "this field is required if you are using RBAC permission model"
        "role":
          type: "string"
          description: "this field is required if you are using OBAC permission model"
    "V3.Teams.CreateTeamRequest":
      type: "object"
      required:
        - "name"
        - "member_ids"
      properties:
        "name":
          type: "string"
        "description":
          type: "string"
        "member_ids":
          type: "array"
          items:
            type: "string"
    "V3.Teams.CreateTeamRoleRequest":
      type: "object"
      required:
        - "name"
        - "abilities"
      properties:
        "name":
          type: "string"
        "abilities": {"$ref": "#/components/schemas/V3.Teams.Abilities"}
    "V3.Teams.TeamBase":
      type: "object"
      required:
        - "id"
        - "created_at"
        - "updated_at"
        - "created_by"
        - "organization_id"
        - "name"
        - "description"
        - "slug"
        - "members"
        - "roles"
        - "default"
      properties:
        "id":
          type: "string"
        "created_at":
          type: "string"
        "updated_at":
          type: "string"
        "created_by":
          type: "string"
        "organization_id":
          type: "string"
        "name":
          type: "string"
        "description":
          type: "string"
        "slug":
          type: "string"
        "members":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Teams.TeamMember"}
        "roles":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Teams.TeamRole"}
        "default":
          type: "boolean"
    "V3.Teams.TeamBaseResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Teams.TeamBase"}
    "V3.Teams.TeamMember":
      type: "object"
      required:
        - "user_id"
      properties:
        "user_id":
          type: "string"
        "role":
          type: "string"
        "role_ids":
          type: "array"
          items:
            type: "string"
        "abilities": {"$ref": "#/components/schemas/V3.Teams.Abilities"}
    "V3.Teams.TeamMemberResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Teams.TeamMember"}
    "V3.Teams.TeamResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Teams.TeamWithOrganization"}
    "V3.Teams.TeamRole":
      type: "object"
      required:
        - "id"
        - "name"
        - "slug"
        - "default"
      properties:
        "id":
          type: "string"
        "name":
          type: "string"
        "slug":
          type: "string"
        "default":
          type: "boolean"
        "abilities": {"$ref": "#/components/schemas/V3.Teams.Abilities"}
    "V3.Teams.TeamRoleResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Teams.TeamRole"}
    "V3.Teams.TeamWithOrganization":
      type: "object"
      required:
        - "id"
        - "created_at"
        - "updated_at"
        - "created_by"
        - "organization_id"
        - "name"
        - "description"
        - "slug"
        - "members"
        - "roles"
        - "default"
        - "organization"
      properties:
        "id":
          type: "string"
        "created_at":
          type: "string"
        "updated_at":
          type: "string"
        "created_by":
          type: "string"
        "organization_id":
          type: "string"
        "name":
          type: "string"
        "description":
          type: "string"
        "slug":
          type: "string"
        "members":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Teams.TeamMember"}
        "roles":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Teams.TeamRole"}
        "default":
          type: "boolean"
        "organization":
          type: "object"
          properties:
            "id":
              type: "string"
            "name":
              type: "string"
            "slug":
              type: "string"
          required:
            - "id"
            - "name"
            - "slug"
    "V3.Teams.UpdateTeamMemberRequest":
      type: "object"
      properties:
        "role_ids":
          type: "array"
          items:
            type: "string"
          description: "this field is required if you are using RBAC permission model"
        "role":
          type: "string"
          description: "this field is required if you are using OBAC permission model"
    "V3.Teams.UpdateTeamRequest":
      type: "object"
      required:
        - "members"
      properties:
        "name":
          type: "string"
        "description":
          type: "string"
        "members":
          type: "array"
          items:
            type: "object"
            properties:
              "user_id":
                type: "string"
              "role":
                type: "string"
                description: "this field is required if you are using OBAC permission model"
              "role_ids":
                type: "array"
                items:
                  type: "string"
                description: "this field is required if you are using RBAC permission model"
            required:
              - "user_id"
              - "role_ids"
    "V3.Teams.UpdateTeamRoleRequest":
      type: "object"
      properties:
        "name":
          type: "string"
        "abilities": {"$ref": "#/components/schemas/V3.Teams.Abilities"}
    "V3.Users.AddUserRequest":
      type: "object"
      required:
        - "email"
        - "role"
        - "first_name"
        - "last_name"
      properties:
        "email":
          type: "string"
        "role":
          type: "string"
          enum:
            - "account_owner"
            - "user"
            - "stakeholder"
        "first_name":
          type: "string"
        "last_name":
          type: "string"
    "V3.Users.ApiToken":
      type: "object"
      required:
        - "id"
        - "organization_id"
        - "user_id"
        - "token"
        - "last_refresh"
        - "rate_limit"
        - "deleted"
      properties:
        "id":
          type: "string"
        "organization_id":
          type: "string"
        "user_id":
          type: "string"
        "token":
          type: "string"
        "last_refresh":
          type: "string"
        "rate_limit":
          type: "integer"
        "deleted":
          type: "boolean"
    "V3.Users.ApiTokenResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Users.ApiToken"}
    "V3.Users.Contact":
      type: "object"
      required:
        - "dial_code"
        - "phone_number"
      properties:
        "dial_code":
          type: "string"
        "phone_number":
          type: "string"
    "V3.Users.GlobalRBACAbilityName":
      type: "string"
      enum:
        - "manage-api-tokens"
        - "manage-billing"
        - "manage-extensions"
        - "manage-teams"
        - "manage-users"
        - "manage-webhooks"
        - "manage-organization-analytics"
        - "manage-postmortem-templates"
        - "manage-audit-logs"
        - "manage-feature-settings"
      description: "Represents the name of a global RBAC ability."
    "V3.Users.NotificationRule":
      type: "object"
      required:
        - "type"
        - "time"
      properties:
        "type":
          type: "string"
        "time":
          type: "integer"
    "V3.Users.UpdateUserAbilitiesRequest":
      type: "object"
      required:
        - "data"
      properties:
        "data":
          type: "array"
          items:
            type: "object"
            properties:
              "user_id":
                type: "string"
              "abilities":
                type: "array"
                items: {"$ref": "#/components/schemas/V3.Users.GlobalRBACAbilityName"}
            required:
              - "user_id"
              - "abilities"
    "V3.Users.UpdateUserRequest":
      type: "object"
      required:
        - "role"
      properties:
        "role":
          type: "string"
          enum:
            - "account_owner"
            - "user"
            - "stakeholder"
    "V3.Users.User":
      type: "object"
      required:
        - "id"
        - "first_name"
        - "last_name"
        - "username_for_display"
        - "email"
        - "contact"
        - "secondary_emails"
        - "email_verified"
        - "time_zone"
        - "title"
        - "bio"
        - "notification_rules"
        - "user_image"
      properties:
        "id":
          type: "string"
        "first_name":
          type: "string"
        "last_name":
          type: "string"
        "username_for_display":
          type: "string"
        "email":
          type: "string"
        "contact": {"$ref": "#/components/schemas/V3.Users.Contact"}
        "secondary_emails":
          anyOf:
            - type: "array"
              items:
                type: "string"
            - type: "null"
        "email_verified":
          type: "boolean"
        "time_zone":
          type: "string"
        "title":
          type: "string"
        "bio":
          type: "string"
        "notification_rules":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Users.NotificationRule"}
        "user_image":
          type: "boolean"
        "role_id":
          type: "string"
        "role":
          type: "string"
    "V3.Users.UserResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Users.User"}
    "V3.Users.UserRole":
      type: "object"
      required:
        - "id"
        - "name"
        - "limit"
        - "order"
      properties:
        "id":
          type: "string"
        "name":
          type: "string"
        "limit":
          type: "integer"
        "order":
          type: "integer"
    "V3.Users.UserRoleResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Users.UserRole"}
    "V3.Webforms.CreateOrUpdateWebformRequest":
      type: "object"
      required:
        - "owner_id"
        - "name"
        - "is_cname"
        - "is_captcha_enabled"
        - "captcha_secret"
        - "form_owner_type"
        - "form_owner_id"
        - "services"
        - "header"
        - "title"
        - "footer_text"
        - "footer_link"
      properties:
        "owner_id":
          type: "string"
          description: "Unique identifier of the owner (string or UUID)"
        "name":
          type: "string"
          description: "Name of the webform"
        "is_cname":
          type: "boolean"
          description: "Indicates if a custom domain (CNAME) is used"
        "host_name":
          type: "string"
          description: "Custom hostname if CNAME is enabled"
        "tags":
          type: "object"
          unevaluatedProperties:
            type: "string"
          description: "Key-value tags for the webform"
        "is_captcha_enabled":
          type: "boolean"
          description: "Whether CAPTCHA is enabled on the form"
        "captcha_secret":
          allOf:
            - {"$ref": "#/components/schemas/V3.Webforms.RecaptchaSecrets"}
          description: "CAPTCHA credentials to be validated"
        "form_owner_type":
          type: "string"
          description: "Entity type that owns the form (e.g., team, user)"
        "form_owner_id":
          type: "string"
          description: "Identifier for the owner entity"
        "services":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Webforms.WFService"}
          description: "List of services tied to this webform"
        "input_field":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Webforms.WFInputField"}
          description: "Input fields to be rendered on the form"
        "header":
          type: "string"
          description: "Header text shown on the form"
        "title":
          type: "string"
          description: "Title of the webform"
        "logo_url":
          type: "string"
          description: "URL to the organization's logo"
        "footer_text":
          type: "string"
          description: "Text displayed in the footer"
        "footer_link":
          type: "string"
          description: "Hyperlink in the footer (mailto or https)"
        "email_on":
          type: "array"
          items:
            type: "string"
          description: "Emails to notify on submission"
        "description":
          type: "string"
          description: "Optional description for the webform"
      description: "Public API request for creating a webform"
    "V3.Webforms.RecaptchaSecrets":
      type: "object"
      required:
        - "site_key"
        - "secret"
      properties:
        "site_key":
          type: "string"
          description: "reCAPTCHA site key"
        "secret":
          type: "string"
          description: "reCAPTCHA secret key"
      description: "reCAPTCHA credentials to be validated"
    "V3.Webforms.WFInputField":
      type: "object"
      required:
        - "label"
        - "options"
      properties:
        "label":
          type: "string"
          description: "Field label"
        "options":
          type: "array"
          items:
            type: "string"
          description: "Selectable options for this field"
      description: "Input field definition for a webform"
    "V3.Webforms.WFService":
      type: "object"
      required:
        - "service_id"
        - "name"
        - "alias"
      properties:
        "service_id":
          type: "string"
          description: "Public identifier for the service"
        "name":
          type: "string"
          description: "Service name as shown in UI"
        "alias":
          type: "string"
          description: "Optional alias for the service"
      description: "Service details for a webform"
    "V3.Webforms.Webform":
      type: "object"
      required:
        - "id"
        - "org_id"
        - "owner_id"
        - "name"
        - "is_cname"
        - "public_url"
        - "tags"
        - "is_captcha_enabled"
        - "captcha_provider"
        - "captcha_secret"
        - "form_owner_type"
        - "form_owner_id"
        - "form_owner_name"
        - "services"
        - "input_field"
        - "header"
        - "title"
        - "footer_text"
        - "footer_link"
        - "email_on"
        - "incident_count"
        - "mttr"
        - "is_deleted"
        - "deleted_at"
      properties:
        "id":
          type: "integer"
          format: "int32"
        "org_id":
          type: "string"
        "owner_id":
          type: "string"
        "name":
          type: "string"
        "is_cname":
          type: "boolean"
        "public_url":
          type: "string"
        "host_name":
          type: "string"
        "tags":
          type: "object"
          unevaluatedProperties:
            type: "string"
        "is_captcha_enabled":
          type: "boolean"
        "captcha_provider":
          type: "string"
        "captcha_secret": {"$ref": "#/components/schemas/V3.Webforms.RecaptchaSecrets"}
        "form_owner_type":
          type: "string"
        "form_owner_id":
          type: "string"
        "form_owner_name":
          type: "string"
        "services":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Webforms.WFService"}
        "input_field":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Webforms.WFInputField"}
        "header":
          type: "string"
        "title":
          type: "string"
        "logo_url":
          type: "string"
        "footer_text":
          type: "string"
        "footer_link":
          type: "string"
        "email_on":
          type: "array"
          items:
            type: "string"
        "description":
          type: "string"
        "incident_count":
          type: "integer"
          format: "int64"
        "mttr":
          type: "number"
          format: "double"
        "is_deleted":
          type: "boolean"
        "deleted_at":
          type: "string"
    "V3.Webforms.WebformResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Webforms.Webform"}
    "V3.Workflows.ActionRequest":
      anyOf:
        - type: "object"
          required:
            - "name"
            - "data"
          properties:
            "name":
              type: "string"
              enum:
                - "sq_attach_runbooks"
            "data":
              type: "object"
              properties:
                "runbooks":
                  type: "array"
                  items:
                    type: "string"
              required:
                - "runbooks"
          allOf:
            - {"$ref": "#/components/schemas/V3.Workflows.BaseAction"}
        - {"$ref": "#/components/schemas/V3.Workflows.SqMarkIncidentSLOAffecting"}
        - {"$ref": "#/components/schemas/V3.Workflows.SqTriggerManualWebhook"}
        - {"$ref": "#/components/schemas/V3.Workflows.UpdateIncidentPriority"}
        - {"$ref": "#/components/schemas/V3.Workflows.SqCreateStatusPageIssue"}
        - {"$ref": "#/components/schemas/V3.Workflows.SqAddIncidentNote"}
        - {"$ref": "#/components/schemas/V3.Workflows.SlackArchiveChannel"}
        - {"$ref": "#/components/schemas/V3.Workflows.SqAddCommunicationChannel"}
        - {"$ref": "#/components/schemas/V3.Workflows.SlackMessageChannel"}
        - {"$ref": "#/components/schemas/V3.Workflows.SlackMessageUser"}
        - {"$ref": "#/components/schemas/V3.Workflows.SqMakeHTTPCall"}
        - {"$ref": "#/components/schemas/V3.Workflows.SlackCreateIncidentChannel"}
        - {"$ref": "#/components/schemas/V3.Workflows.JiraCreateTicket"}
        - {"$ref": "#/components/schemas/V3.Workflows.MsTeamsMessageChannel"}
        - {"$ref": "#/components/schemas/V3.Workflows.MsTeamsMessageUser"}
        - {"$ref": "#/components/schemas/V3.Workflows.SqSendEmail"}
        - {"$ref": "#/components/schemas/V3.Workflows.MsTeamsCreateMeetingLink"}
        - {}
    "V3.Workflows.ActionRequestUpdate":
      anyOf:
        - type: "object"
          properties:
            "name":
              type: "string"
              enum:
                - "sq_attach_runbooks"
            "data":
              type: "object"
              properties:
                "runbooks":
                  type: "array"
                  items:
                    type: "string"
          allOf:
            - {"$ref": "#/components/schemas/V3.Workflows.BaseActionUpdate"}
        - {"$ref": "#/components/schemas/V3.Workflows.SqMarkIncidentSLOAffectingUpdate"}
        - {"$ref": "#/components/schemas/V3.Workflows.SqTriggerManualWebhookUpdate"}
        - {"$ref": "#/components/schemas/V3.Workflows.UpdateIncidentPriorityUpdate"}
        - {"$ref": "#/components/schemas/V3.Workflows.SqCreateStatusPageIssueUpdate"}
        - {"$ref": "#/components/schemas/V3.Workflows.SqAddIncidentNoteUpdate"}
        - {"$ref": "#/components/schemas/V3.Workflows.SlackArchiveChannelUpdate"}
        - {"$ref": "#/components/schemas/V3.Workflows.SqAddCommunicationChannelUpdate"}
        - {"$ref": "#/components/schemas/V3.Workflows.SlackMessageChannelUpdate"}
        - {"$ref": "#/components/schemas/V3.Workflows.SlackMessageUserUpdate"}
        - {"$ref": "#/components/schemas/V3.Workflows.SqMakeHTTPCallUpdate"}
        - {"$ref": "#/components/schemas/V3.Workflows.SlackCreateIncidentChannelUpdate"}
        - {"$ref": "#/components/schemas/V3.Workflows.JiraCreateTicketUpdate"}
        - {"$ref": "#/components/schemas/V3.Workflows.MsTeamsMessageChannelUpdate"}
        - {"$ref": "#/components/schemas/V3.Workflows.MsTeamsMessageUserUpdate"}
        - {"$ref": "#/components/schemas/V3.Workflows.SqSendEmailUpdate"}
        - {"$ref": "#/components/schemas/V3.Workflows.MsTeamsCreateMeetingLinkUpdate"}
        - {}
    "V3.Workflows.ActionResponse":
      anyOf:
        - type: "object"
          required:
            - "name"
            - "data"
          properties:
            "name":
              type: "string"
              enum:
                - "sq_attach_runbooks"
            "data":
              type: "object"
              properties:
                "runbooks":
                  type: "array"
                  items: {"$ref": "#/components/schemas/V3.Workflows.RunbookResponse"}
              required:
                - "runbooks"
          allOf:
            - {"$ref": "#/components/schemas/V3.Workflows.BaseAction"}
        - {"$ref": "#/components/schemas/V3.Workflows.SqMarkIncidentSLOAffecting"}
        - {"$ref": "#/components/schemas/V3.Workflows.SqTriggerManualWebhook"}
        - {"$ref": "#/components/schemas/V3.Workflows.UpdateIncidentPriority"}
        - {"$ref": "#/components/schemas/V3.Workflows.SqCreateStatusPageIssue"}
        - {"$ref": "#/components/schemas/V3.Workflows.SqAddIncidentNote"}
        - {"$ref": "#/components/schemas/V3.Workflows.SlackArchiveChannel"}
        - {"$ref": "#/components/schemas/V3.Workflows.SqAddCommunicationChannel"}
        - {"$ref": "#/components/schemas/V3.Workflows.SlackMessageChannel"}
        - {"$ref": "#/components/schemas/V3.Workflows.SlackMessageUser"}
        - {"$ref": "#/components/schemas/V3.Workflows.SqMakeHTTPCall"}
        - {"$ref": "#/components/schemas/V3.Workflows.SlackCreateIncidentChannel"}
        - {"$ref": "#/components/schemas/V3.Workflows.JiraCreateTicket"}
        - {"$ref": "#/components/schemas/V3.Workflows.MsTeamsMessageChannel"}
        - {"$ref": "#/components/schemas/V3.Workflows.MsTeamsMessageUser"}
        - {"$ref": "#/components/schemas/V3.Workflows.SqSendEmail"}
        - {"$ref": "#/components/schemas/V3.Workflows.MsTeamsCreateMeetingLink"}
        - {}
    "V3.Workflows.BaseAction":
      type: "object"
      required:
        - "name"
      properties:
        "name":
          type: "string"
      discriminator:
        propertyName: "name"
        mapping:
          "sq_mark_incident_slo_affecting": "#/components/schemas/V3.Workflows.SqMarkIncidentSLOAffecting"
          "sq_trigger_manual_webhook": "#/components/schemas/V3.Workflows.SqTriggerManualWebhook"
          "sq_update_incident_priority": "#/components/schemas/V3.Workflows.UpdateIncidentPriority"
          "sq_add_status_page_issue": "#/components/schemas/V3.Workflows.SqCreateStatusPageIssue"
          "sq_add_incident_note": "#/components/schemas/V3.Workflows.SqAddIncidentNote"
          "slack_archive_channel": "#/components/schemas/V3.Workflows.SlackArchiveChannel"
          "sq_add_communication_channel": "#/components/schemas/V3.Workflows.SqAddCommunicationChannel"
          "slack_message_channel": "#/components/schemas/V3.Workflows.SlackMessageChannel"
          "slack_message_user": "#/components/schemas/V3.Workflows.SlackMessageUser"
          "sq_make_http_call": "#/components/schemas/V3.Workflows.SqMakeHTTPCall"
          "slack_create_incident_channel": "#/components/schemas/V3.Workflows.SlackCreateIncidentChannel"
          "jira_create_ticket": "#/components/schemas/V3.Workflows.JiraCreateTicket"
          "msteams_message_channel": "#/components/schemas/V3.Workflows.MsTeamsMessageChannel"
          "msteams_message_user": "#/components/schemas/V3.Workflows.MsTeamsMessageUser"
          "sq_send_email": "#/components/schemas/V3.Workflows.SqSendEmail"
          "msteams_create_meeting_link": "#/components/schemas/V3.Workflows.MsTeamsCreateMeetingLink"
    "V3.Workflows.BaseActionUpdate":
      type: "object"
      required:
        - "name"
      properties:
        "name":
          type: "string"
      discriminator:
        propertyName: "name"
        mapping:
          "sq_mark_incident_slo_affecting": "#/components/schemas/V3.Workflows.SqMarkIncidentSLOAffectingUpdate"
          "sq_trigger_manual_webhook": "#/components/schemas/V3.Workflows.SqTriggerManualWebhookUpdate"
          "sq_update_incident_priority": "#/components/schemas/V3.Workflows.UpdateIncidentPriorityUpdate"
          "sq_add_status_page_issue": "#/components/schemas/V3.Workflows.SqCreateStatusPageIssueUpdate"
          "sq_add_incident_note": "#/components/schemas/V3.Workflows.SqAddIncidentNoteUpdate"
          "slack_archive_channel": "#/components/schemas/V3.Workflows.SlackArchiveChannelUpdate"
          "sq_add_communication_channel": "#/components/schemas/V3.Workflows.SqAddCommunicationChannelUpdate"
          "slack_message_channel": "#/components/schemas/V3.Workflows.SlackMessageChannelUpdate"
          "slack_message_user": "#/components/schemas/V3.Workflows.SlackMessageUserUpdate"
          "sq_make_http_call": "#/components/schemas/V3.Workflows.SqMakeHTTPCallUpdate"
          "slack_create_incident_channel": "#/components/schemas/V3.Workflows.SlackCreateIncidentChannelUpdate"
          "jira_create_ticket": "#/components/schemas/V3.Workflows.JiraCreateTicketUpdate"
          "msteams_message_channel": "#/components/schemas/V3.Workflows.MsTeamsMessageChannelUpdate"
          "msteams_message_user": "#/components/schemas/V3.Workflows.MsTeamsMessageUserUpdate"
          "sq_send_email": "#/components/schemas/V3.Workflows.SqSendEmailUpdate"
          "msteams_create_meeting_link": "#/components/schemas/V3.Workflows.MsTeamsCreateMeetingLinkUpdate"
    "V3.Workflows.BulkEnableDisableWorkflowsRequest":
      type: "object"
      required:
        - "owner_id"
        - "enabled"
        - "workflow_ids"
      properties:
        "owner_id":
          type: "string"
        "enabled":
          type: "boolean"
        "workflow_ids":
          type: "array"
          items:
            type: "integer"
            format: "int32"
    "V3.Workflows.CommunicationChannel":
      type: "object"
      required:
        - "display_text"
        - "link"
        - "type"
      properties:
        "display_text":
          type: "string"
        "link":
          type: "string"
        "type":
          type: "string"
          enum:
            - "chat_room"
            - "video_conference"
            - "other"
    "V3.Workflows.ComponentAndImpact":
      type: "object"
      required:
        - "component_id"
        - "impact_status_id"
      properties:
        "component_id":
          type: "integer"
          format: "int32"
        "impact_status_id":
          type: "integer"
          format: "int32"
    "V3.Workflows.CreateWorkflowFilter":
      type: "object"
      properties:
        "type":
          type: "string"
        "key":
          type: "string"
        "value": {}
        "fields": {"$ref": "#/components/schemas/V3.Workflows.CreateWorkflowFilter"}
        "children":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Workflows.CreateWorkflowFilter"}
        "label":
          type: "string"
        "entity":
          type: "object"
          unevaluatedProperties: {}
        "filterType":
          type: "string"
    "V3.Workflows.CreateWorkflowRequest":
      type: "object"
      required:
        - "title"
        - "owner_id"
        - "trigger"
        - "filters"
        - "actions"
      properties:
        "title":
          type: "string"
        "description":
          type: "string"
        "owner_id":
          type: "string"
        "owner_type":
          type: "string"
          enum:
            - "user"
            - "squad"
        "entity_owner": {"$ref": "#/components/schemas/V3.Workflows.EntityOwner"}
        "tags":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Workflows.Tag"}
        "trigger": {"$ref": "#/components/schemas/V3.Workflows.WorkflowTrigger"}
        "filters": {"$ref": "#/components/schemas/V3.Workflows.CreateWorkflowFilter"}
        "actions":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Workflows.ActionRequest"}
        "enabled":
          type: "boolean"
    "V3.Workflows.CreateWorkflowRequestUpdate":
      type: "object"
      properties:
        "title":
          type: "string"
        "description":
          type: "string"
        "owner_id":
          type: "string"
        "owner_type":
          type: "string"
          enum:
            - "user"
            - "squad"
        "entity_owner": {"$ref": "#/components/schemas/V3.Workflows.EntityOwnerUpdate"}
        "tags":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Workflows.Tag"}
        "trigger": {"$ref": "#/components/schemas/V3.Workflows.WorkflowTrigger"}
        "filters": {"$ref": "#/components/schemas/V3.Workflows.CreateWorkflowFilter"}
        "actions":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Workflows.ActionRequest"}
        "enabled":
          type: "boolean"
    "V3.Workflows.EnableDisableWorkflowRequest":
      type: "object"
      properties:
        "enabled":
          type: "boolean"
    "V3.Workflows.EntityOwner":
      type: "object"
      required:
        - "id"
        - "type"
      properties:
        "id":
          type: "string"
        "type":
          type: "string"
    "V3.Workflows.EntityOwnerBasedACL":
      type: "object"
      required:
        - "has_update_access"
        - "has_update_owner_access"
        - "has_delete_access"
      properties:
        "has_update_access":
          type: "boolean"
        "has_update_owner_access":
          type: "boolean"
        "has_delete_access":
          type: "boolean"
    "V3.Workflows.EntityOwnerUpdate":
      type: "object"
      properties:
        "id":
          type: "string"
        "type":
          type: "string"
    "V3.Workflows.Filter":
      type: "object"
      required:
        - "operator"
        - "value"
        - "logicalOperator"
      properties:
        "operator":
          type: "string"
        "value":
          type: "string"
        "logicalOperator":
          type: "string"
    "V3.Workflows.FilterGroup":
      type: "object"
      required:
        - "type"
        - "filters"
      properties:
        "type":
          type: "string"
        "filters":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Workflows.Filter"}
    "V3.Workflows.GetWorkflowActionByIdResponse":
      type: "object"
      required:
        - "id"
        - "workflow_id"
        - "name"
        - "data"
      properties:
        "id":
          type: "integer"
          format: "int32"
        "workflow_id":
          type: "integer"
          format: "int32"
        "name":
          type: "string"
        "data": {}
    "V3.Workflows.GetWorkflowByIdResponse":
      type: "object"
      required:
        - "data"
      properties:
        "data": {"$ref": "#/components/schemas/V3.Workflows.WorkflowAPIResponse"}
    "V3.Workflows.GetWorkflowLogsResponse":
      type: "object"
      required:
        - "data"
        - "meta"
      properties:
        "data":
          type: "array"
          items:
            type: "object"
            properties:
              "id":
                type: "string"
              "status":
                type: "string"
                enum:
                  - "queued"
                  - "running"
                  - "successful"
                  - "partial"
                  - "failed"
              "incident_id":
                type: "string"
              "action_execution":
                type: "string"
              "message":
                type: "string"
              "executed_at":
                type: "string"
            required:
              - "id"
              - "status"
              - "incident_id"
              - "action_execution"
              - "message"
              - "executed_at"
        "meta":
          type: "object"
          properties:
            "total_count":
              type: "integer"
          required:
            - "total_count"
    "V3.Workflows.IssueStatusAndMessage":
      type: "object"
      required:
        - "messages"
        - "status_id"
      properties:
        "messages":
          type: "array"
          items:
            type: "string"
        "status_id":
          type: "integer"
          format: "int32"
    "V3.Workflows.JiraCreateTicket":
      type: "object"
      required:
        - "name"
        - "data"
      properties:
        "name":
          type: "string"
          enum:
            - "jira_create_ticket"
        "data":
          type: "object"
          properties:
            "account":
              type: "string"
            "project":
              type: "string"
            "issue_type":
              type: "string"
            "title":
              type: "string"
            "description":
              type: "string"
          required:
            - "account"
            - "project"
            - "issue_type"
            - "title"
            - "description"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseAction"}
    "V3.Workflows.JiraCreateTicketUpdate":
      type: "object"
      properties:
        "name":
          type: "string"
          enum:
            - "jira_create_ticket"
        "data":
          type: "object"
          properties:
            "account":
              type: "string"
            "project":
              type: "string"
            "issue_type":
              type: "string"
            "title":
              type: "string"
            "description":
              type: "string"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseActionUpdate"}
    "V3.Workflows.ListWorkflowAPIResponse":
      type: "object"
      required:
        - "data"
        - "meta"
      properties:
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Workflows.WorkflowAPIResponse"}
        "meta":
          type: "object"
          properties:
            "total_count":
              type: "integer"
              format: "int32"
            "acl":
              type: "object"
              unevaluatedProperties: {"$ref": "#/components/schemas/V3.Workflows.EntityOwnerBasedACL"}
          required:
            - "total_count"
    "V3.Workflows.ListWorkflowResponse":
      type: "object"
      required:
        - "data"
        - "metadata"
      properties:
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Workflows.WorkflowResponse"}
        "metadata":
          type: "object"
          properties:
            "total_count":
              type: "integer"
              format: "int32"
            "acl":
              type: "object"
              unevaluatedProperties: {"$ref": "#/components/schemas/V3.Workflows.EntityOwnerBasedACL"}
          required:
            - "total_count"
    "V3.Workflows.MsTeamsCreateMeetingLink":
      type: "object"
      required:
        - "name"
      properties:
        "name":
          type: "string"
          enum:
            - "msteams_create_meeting_link"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseAction"}
    "V3.Workflows.MsTeamsCreateMeetingLinkUpdate":
      type: "object"
      properties:
        "name":
          type: "string"
          enum:
            - "msteams_create_meeting_link"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseActionUpdate"}
    "V3.Workflows.MsTeamsMessageChannel":
      type: "object"
      required:
        - "name"
        - "data"
      properties:
        "name":
          type: "string"
          enum:
            - "msteams_message_channel"
        "data":
          type: "object"
          properties:
            "channel_id":
              type: "string"
            "message":
              type: "string"
          required:
            - "channel_id"
            - "message"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseAction"}
    "V3.Workflows.MsTeamsMessageChannelUpdate":
      type: "object"
      properties:
        "name":
          type: "string"
          enum:
            - "msteams_message_channel"
        "data":
          type: "object"
          properties:
            "channel_id":
              type: "string"
            "message":
              type: "string"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseActionUpdate"}
    "V3.Workflows.MsTeamsMessageUser":
      type: "object"
      required:
        - "name"
        - "data"
      properties:
        "name":
          type: "string"
          enum:
            - "msteams_message_user"
        "data":
          type: "object"
          properties:
            "member_id":
              type: "string"
            "message":
              type: "string"
          required:
            - "member_id"
            - "message"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseAction"}
    "V3.Workflows.MsTeamsMessageUserUpdate":
      type: "object"
      properties:
        "name":
          type: "string"
          enum:
            - "msteams_message_user"
        "data":
          type: "object"
          properties:
            "member_id":
              type: "string"
            "message":
              type: "string"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseActionUpdate"}
    "V3.Workflows.RunbookResponse":
      type: "object"
      required:
        - "id"
        - "name"
      properties:
        "id":
          type: "string"
        "name":
          type: "string"
    "V3.Workflows.SlackArchiveChannel":
      type: "object"
      required:
        - "name"
      properties:
        "name":
          type: "string"
          enum:
            - "slack_archive_channel"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseAction"}
    "V3.Workflows.SlackArchiveChannelUpdate":
      type: "object"
      properties:
        "name":
          type: "string"
          enum:
            - "slack_archive_channel"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseActionUpdate"}
    "V3.Workflows.SlackCreateIncidentChannel":
      type: "object"
      required:
        - "name"
        - "data"
      properties:
        "name":
          type: "string"
          enum:
            - "slack_create_incident_channel"
        "data":
          type: "object"
          properties:
            "auto_name":
              type: "boolean"
            "channel_name":
              type: "string"
          required:
            - "auto_name"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseAction"}
    "V3.Workflows.SlackCreateIncidentChannelUpdate":
      type: "object"
      properties:
        "name":
          type: "string"
          enum:
            - "slack_create_incident_channel"
        "data":
          type: "object"
          properties:
            "auto_name":
              type: "boolean"
            "channel_name":
              type: "string"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseActionUpdate"}
    "V3.Workflows.SlackMessageChannel":
      type: "object"
      required:
        - "name"
        - "data"
      properties:
        "name":
          type: "string"
          enum:
            - "slack_message_channel"
        "data":
          type: "object"
          properties:
            "channel_id":
              type: "string"
            "channel_name":
              type: "string"
            "message":
              type: "string"
          required:
            - "channel_id"
            - "channel_name"
            - "message"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseAction"}
    "V3.Workflows.SlackMessageChannelUpdate":
      type: "object"
      properties:
        "name":
          type: "string"
          enum:
            - "slack_message_channel"
        "data":
          type: "object"
          properties:
            "channel_id":
              type: "string"
            "channel_name":
              type: "string"
            "message":
              type: "string"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseActionUpdate"}
    "V3.Workflows.SlackMessageUser":
      type: "object"
      required:
        - "name"
        - "data"
      properties:
        "name":
          type: "string"
          enum:
            - "slack_message_user"
        "data":
          type: "object"
          properties:
            "member_id":
              type: "string"
            "message":
              type: "string"
          required:
            - "member_id"
            - "message"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseAction"}
    "V3.Workflows.SlackMessageUserUpdate":
      type: "object"
      properties:
        "name":
          type: "string"
          enum:
            - "slack_message_user"
        "data":
          type: "object"
          properties:
            "member_id":
              type: "string"
            "message":
              type: "string"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseActionUpdate"}
    "V3.Workflows.SqAddCommunicationChannel":
      type: "object"
      required:
        - "name"
        - "data"
      properties:
        "name":
          type: "string"
          enum:
            - "sq_add_communication_channel"
        "data":
          type: "object"
          properties:
            "channels":
              type: "array"
              items: {"$ref": "#/components/schemas/V3.Workflows.CommunicationChannel"}
          required:
            - "channels"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseAction"}
    "V3.Workflows.SqAddCommunicationChannelUpdate":
      type: "object"
      properties:
        "name":
          type: "string"
          enum:
            - "sq_add_communication_channel"
        "data":
          type: "object"
          properties:
            "channels":
              type: "array"
              items: {"$ref": "#/components/schemas/V3.Workflows.CommunicationChannel"}
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseActionUpdate"}
    "V3.Workflows.SqAddIncidentNote":
      type: "object"
      required:
        - "name"
        - "data"
      properties:
        "name":
          type: "string"
          enum:
            - "sq_add_incident_note"
        "data":
          type: "object"
          properties:
            "note":
              type: "string"
          required:
            - "note"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseAction"}
    "V3.Workflows.SqAddIncidentNoteUpdate":
      type: "object"
      properties:
        "name":
          type: "string"
          enum:
            - "sq_add_incident_note"
        "data":
          type: "object"
          properties:
            "note":
              type: "string"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseActionUpdate"}
    "V3.Workflows.SqCreateStatusPageIssue":
      type: "object"
      required:
        - "name"
        - "data"
      properties:
        "name":
          type: "string"
          enum:
            - "sq_add_status_page_issue"
        "data":
          type: "object"
          properties:
            "component_and_impact":
              type: "array"
              items: {"$ref": "#/components/schemas/V3.Workflows.ComponentAndImpact"}
            "issue_title":
              type: "string"
            "page_status_id":
              type: "integer"
              format: "int32"
            "status_and_message":
              type: "array"
              items: {"$ref": "#/components/schemas/V3.Workflows.IssueStatusAndMessage"}
            "status_page_id":
              type: "integer"
              format: "int32"
          required:
            - "component_and_impact"
            - "issue_title"
            - "page_status_id"
            - "status_and_message"
            - "status_page_id"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseAction"}
    "V3.Workflows.SqCreateStatusPageIssueUpdate":
      type: "object"
      properties:
        "name":
          type: "string"
          enum:
            - "sq_add_status_page_issue"
        "data":
          type: "object"
          properties:
            "component_and_impact":
              type: "array"
              items: {"$ref": "#/components/schemas/V3.Workflows.ComponentAndImpact"}
            "issue_title":
              type: "string"
            "page_status_id":
              type: "integer"
              format: "int32"
            "status_and_message":
              type: "array"
              items: {"$ref": "#/components/schemas/V3.Workflows.IssueStatusAndMessage"}
            "status_page_id":
              type: "integer"
              format: "int32"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseActionUpdate"}
    "V3.Workflows.SqMakeHTTPCall":
      type: "object"
      required:
        - "name"
        - "data"
      properties:
        "name":
          type: "string"
          enum:
            - "sq_make_http_call"
        "data":
          type: "object"
          properties:
            "method":
              type: "string"
              enum:
                - "GET"
                - "POST"
                - "PUT"
                - "PATCH"
                - "DELETE"
            "url":
              type: "string"
            "headers":
              type: "array"
              items:
                type: "object"
                properties:
                  "key":
                    type: "string"
                  "value":
                    type: "string"
                required:
                  - "key"
                  - "value"
            "body":
              type: "string"
          required:
            - "method"
            - "url"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseAction"}
    "V3.Workflows.SqMakeHTTPCallUpdate":
      type: "object"
      properties:
        "name":
          type: "string"
          enum:
            - "sq_make_http_call"
        "data":
          type: "object"
          properties:
            "method":
              type: "string"
              enum:
                - "GET"
                - "POST"
                - "PUT"
                - "PATCH"
                - "DELETE"
            "url":
              type: "string"
            "headers":
              type: "array"
              items:
                type: "object"
                properties:
                  "key":
                    type: "string"
                  "value":
                    type: "string"
                required:
                  - "key"
                  - "value"
            "body":
              type: "string"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseActionUpdate"}
    "V3.Workflows.SqMarkIncidentSLOAffecting":
      type: "object"
      required:
        - "name"
        - "data"
      properties:
        "name":
          type: "string"
          enum:
            - "sq_mark_incident_slo_affecting"
        "data":
          type: "object"
          properties:
            "slis":
              type: "array"
              items:
                type: "string"
            "slo":
              type: "integer"
              format: "int32"
          required:
            - "slis"
            - "slo"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseAction"}
    "V3.Workflows.SqMarkIncidentSLOAffectingUpdate":
      type: "object"
      properties:
        "name":
          type: "string"
          enum:
            - "sq_mark_incident_slo_affecting"
        "data":
          type: "object"
          properties:
            "slis":
              type: "array"
              items:
                type: "string"
            "slo":
              type: "integer"
              format: "int32"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseActionUpdate"}
    "V3.Workflows.SqSendEmail":
      type: "object"
      required:
        - "name"
        - "data"
      properties:
        "name":
          type: "string"
          enum:
            - "sq_send_email"
        "data":
          type: "object"
          properties:
            "to":
              type: "array"
              items:
                type: "string"
            "subject":
              type: "string"
            "body":
              type: "string"
          required:
            - "to"
            - "subject"
            - "body"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseAction"}
    "V3.Workflows.SqSendEmailUpdate":
      type: "object"
      properties:
        "name":
          type: "string"
          enum:
            - "sq_send_email"
        "data":
          type: "object"
          properties:
            "to":
              type: "array"
              items:
                type: "string"
            "subject":
              type: "string"
            "body":
              type: "string"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseActionUpdate"}
    "V3.Workflows.SqTriggerManualWebhook":
      type: "object"
      required:
        - "name"
        - "data"
      properties:
        "name":
          type: "string"
          enum:
            - "sq_trigger_manual_webhook"
        "data":
          type: "object"
          properties:
            "id":
              type: "string"
          required:
            - "id"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseAction"}
    "V3.Workflows.SqTriggerManualWebhookUpdate":
      type: "object"
      properties:
        "name":
          type: "string"
          enum:
            - "sq_trigger_manual_webhook"
        "data":
          type: "object"
          properties:
            "id":
              type: "string"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseActionUpdate"}
    "V3.Workflows.Tag":
      type: "object"
      properties:
        "color":
          type: "string"
        "key":
          type: "string"
        "value":
          type: "string"
    "V3.Workflows.UpdateActionsOrderRequest":
      type: "object"
      properties:
        "action_order":
          type: "array"
          items:
            type: "integer"
            format: "int32"
    "V3.Workflows.UpdateActionsOrderResponse":
      type: "object"
      required:
        - "data"
      properties:
        "data":
          type: "object"
          properties:
            "action_order":
              type: "array"
              items:
                type: "integer"
                format: "int32"
          required:
            - "action_order"
    "V3.Workflows.UpdateIncidentPriority":
      type: "object"
      required:
        - "name"
        - "data"
      properties:
        "name":
          type: "string"
          enum:
            - "sq_update_incident_priority"
        "data":
          type: "object"
          properties:
            "priority":
              type: "string"
              enum:
                - "P1"
                - "P2"
                - "P3"
                - "P4"
                - "P5"
                - "UNSET"
          required:
            - "priority"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseAction"}
    "V3.Workflows.UpdateIncidentPriorityUpdate":
      type: "object"
      properties:
        "name":
          type: "string"
          enum:
            - "sq_update_incident_priority"
        "data":
          type: "object"
          properties:
            "priority":
              type: "string"
              enum:
                - "P1"
                - "P2"
                - "P3"
                - "P4"
                - "P5"
                - "UNSET"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.BaseActionUpdate"}
    "V3.Workflows.UpdateWorkflowAPIResponse":
      type: "object"
      properties:
        "id":
          type: "integer"
          format: "int32"
        "owner_id":
          type: "string"
        "title":
          type: "string"
        "description":
          type: "string"
        "enabled":
          type: "boolean"
        "trigger":
          type: "string"
        "filters": {"$ref": "#/components/schemas/V3.Workflows.WorkflowFilters"}
        "tags":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Workflows.Tag"}
        "actions":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Workflows.ActionResponse"}
        "created_at":
          type: "string"
        "created_by":
          type: "string"
        "updated_at":
          type: "string"
        "updated_by":
          type: "string"
    "V3.Workflows.UpdateWorkflowRequest":
      type: "object"
      properties:
        "owner_id":
          type: "string"
        "title":
          type: "string"
        "description":
          type: "string"
        "enabled":
          type: "boolean"
        "trigger": {"$ref": "#/components/schemas/V3.Workflows.WorkflowTrigger"}
        "filters":
          type: "object"
          properties:
            "condition":
              type: "string"
            "filters":
              type: "array"
              items:
                type: "object"
                properties:
                  "type":
                    type: "string"
                  "value":
                    type: "string"
                required:
                  - "type"
                  - "value"
          required:
            - "condition"
            - "filters"
        "tags":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Workflows.Tag"}
        "actions":
          type: "array"
          items:
            type: "object"
            properties:
              "data":
                type: "object"
                properties:
                  "note":
                    type: "string"
                required:
                  - "note"
              "name":
                type: "string"
        "entity_owner":
          type: "object"
          properties:
            "id":
              type: "string"
            "type":
              type: "string"
          required:
            - "id"
            - "type"
    "V3.Workflows.WfDomainFilter":
      type: "object"
      properties:
        "type":
          type: "string"
        "key":
          type: "string"
        "value":
          type: "string"
        "fields": {"$ref": "#/components/schemas/V3.Workflows.WfDomainFilter"}
        "children":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Workflows.WfDomainFilter"}
    "V3.Workflows.Workflow":
      type: "object"
      required:
        - "team_id"
        - "actions"
        - "created_at"
        - "created_by"
        - "description"
        - "enabled"
        - "filters"
        - "filter_groups"
        - "id"
        - "owner_id"
        - "owner_type"
        - "tags"
        - "title"
        - "trigger"
      properties:
        "team_id":
          type: "string"
        "actions":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Workflows.ActionResponse"}
        "created_at":
          type: "string"
        "created_by":
          type: "string"
        "description":
          type: "string"
        "enabled":
          type: "boolean"
        "filters": {"$ref": "#/components/schemas/V3.Workflows.WfDomainFilter"}
        "filter_groups":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Workflows.FilterGroup"}
        "id":
          type: "integer"
          format: "int32"
        "owner_id":
          type: "string"
        "owner_type":
          type: "string"
          enum:
            - "user"
            - "squad"
        "tags":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Workflows.Tag"}
        "title":
          type: "string"
        "trigger": {"$ref": "#/components/schemas/V3.Workflows.WorkflowTrigger"}
        "updated_at":
          type: "string"
        "updated_by":
          type: "string"
        "execution_count":
          type: "integer"
          format: "int32"
    "V3.Workflows.WorkflowAPI":
      type: "object"
      required:
        - "id"
        - "owner_id"
        - "title"
        - "description"
        - "enabled"
        - "trigger"
        - "tags"
        - "actions"
        - "created_at"
        - "created_by"
      properties:
        "id":
          type: "integer"
          format: "int32"
        "owner_id":
          type: "string"
        "title":
          type: "string"
        "description":
          type: "string"
        "enabled":
          type: "boolean"
        "trigger":
          type: "string"
        "filters": {"$ref": "#/components/schemas/V3.Workflows.WorkflowFilters"}
        "tags":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Workflows.Tag"}
        "actions":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Workflows.ActionResponse"}
        "created_at":
          type: "string"
        "created_by":
          type: "string"
        "updated_at":
          type: "string"
        "updated_by":
          type: "string"
    "V3.Workflows.WorkflowAPIRequest":
      type: "object"
      required:
        - "owner_id"
        - "title"
        - "description"
        - "enabled"
        - "trigger"
        - "filters"
        - "tags"
        - "actions"
      properties:
        "owner_id":
          type: "string"
        "title":
          type: "string"
        "description":
          type: "string"
        "enabled":
          type: "boolean"
        "trigger":
          type: "string"
        "filters": {"$ref": "#/components/schemas/V3.Workflows.WorkflowFilters"}
        "tags":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Workflows.Tag"}
        "actions":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Workflows.ActionRequest"}
    "V3.Workflows.WorkflowAPIResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.WorkflowAPI"}
    "V3.Workflows.WorkflowFilters":
      type: "object"
      properties:
        "type":
          type: "string"
        "key":
          type: "string"
        "value":
          type: "string"
        "condition":
          type: "string"
          enum:
            - "and"
            - "or"
        "filters":
          type: "array"
          items: {"$ref": "#/components/schemas/V3.Workflows.WorkflowFilters"}
    "V3.Workflows.WorkflowResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V3.Workflows.Workflow"}
    "V3.Workflows.WorkflowTrigger":
      type: "string"
      enum:
        - "incident_triggered"
        - "incident_acknowledged"
        - "incident_resolved"
        - "incident_reassigned"
        - "incident_tag_updated"
        - "incident_priority_updated"
        - "incident_note_added"
    "V4.ChangeTimezoneResponse":
      type: "object"
      required:
        - "timeZone"
      properties:
        "timeZone":
          type: "string"
    "V4.CreateRotationRequest":
      type: "object"
      required:
        - "name"
        - "startDate"
        - "period"
        - "changeParticipantsFrequency"
        - "changeParticipantsUnit"
        - "participantGroups"
      properties:
        "name":
          type: "string"
        "color":
          type: "string"
        "startDate":
          type: "string"
        "period":
          type: "string"
        "customPeriodFrequency":
          type: "integer"
        "customPeriodUnit":
          type: "string"
        "shiftTimeSlots":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.ShiftTimeSlot"}
        "changeParticipantsFrequency":
          type: "integer"
        "changeParticipantsUnit":
          type: "string"
        "endDate":
          type: "string"
        "endsAfterIterations":
          type: "integer"
        "participantGroups":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.ParticipantGroup"}
    "V4.CreateScheduleOverrideRequest":
      type: "object"
      required:
        - "startTime"
        - "endTime"
        - "reason"
        - "overriddenParticipant"
        - "overrideWith"
      properties:
        "startTime":
          type: "string"
        "endTime":
          type: "string"
        "reason":
          type: "string"
        "overriddenParticipant": {"$ref": "#/components/schemas/V4.OverrideParticipantGroup"}
        "overrideWith": {"$ref": "#/components/schemas/V4.OverrideParticipantGroup"}
    "V4.CreateScheduleRequest":
      type: "object"
      required:
        - "name"
        - "description"
        - "teamID"
        - "ownerID"
        - "ownerType"
        - "timeZone"
        - "tags"
      properties:
        "name":
          type: "string"
        "description":
          type: "string"
        "teamID":
          type: "string"
        "ownerID":
          type: "string"
        "ownerType":
          type: "string"
          enum:
            - "user"
            - "squad"
        "timeZone":
          type: "string"
        "tags":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.Tag"}
    "V4.DeleteScheduleRequest":
      type: "object"
      required:
        - "replaceOnConflict"
      properties:
        "replaceOnConflict":
          type: "array"
          items:
            type: "object"
            properties:
              "escalationPolicyID":
                type: "string"
              "scheduleIDs":
                type: "array"
                items:
                  type: "integer"
              "userIDs":
                type: "array"
                items: {}
              "squadIDs":
                type: "array"
                items: {}
    "V4.GetRotationParticipantsResponse":
      type: "object"
      required:
        - "rotationID"
        - "participants"
      properties:
        "rotationID":
          type: "integer"
        "participants":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.ParticipantGroup"}
    "V4.ICalLink":
      type: "object"
      properties:
        "iCalLink":
          type: "string"
        "iCalLinkForMyOnCalls":
          type: "string"
    "V4.ICalLinkResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V4.ICalLink"}
    "V4.OverrideParticipantGroup":
      type: "object"
      required:
        - "group"
      properties:
        "group":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.Participant"}
    "V4.OverrideResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V4.ScheduleOverride"}
    "V4.Participant":
      type: "object"
      required:
        - "id"
        - "type"
      properties:
        "id":
          type: "string"
        "type":
          type: "string"
    "V4.ParticipantGroup":
      type: "object"
      required:
        - "participants"
      properties:
        "participants":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.Participant"}
    "V4.PauseResumeScheduleResponse":
      type: "object"
      required:
        - "action"
        - "success"
      properties:
        "action":
          type: "string"
        "success":
          type: "boolean"
    "V4.Rotation":
      type: "object"
      required:
        - "id"
        - "name"
        - "scheduleID"
        - "color"
        - "startDate"
        - "period"
        - "changeParticipantsFrequency"
        - "changeParticipantsUnit"
        - "createdAt"
        - "updatedAt"
      properties:
        "id":
          type: "integer"
        "name":
          type: "string"
        "scheduleID":
          type: "integer"
        "color":
          type: "string"
        "startDate":
          type: "string"
        "period":
          type: "string"
        "customPeriodFrequency":
          type: "integer"
        "customPeriodUnit":
          type: "string"
        "shiftTimeSlots":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.ShiftTimeSlot"}
        "changeParticipantsFrequency":
          type: "integer"
        "changeParticipantsUnit":
          type: "string"
        "endDate":
          type: "string"
        "endsAfterIterations":
          type: "integer"
        "rotationParticipants":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.ParticipantGroup"}
        "createdAt":
          type: "string"
        "updatedAt":
          type: "string"
    "V4.RotationParticipants":
      type: "object"
      required:
        - "rotationID"
        - "participantGroups"
      properties:
        "rotationID":
          type: "integer"
        "participantGroups":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.ParticipantGroup"}
    "V4.RotationParticipantsResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V4.RotationParticipants"}
    "V4.RotationResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V4.Rotation"}
    "V4.Schedule":
      type: "object"
      required:
        - "id"
        - "name"
        - "description"
        - "orgID"
        - "teamID"
        - "timeZone"
        - "paused"
        - "ownerID"
        - "ownerType"
        - "tags"
        - "createdAt"
        - "updatedAt"
      properties:
        "id":
          type: "integer"
        "name":
          type: "string"
        "description":
          type: "string"
        "orgID":
          type: "string"
        "teamID":
          type: "string"
        "timeZone":
          type: "string"
        "paused":
          type: "boolean"
        "ownerID":
          type: "string"
        "ownerType":
          type: "string"
          enum:
            - "user"
            - "squad"
        "tags":
          anyOf:
            - type: "array"
              items: {"$ref": "#/components/schemas/V4.Tag"}
            - type: "null"
        "createdAt":
          type: "string"
        "updatedAt":
          type: "string"
    "V4.ScheduleOverride":
      type: "object"
      required:
        - "id"
        - "orgID"
        - "teamID"
        - "scheduleID"
        - "startTime"
        - "endTime"
        - "reason"
        - "overriddenParticipant"
        - "overrideWith"
        - "createdAt"
        - "updatedAt"
      properties:
        "id":
          type: "integer"
        "orgID":
          type: "string"
        "teamID":
          type: "string"
        "scheduleID":
          type: "integer"
        "startTime":
          type: "string"
        "endTime":
          type: "string"
        "reason":
          type: "string"
        "overriddenParticipant": {"$ref": "#/components/schemas/V4.OverrideParticipantGroup"}
        "overrideWith": {"$ref": "#/components/schemas/V4.OverrideParticipantGroup"}
        "createdAt":
          type: "string"
        "updatedAt":
          type: "string"
    "V4.ScheduleResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V4.Schedule"}
    "V4.ShiftTimeSlot":
      type: "object"
      required:
        - "startHour"
        - "startMin"
        - "duration"
      properties:
        "startHour":
          type: "integer"
        "startMin":
          type: "integer"
        "duration":
          type: "integer"
        "dayOfWeek":
          type: "string"
    "V4.Squads.CreateSquadRequest":
      type: "object"
      required:
        - "owner_id"
        - "name"
        - "members"
      properties:
        "owner_id":
          type: "string"
        "name":
          type: "string"
        "members":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.Squads.SquadMember"}
    "V4.Squads.CreateSquadResponse":
      type: "object"
      required:
        - "organization_id"
        - "owner_id"
        - "id"
        - "name"
        - "slug"
        - "members"
        - "created_at"
        - "created_by"
      properties:
        "organization_id":
          type: "string"
        "owner_id":
          type: "string"
        "id":
          type: "string"
        "name":
          type: "string"
        "slug":
          type: "string"
        "members":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.Squads.SquadMember"}
        "created_at":
          type: "string"
        "created_by":
          type: "string"
    "V4.Squads.RemoveSquadMemberResponse":
      type: "object"
      required:
        - "id"
        - "members"
      properties:
        "id":
          type: "string"
        "members":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.Squads.SquadMember"}
    "V4.Squads.Squad":
      type: "object"
      required:
        - "id"
        - "org_id"
        - "team_id"
        - "name"
        - "members"
        - "createdAt"
        - "updatedAt"
      properties:
        "id":
          type: "string"
        "org_id":
          type: "string"
        "team_id":
          type: "string"
        "name":
          type: "string"
        "members":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.Squads.SquadMember"}
        "createdAt":
          type: "string"
        "createdBy":
          type: "string"
        "updatedAt":
          type: "string"
        "updatedBy":
          type: "string"
    "V4.Squads.SquadMember":
      type: "object"
      required:
        - "user_id"
      properties:
        "user_id":
          type: "string"
        "role":
          type: "string"
    "V4.Squads.SquadResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V4.Squads.Squad"}
    "V4.Squads.UpdateSquadMemberRequest":
      type: "object"
      required:
        - "role"
      properties:
        "role":
          type: "string"
    "V4.Squads.UpdateSquadMemberResponse":
      type: "object"
      required:
        - "id"
        - "members"
      properties:
        "id":
          type: "string"
        "members":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.Squads.SquadMember"}
    "V4.Squads.UpdateSquadNameRequest":
      type: "object"
      required:
        - "name"
      properties:
        "name":
          type: "string"
    "V4.Squads.UpdateSquadNameResponse":
      type: "object"
      required:
        - "id"
        - "name"
      properties:
        "id":
          type: "string"
        "name":
          type: "string"
    "V4.Squads.UpdateSquadRequest":
      type: "object"
      properties:
        "name":
          type: "string"
        "members":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.Squads.SquadMember"}
    "V4.StatusPages.ComponentGroups.Component":
      type: "object"
      properties:
        "id":
          type: "integer"
        "type":
          type: "string"
        "name":
          type: "string"
        "allowSubscription":
          type: "boolean"
        "description":
          type: "string"
        "status": {"$ref": "#/components/schemas/V4.StatusPages.ComponentGroups.ComponentStatus"}
        "underMaintenance":
          type: "boolean"
        "statusMaintenance": {"$ref": "#/components/schemas/V4.StatusPages.ComponentGroups.ComponentStatus"}
        "components":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.StatusPages.ComponentGroups.Component"}
        "isHidden":
          type: "boolean"
    "V4.StatusPages.ComponentGroups.ComponentGroup":
      type: "object"
      required:
        - "id"
        - "type"
        - "name"
        - "allowSubscription"
      properties:
        "id":
          type: "integer"
        "type":
          type: "string"
        "name":
          type: "string"
        "allowSubscription":
          type: "boolean"
        "description":
          type: "string"
        "status": {"$ref": "#/components/schemas/V4.StatusPages.ComponentGroups.ComponentStatus"}
        "underMaintenance":
          type: "boolean"
        "statusMaintenance": {"$ref": "#/components/schemas/V4.StatusPages.ComponentGroups.ComponentStatus"}
        "components":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.StatusPages.ComponentGroups.Component"}
        "isHidden":
          type: "boolean"
    "V4.StatusPages.ComponentGroups.ComponentGroupResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V4.StatusPages.ComponentGroups.ComponentGroup"}
    "V4.StatusPages.ComponentGroups.ComponentStatus":
      type: "object"
      required:
        - "id"
        - "name"
        - "color"
        - "slug"
      properties:
        "id":
          type: "integer"
        "name":
          type: "string"
        "color":
          type: "string"
        "slug":
          type: "string"
    "V4.StatusPages.ComponentGroups.CreateComponentGroupRequest":
      type: "object"
      required:
        - "name"
      properties:
        "name":
          type: "string"
        "description":
          type: "string"
        "allowSubscription":
          type: "boolean"
    "V4.StatusPages.ComponentGroups.CreateComponentGroupResponse":
      type: "object"
      required:
        - "id"
        - "pageID"
        - "name"
        - "allowSubscription"
      properties:
        "id":
          type: "integer"
        "pageID":
          type: "integer"
        "name":
          type: "string"
        "description":
          type: "string"
        "allowSubscription":
          type: "boolean"
    "V4.StatusPages.ComponentGroups.DeleteComponentGroupByIdResponse":
      type: "object"
      required:
        - "id"
        - "name"
        - "description"
        - "allowSubscription"
      properties:
        "id":
          type: "integer"
        "name":
          type: "string"
        "description":
          anyOf:
            - type: "string"
            - type: "null"
        "allowSubscription":
          type: "boolean"
    "V4.StatusPages.ComponentGroups.GetComponentGroupByIdResponse":
      type: "object"
      required:
        - "id"
        - "pageID"
        - "name"
        - "allowSubscription"
      properties:
        "id":
          type: "integer"
        "pageID":
          type: "integer"
        "name":
          type: "string"
        "description":
          type: "string"
        "allowSubscription":
          type: "boolean"
    "V4.StatusPages.Components.Component":
      type: "object"
      properties:
        "id":
          type: "integer"
        "type":
          type: "string"
        "name":
          type: "string"
        "allowSubscription":
          type: "boolean"
        "description":
          type: "string"
        "status": {"$ref": "#/components/schemas/V4.StatusPages.Components.ComponentStatus"}
        "underMaintenance":
          type: "boolean"
        "statusMaintenance": {"$ref": "#/components/schemas/V4.StatusPages.Components.ComponentStatus"}
        "components":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.StatusPages.Components.Component"}
        "isHidden":
          type: "boolean"
    "V4.StatusPages.Components.ComponentStatus":
      type: "object"
      required:
        - "id"
        - "name"
        - "color"
        - "slug"
      properties:
        "id":
          type: "integer"
        "name":
          type: "string"
        "color":
          type: "string"
        "slug":
          type: "string"
    "V4.StatusPages.Components.CreateComponentRequest":
      type: "object"
      required:
        - "name"
      properties:
        "name":
          type: "string"
        "description":
          type: "string"
        "allowSubscription":
          type: "boolean"
        "groupID":
          type: "string"
        "serviceID":
          type: "string"
    "V4.StatusPages.Components.CreateComponentResponse":
      type: "object"
      required:
        - "id"
        - "pageID"
        - "name"
        - "description"
        - "underMaintenance"
      properties:
        "id":
          type: "integer"
        "pageID":
          type: "integer"
        "name":
          type: "string"
        "description":
          type: "string"
        "statusID":
          type: "integer"
        "underMaintenance":
          type: "boolean"
        "groupID":
          type: "integer"
    "V4.StatusPages.Components.DeleteComponentByIdResponse":
      type: "object"
      required:
        - "id"
        - "name"
        - "description"
        - "allowSubscription"
      properties:
        "id":
          type: "integer"
        "name":
          type: "string"
        "description":
          type: "string"
        "allowSubscription":
          type: "boolean"
    "V4.StatusPages.Components.GetComponentByIdResponse":
      type: "object"
      required:
        - "id"
        - "pageID"
        - "name"
        - "description"
        - "underMaintenance"
      properties:
        "id":
          type: "integer"
        "pageID":
          type: "integer"
        "name":
          type: "string"
        "description":
          type: "string"
        "statusID":
          type: "integer"
        "underMaintenance":
          type: "boolean"
    "V4.StatusPages.Components.ListComponentsResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V4.StatusPages.Components.Component"}
    "V4.StatusPages.Components.UpdateComponentByIdRequest":
      type: "object"
      required:
        - "name"
      properties:
        "name":
          type: "string"
        "description":
          type: "string"
        "allowSubscription":
          type: "boolean"
        "groupID":
          type: "string"
        "serviceID":
          type: "string"
        "belongsToGroup":
          type: "string"
    "V4.StatusPages.Components.UpdateComponentByIdResponse":
      type: "object"
      required:
        - "id"
        - "pageID"
        - "name"
        - "description"
        - "allowSubscription"
      properties:
        "id":
          type: "integer"
        "pageID":
          type: "integer"
        "name":
          type: "string"
        "description":
          type: "string"
        "groupID":
          type: "integer"
        "allowSubscription":
          type: "boolean"
    "V4.StatusPages.CreateStatusPageRequest":
      type: "object"
      required:
        - "name"
        - "domainName"
        - "logoUrl"
        - "timezone"
        - "teamID"
        - "contactEmail"
        - "ownerType"
        - "ownerID"
      properties:
        "name":
          type: "string"
        "description":
          type: "string"
        "isPublic":
          type: "boolean"
        "domainName":
          type: "string"
        "customDomainName":
          type: "string"
        "logoUrl":
          type: "string"
        "timezone":
          type: "string"
        "teamID":
          type: "string"
        "themeColor": {"$ref": "#/components/schemas/V4.StatusPages.NewStatusPageThemeColor"}
        "components":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.StatusPages.NewStatusPageComponentList"}
        "contactEmail":
          type: "string"
        "allowWebhookSubscription":
          type: "boolean"
        "allowComponentsSubscription":
          type: "boolean"
        "allowMaintenanceSubscription":
          type: "boolean"
        "ownerType":
          type: "string"
          enum:
            - "team"
            - "user"
            - "squad"
        "ownerID":
          type: "string"
    "V4.StatusPages.CreateStatusPageResponse":
      type: "object"
      required:
        - "id"
        - "organizationID"
        - "name"
        - "isPublic"
        - "timezone"
        - "domainName"
        - "contactEmail"
        - "allowComponentsSubscription"
        - "allowMaintenanceSubscription"
        - "allowWebhookSubscription"
        - "ownerType"
        - "ownerID"
        - "teamID"
      properties:
        "id":
          type: "integer"
        "organizationID":
          type: "string"
        "name":
          type: "string"
        "isPublic":
          type: "boolean"
        "timezone":
          type: "string"
        "description":
          type: "string"
        "domainName":
          type: "string"
        "contactEmail":
          type: "string"
        "themeColor": {"$ref": "#/components/schemas/V4.StatusPages.NewStatusPageThemeColor"}
        "components":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.StatusPages.NewStatusPageComponentList"}
        "allowComponentsSubscription":
          type: "boolean"
        "allowMaintenanceSubscription":
          type: "boolean"
        "allowWebhookSubscription":
          type: "boolean"
        "ownerType":
          type: "string"
        "ownerID":
          type: "string"
        "teamID":
          type: "string"
    "V4.StatusPages.DeleteStatusPageByIdRequest":
      type: "object"
      required:
        - "name"
        - "description"
        - "belongsToGroup"
        - "groupID"
      properties:
        "name":
          type: "string"
        "description":
          type: "string"
        "belongsToGroup":
          type: "boolean"
        "groupID":
          type: "integer"
    "V4.StatusPages.DeleteStatusPageByIdResponse":
      type: "object"
      required:
        - "id"
        - "name"
        - "organizationID"
        - "teamID"
      properties:
        "id":
          type: "integer"
        "name":
          type: "string"
        "organizationID":
          type: "string"
        "teamID":
          type: "string"
    "V4.StatusPages.GetStatusPageByIdResponse":
      type: "object"
      required:
        - "id"
        - "organizationID"
        - "name"
        - "isPublic"
        - "timezone"
        - "domainName"
        - "customDomainName"
        - "contactEmail"
        - "themeColor"
        - "allowComponentsSubscription"
        - "allowMaintenanceSubscription"
        - "allowWebhookSubscription"
        - "ownerType"
        - "ownerID"
        - "teamID"
      properties:
        "id":
          type: "integer"
        "organizationID":
          type: "string"
        "name":
          type: "string"
        "isPublic":
          type: "boolean"
        "timezone":
          type: "string"
        "description":
          type: "string"
        "domainName":
          type: "string"
        "customDomainName":
          type: "string"
        "contactEmail":
          type: "string"
        "themeColor":
          type: "object"
          properties:
            "primary":
              type: "string"
            "secondary":
              type: "string"
          required:
            - "primary"
            - "secondary"
        "allowComponentsSubscription":
          type: "boolean"
        "allowMaintenanceSubscription":
          type: "boolean"
        "allowWebhookSubscription":
          type: "boolean"
        "ownerType":
          type: "string"
        "ownerID":
          type: "string"
        "teamID":
          type: "string"
    "V4.StatusPages.Issues.ComponentStatus":
      type: "object"
      required:
        - "id"
        - "name"
        - "color"
        - "slug"
      properties:
        "id":
          type: "integer"
        "name":
          type: "string"
        "color":
          type: "string"
        "slug":
          type: "string"
    "V4.StatusPages.Issues.CreateIssueRequest":
      type: "object"
      required:
        - "title"
        - "components"
        - "issues"
      properties:
        "title":
          type: "string"
        "statusID":
          type: "integer"
        "components":
          type: "array"
          items:
            type: "object"
            properties:
              "id":
                type: "integer"
              "statusID":
                type: "integer"
        "issues":
          type: "array"
          items:
            type: "object"
            properties:
              "stateID":
                type: "integer"
              "stateMessages":
                type: "array"
                items:
                  type: "object"
                  properties:
                    "text":
                      type: "string"
                    "timestamp":
                      type: "string"
                      format: "date-time"
    "V4.StatusPages.Issues.CreateIssueResponse":
      type: "object"
      required:
        - "id"
        - "componentIDs"
        - "title"
      properties:
        "id":
          type: "integer"
        "componentIDs":
          type: "array"
          items:
            type: "integer"
        "title":
          type: "string"
    "V4.StatusPages.Issues.DeleteIssueByIdResponse":
      type: "object"
      required:
        - "id"
        - "componentIDs"
        - "title"
      properties:
        "id":
          type: "integer"
        "componentIDs":
          anyOf:
            - type: "array"
              items:
                type: "integer"
            - type: "null"
        "title":
          type: "string"
    "V4.StatusPages.Issues.GetIssueByIdData":
      type: "object"
      required:
        - "id"
        - "title"
        - "lastUpdatedAt"
        - "components"
        - "issues"
        - "currentIssueState"
        - "pageStatus"
        - "underMaintenance"
        - "statusMaintenance"
        - "pageID"
        - "isMigrated"
      properties:
        "id":
          type: "integer"
        "title":
          type: "string"
        "lastUpdatedAt":
          type: "string"
          format: "date-time"
        "components":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.StatusPages.Issues.IssueComponentDetail"}
        "issues":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.StatusPages.Issues.IssueDetail"}
        "currentIssueState": {"$ref": "#/components/schemas/V4.StatusPages.Issues.ComponentStatus"}
        "pageStatus": {"$ref": "#/components/schemas/V4.StatusPages.Issues.ComponentStatus"}
        "underMaintenance":
          type: "boolean"
        "statusMaintenance": {"$ref": "#/components/schemas/V4.StatusPages.Issues.ComponentStatus"}
        "pageID":
          type: "integer"
        "isMigrated":
          type: "boolean"
    "V4.StatusPages.Issues.GetIssueByIdResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V4.StatusPages.Issues.GetIssueByIdData"}
    "V4.StatusPages.Issues.Issue":
      type: "object"
      properties:
        "id":
          type: "integer"
        "title":
          type: "string"
        "components":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.StatusPages.Issues.IssueComponent"}
        "currentState": {"$ref": "#/components/schemas/V4.StatusPages.Issues.IssueState"}
        "createdAt":
          type: "string"
          format: "date-time"
    "V4.StatusPages.Issues.IssueComponent":
      type: "object"
      properties:
        "id":
          type: "integer"
        "name":
          type: "string"
    "V4.StatusPages.Issues.IssueComponentDetail":
      type: "object"
      properties:
        "id":
          type: "integer"
        "status": {"$ref": "#/components/schemas/V4.StatusPages.Issues.ComponentStatus"}
        "underMaintenance":
          type: "boolean"
        "statusMaintenance": {"$ref": "#/components/schemas/V4.StatusPages.Issues.ComponentStatus"}
    "V4.StatusPages.Issues.IssueDetail":
      type: "object"
      properties:
        "state": {"$ref": "#/components/schemas/V4.StatusPages.Issues.ComponentStatus"}
        "stateMessages":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.StatusPages.Issues.IssueStateMessage"}
    "V4.StatusPages.Issues.IssueResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V4.StatusPages.Issues.Issue"}
    "V4.StatusPages.Issues.IssueState":
      type: "object"
      required:
        - "id"
        - "name"
        - "color"
        - "slug"
      properties:
        "id":
          type: "integer"
        "name":
          type: "string"
        "color":
          type: "string"
        "slug":
          type: "string"
    "V4.StatusPages.Issues.IssueStateMessage":
      type: "object"
      properties:
        "id":
          type: "integer"
        "text":
          type: "string"
        "timestamp":
          type: "string"
          format: "date-time"
    "V4.StatusPages.Issues.ListIssuesResponse":
      type: "object"
      required:
        - "data"
        - "meta"
      properties:
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.StatusPages.Issues.Issue"}
        "meta":
          type: "object"
          properties:
            "totalCount":
              type: "integer"
          required:
            - "totalCount"
    "V4.StatusPages.Issues.ListStatusPageIssueStatesResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V4.StatusPages.Issues.StatusPageIssueState"}
    "V4.StatusPages.Issues.StatusPageIssueState":
      type: "object"
      required:
        - "ID"
        - "Idx"
        - "PageID"
        - "Name"
        - "Color"
        - "DefaultMessage"
        - "createdAt"
        - "updatedAt"
        - "deletedAt"
      properties:
        "ID":
          type: "integer"
        "Idx":
          type: "integer"
        "PageID":
          type: "integer"
        "Name":
          type: "string"
        "Color":
          type: "string"
        "DefaultMessage":
          type: "string"
        "createdAt":
          type: "string"
          format: "date-time"
        "updatedAt":
          type: "string"
          format: "date-time"
        "deletedAt":
          anyOf:
            - type: "string"
              format: "date-time"
            - type: "null"
    "V4.StatusPages.Issues.UpdateIssueRequest":
      type: "object"
      required:
        - "title"
        - "components"
        - "issues"
      properties:
        "title":
          type: "string"
        "statusID":
          type: "integer"
        "components":
          type: "array"
          items:
            type: "object"
            properties:
              "id":
                type: "integer"
              "statusID":
                type: "integer"
        "issues":
          type: "array"
          items:
            type: "object"
            properties:
              "stateID":
                type: "integer"
              "stateMessages":
                type: "array"
                items:
                  type: "object"
                  properties:
                    "text":
                      type: "string"
                    "timestamp":
                      type: "string"
                      format: "date-time"
    "V4.StatusPages.Issues.UpdateIssueResponse":
      type: "object"
      required:
        - "id"
        - "componentIDs"
        - "title"
      properties:
        "id":
          type: "integer"
        "componentIDs":
          type: "array"
          items:
            type: "integer"
        "title":
          type: "string"
    "V4.StatusPages.ListStatusPagesResponse":
      type: "object"
      required:
        - "data"
        - "meta"
      properties:
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.StatusPages.StatusPage"}
        "meta":
          type: "object"
          properties:
            "totalCount":
              type: "integer"
            "orgTotalCount":
              type: "integer"
          required:
            - "totalCount"
            - "orgTotalCount"
    "V4.StatusPages.ListSubscribersResponse":
      type: "object"
      required:
        - "data"
      properties:
        "data":
          anyOf:
            - type: "array"
              items: {"$ref": "#/components/schemas/V4.StatusPages.StatusPageSubscriber"}
            - type: "null"
        "meta": {"$ref": "#/components/schemas/V4.StatusPages.ListSubscribersResponseMeta"}
    "V4.StatusPages.ListSubscribersResponseMeta":
      type: "object"
      required:
        - "maximumSubscribersLimit"
        - "lastWeekSubscribersCount"
      properties:
        "totalSubscribersCount": {"$ref": "#/components/schemas/V4.StatusPages.TotalSubscribersCount"}
        "maximumSubscribersLimit":
          type: "integer"
        "lastWeekSubscribersCount":
          type: "integer"
    "V4.StatusPages.Maintenances.CreateMaintenanceRequest":
      type: "object"
      required:
        - "title"
        - "note"
        - "components"
        - "startTime"
        - "endTime"
      properties:
        "title":
          type: "string"
        "note":
          type: "string"
        "components":
          type: "array"
          items:
            type: "integer"
        "startTime":
          type: "string"
          format: "date-time"
        "endTime":
          type: "string"
          format: "date-time"
    "V4.StatusPages.Maintenances.CreateMaintenanceResponse":
      type: "object"
      required:
        - "id"
        - "title"
        - "pageID"
        - "note"
        - "startTime"
        - "endTime"
      properties:
        "id":
          type: "integer"
        "title":
          type: "string"
        "pageID":
          type: "integer"
        "note":
          type: "string"
        "components":
          type: "array"
          items:
            type: "integer"
        "startTime":
          type: "string"
          format: "date-time"
        "endTime":
          type: "string"
          format: "date-time"
    "V4.StatusPages.Maintenances.DeleteMaintenanceByIdResponse":
      type: "object"
      required:
        - "id"
        - "title"
        - "pageID"
        - "note"
        - "startTime"
        - "endTime"
      properties:
        "id":
          type: "integer"
        "title":
          type: "string"
        "pageID":
          type: "integer"
        "note":
          type: "string"
        "components":
          type: "array"
          items:
            type: "integer"
        "startTime":
          type: "string"
          format: "date-time"
        "endTime":
          type: "string"
          format: "date-time"
    "V4.StatusPages.Maintenances.GetMaintenanceByIdResponse":
      type: "object"
      required:
        - "ID"
        - "PageID"
        - "Title"
        - "Note"
        - "StartTime"
        - "EndTime"
        - "createdAt"
        - "updatedAt"
        - "deletedAt"
      properties:
        "ID":
          type: "integer"
        "PageID":
          type: "integer"
        "ComponentIDList":
          type: "array"
          items:
            type: "integer"
        "Title":
          type: "string"
        "Note":
          type: "string"
        "StartTime":
          type: "string"
          format: "date-time"
        "EndTime":
          type: "string"
          format: "date-time"
        "createdAt":
          type: "string"
          format: "date-time"
        "updatedAt":
          type: "string"
          format: "date-time"
        "deletedAt":
          anyOf:
            - type: "string"
              format: "date-time"
            - type: "null"
    "V4.StatusPages.Maintenances.ListMaintenancesResponse":
      type: "object"
      required:
        - "data"
        - "meta"
      properties:
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.StatusPages.Maintenances.Maintenance"}
        "meta":
          type: "object"
          properties:
            "totalCount":
              type: "integer"
          required:
            - "totalCount"
    "V4.StatusPages.Maintenances.Maintenance":
      type: "object"
      properties:
        "id":
          type: "integer"
        "title":
          type: "string"
        "pageID":
          type: "integer"
        "note":
          type: "string"
        "components":
          type: "array"
          items:
            type: "object"
            properties:
              "id":
                type: "integer"
              "name":
                type: "string"
              "groupName":
                type: "string"
        "startTime":
          type: "string"
          format: "date-time"
        "endTime":
          type: "string"
          format: "date-time"
        "maintenanceState":
          type: "string"
    "V4.StatusPages.Maintenances.MaintenanceResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V4.StatusPages.Maintenances.Maintenance"}
    "V4.StatusPages.Maintenances.UpdateMaintenanceByIdRequest":
      type: "object"
      required:
        - "title"
        - "note"
        - "startTime"
        - "endTime"
      properties:
        "title":
          type: "string"
        "note":
          type: "string"
        "components":
          type: "array"
          items:
            type: "integer"
        "startTime":
          type: "string"
          format: "date-time"
        "endTime":
          type: "string"
          format: "date-time"
    "V4.StatusPages.Maintenances.UpdateMaintenanceByIdResponse":
      type: "object"
      required:
        - "id"
        - "title"
        - "pageID"
        - "note"
        - "startTime"
        - "endTime"
      properties:
        "id":
          type: "integer"
        "title":
          type: "string"
        "pageID":
          type: "integer"
        "note":
          type: "string"
        "components":
          type: "array"
          items:
            type: "integer"
        "startTime":
          type: "string"
          format: "date-time"
        "endTime":
          type: "string"
          format: "date-time"
    "V4.StatusPages.NewStatusPageComponent":
      type: "object"
      required:
        - "type"
        - "name"
        - "allowSubscription"
      properties:
        "type":
          type: "string"
          enum:
            - "component"
            - "group"
        "name":
          type: "string"
        "allowSubscription":
          type: "boolean"
        "description":
          type: "string"
        "serviceID":
          type: "string"
    "V4.StatusPages.NewStatusPageComponentList":
      type: "object"
      required:
        - "type"
        - "name"
      properties:
        "type":
          type: "string"
          enum:
            - "component"
            - "group"
        "name":
          type: "string"
        "allowSubscription":
          type: "boolean"
        "description":
          type: "string"
        "components":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.StatusPages.NewStatusPageComponent"}
    "V4.StatusPages.NewStatusPageThemeColor":
      type: "object"
      properties:
        "primary":
          type: "string"
        "secondary":
          type: "string"
    "V4.StatusPages.StatusPage":
      type: "object"
      required:
        - "id"
        - "name"
        - "isPublic"
        - "domainName"
        - "customDomainName"
        - "timezone"
        - "logoUrl"
        - "components"
        - "isCustomDomainEnabled"
        - "isCustomARecordVerified"
        - "isCustomTxtVerified"
        - "txtRecord"
        - "aRecord"
        - "subscribersCount"
        - "status"
        - "underMaintenance"
        - "statusMaintenance"
        - "ownerType"
        - "ownerID"
      properties:
        "id":
          type: "integer"
        "name":
          type: "string"
        "isPublic":
          type: "boolean"
        "domainName":
          type: "string"
        "customDomainName":
          type: "string"
        "timezone":
          type: "string"
        "logoUrl":
          type: "string"
        "components":
          type: "array"
          items:
            type: "object"
            properties:
              "id":
                type: "integer"
              "name":
                type: "string"
            required:
              - "id"
              - "name"
        "isCustomDomainEnabled":
          type: "boolean"
        "isCustomARecordVerified":
          type: "boolean"
        "isCustomTxtVerified":
          type: "boolean"
        "txtRecord":
          type: "string"
        "aRecord":
          type: "string"
        "subscribersCount":
          type: "integer"
        "status":
          type: "object"
          properties:
            "id":
              type: "integer"
            "name":
              type: "string"
            "color":
              type: "string"
            "slug":
              type: "string"
          required:
            - "id"
            - "name"
            - "color"
            - "slug"
        "underMaintenance":
          type: "boolean"
        "statusMaintenance":
          type: "object"
          properties:
            "id":
              type: "integer"
            "name":
              type: "string"
            "color":
              type: "string"
            "slug":
              type: "string"
          required:
            - "id"
            - "name"
            - "color"
            - "slug"
        "ownerType":
          type: "string"
        "ownerID":
          type: "string"
    "V4.StatusPages.StatusPageResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V4.StatusPages.StatusPage"}
    "V4.StatusPages.StatusPageStatus":
      type: "object"
      required:
        - "id"
        - "name"
        - "status"
        - "description"
        - "color"
      properties:
        "id":
          type: "integer"
        "name":
          type: "string"
        "status":
          type: "string"
        "description":
          type: "string"
        "color":
          type: "string"
    "V4.StatusPages.StatusPageStatusesResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V4.StatusPages.StatusPageStatus"}
    "V4.StatusPages.StatusPageSubscriber":
      type: "object"
      required:
        - "id"
        - "type"
        - "emailID"
        - "webhookURL"
        - "status"
        - "subscribedOn"
      properties:
        "id":
          type: "integer"
        "type":
          type: "string"
        "emailID":
          type: "string"
        "webhookURL":
          type: "string"
        "status":
          type: "string"
        "componentList":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.StatusPages.StatusPageSubscriberComponent"}
        "subscribedOn":
          type: "string"
          format: "date-time"
    "V4.StatusPages.StatusPageSubscriberComponent":
      type: "object"
      required:
        - "id"
        - "name"
      properties:
        "id":
          type: "integer"
        "name":
          type: "string"
    "V4.StatusPages.StatusPageSubscriberResponse":
      type: "object"
      allOf:
        - {"$ref": "#/components/schemas/V4.StatusPages.StatusPageSubscriber"}
    "V4.StatusPages.TotalSubscribersCount":
      type: "object"
      required:
        - "totalCount"
      properties:
        "totalCount":
          type: "integer"
    "V4.StatusPages.UpdateStatusPageByIdRequest":
      type: "object"
      required:
        - "name"
        - "isPublic"
        - "domainName"
        - "teamID"
        - "themeColor"
        - "contactEmail"
        - "ownerType"
        - "ownerID"
      properties:
        "name":
          type: "string"
        "description":
          type: "string"
        "isPublic":
          type: "boolean"
        "domainName":
          type: "string"
        "customDomainName":
          type: "string"
        "logoUrl":
          type: "string"
        "timezone":
          type: "string"
        "teamID":
          type: "string"
        "themeColor":
          type: "object"
          properties:
            "primary":
              type: "string"
            "secondary":
              type: "string"
          required:
            - "primary"
            - "secondary"
        "allowComponentsSubscription":
          type: "boolean"
        "allowMaintenanceSubscription":
          type: "boolean"
        "allowWebhookSubscription":
          type: "boolean"
        "components":
          type: "array"
          items:
            type: "object"
            properties:
              "type":
                type: "string"
              "name":
                type: "string"
              "allowSubscription":
                type: "boolean"
              "description":
                type: "string"
              "components":
                type: "array"
                items:
                  type: "object"
                  properties:
                    "type":
                      type: "string"
                    "name":
                      type: "string"
                    "allowSubscription":
                      type: "boolean"
                    "description":
                      type: "string"
                    "serviceID":
                      type: "string"
        "contactEmail":
          type: "string"
        "isCustomDomainEnabled":
          type: "boolean"
        "hideFromSearchEngines":
          type: "boolean"
        "ownerType":
          type: "string"
        "ownerID":
          type: "string"
    "V4.StatusPages.UpdateStatusPageByIdResponse":
      type: "object"
      required:
        - "id"
        - "name"
        - "isPublic"
        - "timezone"
        - "domainName"
        - "customDomainName"
        - "contactEmail"
        - "themeColor"
        - "allowComponentsSubscription"
        - "allowMaintenanceSubscription"
        - "allowWebhookSubscription"
        - "hideFromSearchEngines"
        - "ownerType"
        - "ownerID"
        - "teamID"
      properties:
        "id":
          type: "integer"
        "organizationID":
          type: "string"
        "name":
          type: "string"
        "isPublic":
          type: "boolean"
        "timezone":
          type: "string"
        "description":
          type: "string"
        "domainName":
          type: "string"
        "customDomainName":
          type: "string"
        "contactEmail":
          type: "string"
        "themeColor":
          type: "object"
          properties:
            "primary":
              type: "string"
            "secondary":
              type: "string"
          required:
            - "primary"
            - "secondary"
        "allowComponentsSubscription":
          type: "boolean"
        "allowMaintenanceSubscription":
          type: "boolean"
        "allowWebhookSubscription":
          type: "boolean"
        "hideFromSearchEngines":
          type: "boolean"
        "ownerType":
          type: "string"
        "ownerID":
          type: "string"
        "teamID":
          type: "string"
    "V4.Tag":
      type: "object"
      required:
        - "key"
        - "value"
        - "color"
      properties:
        "key":
          type: "string"
        "value":
          type: "string"
        "color":
          type: "string"
    "V4.UpdateRotationParticipantsRequest":
      type: "object"
      required:
        - "participantGroups"
      properties:
        "participantGroups":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.ParticipantGroup"}
    "V4.UpdateRotationRequest":
      type: "object"
      required:
        - "name"
        - "startDate"
        - "period"
        - "changeParticipantsFrequency"
        - "changeParticipantsUnit"
      properties:
        "name":
          type: "string"
        "color":
          type: "string"
        "startDate":
          type: "string"
        "period":
          type: "string"
        "customPeriodFrequency":
          type: "integer"
        "customPeriodUnit":
          type: "string"
        "shiftTimeSlots":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.ShiftTimeSlot"}
        "changeParticipantsFrequency":
          type: "integer"
        "changeParticipantsUnit":
          type: "string"
        "endDate":
          type: "string"
        "endsAfterIterations":
          type: "integer"
    "V4.UpdateScheduleOverrideRequest":
      type: "object"
      required:
        - "startTime"
        - "endTime"
        - "reason"
        - "overriddenParticipant"
        - "overrideWith"
      properties:
        "startTime":
          type: "string"
        "endTime":
          type: "string"
        "reason":
          type: "string"
        "overriddenParticipant": {"$ref": "#/components/schemas/V4.OverrideParticipantGroup"}
        "overrideWith": {"$ref": "#/components/schemas/V4.OverrideParticipantGroup"}
    "V4.UpdateScheduleRequest":
      type: "object"
      required:
        - "name"
        - "description"
        - "ownerID"
        - "ownerType"
        - "tags"
      properties:
        "name":
          type: "string"
        "description":
          type: "string"
        "ownerID":
          type: "string"
        "ownerType":
          type: "string"
          enum:
            - "user"
            - "squad"
        "tags":
          type: "array"
          items: {"$ref": "#/components/schemas/V4.Tag"}
  securitySchemes:
    "BearerAuth":
      type: "http"
      scheme: "bearer"
servers:
  - url: "https://api.squadcast.tech"
    description: "staging env"
