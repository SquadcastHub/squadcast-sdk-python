"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, ClientOwner, HttpClient, close_clients
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, get_default_logger
from .utils.retries import RetryConfig
import httpx
import importlib
from openapi import models, utils
from openapi._hooks import SDKHooks
from openapi.types import OptionalNullable, UNSET
import sys
from typing import Any, Callable, Dict, Optional, TYPE_CHECKING, Union, cast
import weakref

if TYPE_CHECKING:
    from openapi.additionalresponders import AdditionalResponders
    from openapi.analytics import Analytics
    from openapi.communicationcards import CommunicationCards
    from openapi.componentgroups import ComponentGroups
    from openapi.components import Components
    from openapi.dedupkeys import DedupKeys
    from openapi.escalationpolicies_sdk import EscalationPoliciesSDK
    from openapi.exports import Exports
    from openapi.exportschedule import ExportSchedule
    from openapi.extensions import Extensions
    from openapi.globaleventrules import GlobalEventRules
    from openapi.globaloncallreminderrules_sdk import GlobalOncallReminderRulesSDK
    from openapi.incidents import Incidents
    from openapi.issues import Issues
    from openapi.maintenances import Maintenances
    from openapi.overlays import Overlays
    from openapi.overrides import Overrides
    from openapi.postmortems_sdk import PostmortemsSDK
    from openapi.rotations import Rotations
    from openapi.rules import Rules
    from openapi.rulesets import Rulesets
    from openapi.runbooks_sdk import RunbooksSDK
    from openapi.schedules_sdk import SchedulesSDK
    from openapi.services_sdk import ServicesSDK
    from openapi.slos_sdk import SlosSDK
    from openapi.snoozenotifications import SnoozeNotifications
    from openapi.squads_sdk import SquadsSDK
    from openapi.squadsv3 import SquadsV3
    from openapi.squadsv4 import SquadsV4
    from openapi.statuspages_sdk_1 import StatusPagesSDK1
    from openapi.statuspages_sdk_2 import StatuspagesSDK2
    from openapi.subscribers import Subscribers
    from openapi.teams import Teams
    from openapi.users import Users
    from openapi.webforms_sdk import WebformsSDK
    from openapi.webhooks import Webhooks
    from openapi.workflows_sdk import WorkflowsSDK


class SquadcastSDK(BaseSDK):
    analytics: "Analytics"
    escalation_policies: "EscalationPoliciesSDK"
    exports: "Exports"
    extensions: "Extensions"
    webhooks: "Webhooks"
    incidents: "Incidents"
    global_event_rules: "GlobalEventRules"
    rulesets: "Rulesets"
    rules: "Rules"
    global_oncall_reminder_rules: "GlobalOncallReminderRulesSDK"
    postmortems: "PostmortemsSDK"
    communication_cards: "CommunicationCards"
    runbooks: "RunbooksSDK"
    additional_responders: "AdditionalResponders"
    snooze_notifications: "SnoozeNotifications"
    users: "Users"
    services: "ServicesSDK"
    dedup_keys: "DedupKeys"
    overlays: "Overlays"
    slos: "SlosSDK"
    squads: "SquadsSDK"
    squads_v3: "SquadsV3"
    teams: "Teams"
    webforms: "WebformsSDK"
    workflows: "WorkflowsSDK"
    schedules: "SchedulesSDK"
    export_schedule: "ExportSchedule"
    overrides: "Overrides"
    rotations: "Rotations"
    squads_v4: "SquadsV4"
    status_pages: "StatusPagesSDK1"
    components: "Components"
    component_groups: "ComponentGroups"
    issues: "Issues"
    maintenances: "Maintenances"
    statuspages: "StatuspagesSDK2"
    subscribers: "Subscribers"
    _sub_sdk_map = {
        "analytics": ("openapi.analytics", "Analytics"),
        "escalation_policies": (
            "openapi.escalationpolicies_sdk",
            "EscalationPoliciesSDK",
        ),
        "exports": ("openapi.exports", "Exports"),
        "extensions": ("openapi.extensions", "Extensions"),
        "webhooks": ("openapi.webhooks", "Webhooks"),
        "incidents": ("openapi.incidents", "Incidents"),
        "global_event_rules": ("openapi.globaleventrules", "GlobalEventRules"),
        "rulesets": ("openapi.rulesets", "Rulesets"),
        "rules": ("openapi.rules", "Rules"),
        "global_oncall_reminder_rules": (
            "openapi.globaloncallreminderrules_sdk",
            "GlobalOncallReminderRulesSDK",
        ),
        "postmortems": ("openapi.postmortems_sdk", "PostmortemsSDK"),
        "communication_cards": ("openapi.communicationcards", "CommunicationCards"),
        "runbooks": ("openapi.runbooks_sdk", "RunbooksSDK"),
        "additional_responders": (
            "openapi.additionalresponders",
            "AdditionalResponders",
        ),
        "snooze_notifications": ("openapi.snoozenotifications", "SnoozeNotifications"),
        "users": ("openapi.users", "Users"),
        "services": ("openapi.services_sdk", "ServicesSDK"),
        "dedup_keys": ("openapi.dedupkeys", "DedupKeys"),
        "overlays": ("openapi.overlays", "Overlays"),
        "slos": ("openapi.slos_sdk", "SlosSDK"),
        "squads": ("openapi.squads_sdk", "SquadsSDK"),
        "squads_v3": ("openapi.squadsv3", "SquadsV3"),
        "teams": ("openapi.teams", "Teams"),
        "webforms": ("openapi.webforms_sdk", "WebformsSDK"),
        "workflows": ("openapi.workflows_sdk", "WorkflowsSDK"),
        "schedules": ("openapi.schedules_sdk", "SchedulesSDK"),
        "export_schedule": ("openapi.exportschedule", "ExportSchedule"),
        "overrides": ("openapi.overrides", "Overrides"),
        "rotations": ("openapi.rotations", "Rotations"),
        "squads_v4": ("openapi.squadsv4", "SquadsV4"),
        "status_pages": ("openapi.statuspages_sdk_1", "StatusPagesSDK1"),
        "components": ("openapi.components", "Components"),
        "component_groups": ("openapi.componentgroups", "ComponentGroups"),
        "issues": ("openapi.issues", "Issues"),
        "maintenances": ("openapi.maintenances", "Maintenances"),
        "statuspages": ("openapi.statuspages_sdk_2", "StatuspagesSDK2"),
        "subscribers": ("openapi.subscribers", "Subscribers"),
    }

    def __init__(
        self,
        bearer_auth: Union[str, Callable[[], str]],
        server_idx: Optional[int] = None,
        server_url: Optional[str] = None,
        url_params: Optional[Dict[str, str]] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None,
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param bearer_auth: The bearer_auth required for authentication
        :param server_idx: The index of the server to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        client_supplied = True
        if client is None:
            client = httpx.Client()
            client_supplied = False

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        async_client_supplied = True
        if async_client is None:
            async_client = httpx.AsyncClient()
            async_client_supplied = False

        if debug_logger is None:
            debug_logger = get_default_logger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        security: Any = None
        if callable(bearer_auth):
            # pylint: disable=unnecessary-lambda-assignment
            security = lambda: models.Security(bearer_auth=bearer_auth())
        else:
            security = models.Security(bearer_auth=bearer_auth)

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        BaseSDK.__init__(
            self,
            SDKConfiguration(
                client=client,
                client_supplied=client_supplied,
                async_client=async_client,
                async_client_supplied=async_client_supplied,
                security=security,
                server_url=server_url,
                server_idx=server_idx,
                retry_config=retry_config,
                timeout_ms=timeout_ms,
                debug_logger=debug_logger,
            ),
            parent_ref=self,
        )

        hooks = SDKHooks()

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        self.sdk_configuration = hooks.sdk_init(self.sdk_configuration)

        weakref.finalize(
            self,
            close_clients,
            cast(ClientOwner, self.sdk_configuration),
            self.sdk_configuration.client,
            self.sdk_configuration.client_supplied,
            self.sdk_configuration.async_client,
            self.sdk_configuration.async_client_supplied,
        )

    def dynamic_import(self, modname, retries=3):
        for attempt in range(retries):
            try:
                return importlib.import_module(modname)
            except KeyError:
                # Clear any half-initialized module and retry
                sys.modules.pop(modname, None)
                if attempt == retries - 1:
                    break
        raise KeyError(f"Failed to import module '{modname}' after {retries} attempts")

    def __getattr__(self, name: str):
        if name in self._sub_sdk_map:
            module_path, class_name = self._sub_sdk_map[name]
            try:
                module = self.dynamic_import(module_path)
                klass = getattr(module, class_name)
                instance = klass(self.sdk_configuration, parent_ref=self)
                setattr(self, name, instance)
                return instance
            except ImportError as e:
                raise AttributeError(
                    f"Failed to import module {module_path} for attribute {name}: {e}"
                ) from e
            except AttributeError as e:
                raise AttributeError(
                    f"Failed to find class {class_name} in module {module_path} for attribute {name}: {e}"
                ) from e

        raise AttributeError(
            f"'{type(self).__name__}' object has no attribute '{name}'"
        )

    def __dir__(self):
        default_attrs = list(super().__dir__())
        lazy_attrs = list(self._sub_sdk_map.keys())
        return sorted(list(set(default_attrs + lazy_attrs)))

    def __enter__(self):
        return self

    async def __aenter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if (
            self.sdk_configuration.client is not None
            and not self.sdk_configuration.client_supplied
        ):
            self.sdk_configuration.client.close()
        self.sdk_configuration.client = None

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if (
            self.sdk_configuration.async_client is not None
            and not self.sdk_configuration.async_client_supplied
        ):
            await self.sdk_configuration.async_client.aclose()
        self.sdk_configuration.async_client = None
